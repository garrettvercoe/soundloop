{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  componentDidMount() {\n    var angularSpeed = 75;\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n    }, this.circle.getLayer());\n    this.props.dispatch(addTone(\"#ababab\", 0, 20, 300));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2,\n      active: false\n    };\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y // draggable\n      ,\n      fill: this.props.color,\n      radius: 16,\n      offset: {\n        x: -305,\n        y: 0\n      },\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","ToneKonva","Component","componentDidMount","angularSpeed","anim","Animation","frame","angleDiff","timeDiff","circle","rotate","getLayer","props","dispatch","componentDidUpdate","prevProps","playing","start","isRunning","stop","constructor","state","isDragging","x","window","innerWidth","y","innerHeight","active","render","color","node","setState","e","target","mapStateToProps","console","log","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\nclass ToneKonva extends React.Component {\n  componentDidMount() {\n    var angularSpeed = 75;\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n    }, this.circle.getLayer());\n\n    this.props.dispatch(addTone(\"#ababab\", 0, 20, 300));\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2,\n      active: false\n    };\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        // draggable\n        fill={this.props.color}\n        radius={16}\n        offset={{\n          x: -305,\n          y: 0\n        }}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}