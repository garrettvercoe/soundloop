{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/LoopKonva.js\";\nimport React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\nimport { throwStatement } from \"@babel/types\";\nimport { updateLoopSpeed } from \"../actions/loops\";\n\nclass LoopKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.numTones = 0;\n  }\n\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(updateLoopSpeed(this.props.id, this.calcTempo()));\n\n    if (this.props.mode === \"angular\") {\n      if (this.props.id < 3) {\n        this.numTones = 32;\n      } else {\n        this.numTones = 16;\n      }\n    } else if (this.props.mode === \"linear\") {\n      this.numTones = Math.pow(2, 5 - this.props.id);\n    }\n\n    var interval = 2 * Math.PI / this.numTones;\n    var currAngle = 0;\n\n    for (var i = 0; i < this.numTones; i++) {\n      var coords = this.findAngleCoord(this.props.center.x, this.props.center.y, currAngle, this.props.radius);\n      this.props.dispatch(addTone(\"transparent\", \"#fff\", 1.5, coords.x - this.props.center.x, coords.y - this.props.center.y, this.props.id, this.props.screenHeight / 50, null, 0));\n      currAngle = currAngle + interval;\n    }\n  }\n\n  calcTempo() {\n    // 90*((window.innerHeight/3)/action.radius)\n    var baseTempo = 110 * this.props.tempo;\n    console.log(\"TEMPO OF \" + this.props.id + \": \" + baseTempo);\n    console.log(\"TEMPO PROPS OF \" + this.props.id + \": \" + this.props.tempo);\n\n    if (this.props.mode === \"linear\") {\n      var multiplier = window.innerHeight / 3 / this.props.radius;\n      this.tempo = baseTempo * 2 / 60 * multiplier;\n    } else if (this.props.mode === \"angular\") {\n      this.tempo = baseTempo * 2 / 60;\n    }\n\n    var toneRatio = this.tempo / 16;\n    var loopRatio = toneRatio * 360;\n    return loopRatio;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.tempo !== this.props.tempo) {\n      console.log(\"UPDATED IN LOOP\");\n      console.log(\"Radius is: \" + this.props.radius);\n      console.log(\"Speed is: \" + this.props.speed);\n      console.log(\"ID is: \" + this.props.id);\n      this.props.dispatch(updateLoopSpeed(this.props.id, this.calcTempo()));\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: this.props.radius,\n      fill: \"transparent\",\n      stroke: this.props.stroke,\n      strokeWidth: 1.5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    shared: state.shared,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/LoopKonva.js"],"names":["React","Circle","connect","addTone","throwStatement","updateLoopSpeed","LoopKonva","Component","constructor","props","numTones","findAngleCoord","cx","cy","angle","distance","x2","Math","cos","y2","sin","x","y","componentDidMount","dispatch","id","calcTempo","mode","pow","interval","PI","currAngle","i","coords","center","radius","screenHeight","baseTempo","tempo","console","log","multiplier","window","innerHeight","toneRatio","loopRatio","componentDidUpdate","prevProps","speed","render","stroke","mapStateToProps","state","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\nimport { throwStatement } from \"@babel/types\";\nimport { updateLoopSpeed } from \"../actions/loops\";\n\nclass LoopKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.numTones = 0;\n  }\n\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(updateLoopSpeed(this.props.id, this.calcTempo()))\n    \n    if (this.props.mode === \"angular\"){\n      if (this.props.id < 3){\n        this.numTones = 32;\n      } else {\n        this.numTones = 16;\n      }\n    } else if (this.props.mode === \"linear\") {\n      this.numTones = Math.pow(2, 5 - this.props.id);\n    }\n    var interval = (2 * Math.PI) / this.numTones;\n    var currAngle = 0;\n    for (var i = 0; i < this.numTones; i++) {\n      var coords = this.findAngleCoord(\n        this.props.center.x,\n        this.props.center.y,\n        currAngle,\n        this.props.radius\n      );\n\n      this.props.dispatch(\n        addTone(\n          \"transparent\",\n          \"#fff\",\n          1.5,\n          coords.x - this.props.center.x,\n          coords.y - this.props.center.y,\n          this.props.id,\n          this.props.screenHeight / 50,\n          null,\n          0\n        )\n      );\n      currAngle = currAngle + interval;\n    }\n  }\n\n  calcTempo(){\n    // 90*((window.innerHeight/3)/action.radius)\n    var baseTempo = 110 * this.props.tempo;\n    console.log(\"TEMPO OF \" + this.props.id + \": \" + baseTempo)\n    console.log(\"TEMPO PROPS OF \" + this.props.id + \": \" + this.props.tempo)\n    if (this.props.mode === \"linear\") {\n      var multiplier = (window.innerHeight/3)/this.props.radius;\n      this.tempo = ((baseTempo * 2)/60)*multiplier;\n    } else if (this.props.mode === \"angular\") {\n      this.tempo = (baseTempo * 2)/60;\n    }\n    var toneRatio = this.tempo/16;\n    var loopRatio = toneRatio * 360;\n    return loopRatio;\n  }\n\n  componentDidUpdate(prevProps){\n    if (prevProps.tempo !== this.props.tempo){\n      console.log(\"UPDATED IN LOOP\")\n      console.log(\"Radius is: \" + this.props.radius)\n      console.log(\"Speed is: \" + this.props.speed)\n      console.log(\"ID is: \" + this.props.id)\n      this.props.dispatch(updateLoopSpeed(this.props.id, this.calcTempo()))\n    }\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.center.x}\n        y={this.props.center.y}\n        radius={this.props.radius}\n        fill={\"transparent\"}\n        stroke={this.props.stroke}\n        strokeWidth={1.5}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    shared: state.shared,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);\n"]},"metadata":{},"sourceType":"module"}