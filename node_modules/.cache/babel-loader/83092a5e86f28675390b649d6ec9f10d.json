{"ast":null,"code":"//TONES\nexport const ADD_TONE = \"ADD_TONE\";\nexport const UPDATE_TONE = \"UPDATE_TONE\";\nexport const RESIZE_TONE = \"RESIZE_TONE\";\nexport const DELETE_TONE = \"DELETE_TONE\";\nexport const RECEIVE_TONES = \"RECEIVE_TONES\";\nexport const REPLACE_TONE = \"REPLACE_TONE\";\nexport function addTone(colorCode, offsetx, offsety, attLoop, rad, sound, rotation) {\n  return {\n    type: ADD_TONE,\n    offset: {\n      x: offsetx,\n      y: offsety\n    },\n    color: colorCode,\n    attachedLoop: attLoop,\n    radius: rad,\n    sound: sound,\n    rotation: rotation\n  };\n}\nexport function deleteTone(index) {\n  return {\n    type: DELETE_TONE,\n    id: index\n  };\n}\nexport function resizeTone(tone) {\n  return {\n    type: RESIZE_TONE,\n    tone\n  };\n}\nexport function updateTone(id, color, sound, size, sustain) {\n  return {\n    type: UPDATE_TONE,\n    id: id,\n    color: color,\n    sound: sound,\n    radius: size,\n    duration: sustain\n  };\n}\nexport function replaceTone(id, xCoord, yCoord, colorCode, stroke, strokeWidth, offsetx, offsety, attLoop, rad, sound, rotation) {\n  return {\n    type: REPLACE_TONE,\n    id: id,\n    position: {\n      x: xCoord,\n      y: yCoord\n    },\n    offset: {\n      x: offsetx,\n      y: offsety\n    },\n    color: colorCode,\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    attachedLoop: attLoop,\n    radius: rad,\n    sound: sound,\n    rotation: rotation\n  };\n}\nexport function receiveTones(tones) {\n  return {\n    type: RECEIVE_TONES,\n    tones\n  };\n}","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/actions/tones.js"],"names":["ADD_TONE","UPDATE_TONE","RESIZE_TONE","DELETE_TONE","RECEIVE_TONES","REPLACE_TONE","addTone","colorCode","offsetx","offsety","attLoop","rad","sound","rotation","type","offset","x","y","color","attachedLoop","radius","deleteTone","index","id","resizeTone","tone","updateTone","size","sustain","duration","replaceTone","xCoord","yCoord","stroke","strokeWidth","position","receiveTones","tones"],"mappings":"AAAA;AACA,OAAO,MAAMA,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,SAASC,OAAT,CACLC,SADK,EAELC,OAFK,EAGLC,OAHK,EAILC,OAJK,EAKLC,GALK,EAMLC,KANK,EAOLC,QAPK,EAQL;AACA,SAAO;AACLC,IAAAA,IAAI,EAAEd,QADD;AAGLe,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAER,OADG;AAENS,MAAAA,CAAC,EAAER;AAFG,KAHH;AAOLS,IAAAA,KAAK,EAAEX,SAPF;AAQLY,IAAAA,YAAY,EAAET,OART;AASLU,IAAAA,MAAM,EAAET,GATH;AAULC,IAAAA,KAAK,EAAEA,KAVF;AAWLC,IAAAA,QAAQ,EAAEA;AAXL,GAAP;AAaD;AACD,OAAO,SAASQ,UAAT,CAAoBC,KAApB,EAA2B;AAChC,SAAO;AACLR,IAAAA,IAAI,EAAEX,WADD;AAELoB,IAAAA,EAAE,EAAED;AAFC,GAAP;AAID;AACD,OAAO,SAASE,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,SAAO;AACLX,IAAAA,IAAI,EAAEZ,WADD;AAELuB,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,UAAT,CAAoBH,EAApB,EAAwBL,KAAxB,EAA+BN,KAA/B,EAAsCe,IAAtC,EAA4CC,OAA5C,EAAqD;AAC1D,SAAO;AACLd,IAAAA,IAAI,EAAEb,WADD;AAELsB,IAAAA,EAAE,EAAEA,EAFC;AAGLL,IAAAA,KAAK,EAAEA,KAHF;AAILN,IAAAA,KAAK,EAAEA,KAJF;AAKLQ,IAAAA,MAAM,EAAEO,IALH;AAMLE,IAAAA,QAAQ,EAAED;AANL,GAAP;AAQD;AAED,OAAO,SAASE,WAAT,CACLP,EADK,EAELQ,MAFK,EAGLC,MAHK,EAILzB,SAJK,EAKL0B,MALK,EAMLC,WANK,EAOL1B,OAPK,EAQLC,OARK,EASLC,OATK,EAULC,GAVK,EAWLC,KAXK,EAYLC,QAZK,EAaL;AACA,SAAO;AACLC,IAAAA,IAAI,EAAET,YADD;AAELkB,IAAAA,EAAE,EAAEA,EAFC;AAGLY,IAAAA,QAAQ,EAAE;AACRnB,MAAAA,CAAC,EAAEe,MADK;AAERd,MAAAA,CAAC,EAAEe;AAFK,KAHL;AAOLjB,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAER,OADG;AAENS,MAAAA,CAAC,EAAER;AAFG,KAPH;AAWLS,IAAAA,KAAK,EAAEX,SAXF;AAYL0B,IAAAA,MAAM,EAAEA,MAZH;AAaLC,IAAAA,WAAW,EAAEA,WAbR;AAcLf,IAAAA,YAAY,EAAET,OAdT;AAeLU,IAAAA,MAAM,EAAET,GAfH;AAgBLC,IAAAA,KAAK,EAAEA,KAhBF;AAiBLC,IAAAA,QAAQ,EAAEA;AAjBL,GAAP;AAmBD;AAED,OAAO,SAASuB,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,SAAO;AACLvB,IAAAA,IAAI,EAAEV,aADD;AAELiC,IAAAA;AAFK,GAAP;AAID","sourcesContent":["//TONES\nexport const ADD_TONE = \"ADD_TONE\";\nexport const UPDATE_TONE = \"UPDATE_TONE\";\nexport const RESIZE_TONE = \"RESIZE_TONE\";\nexport const DELETE_TONE = \"DELETE_TONE\";\nexport const RECEIVE_TONES = \"RECEIVE_TONES\";\nexport const REPLACE_TONE = \"REPLACE_TONE\";\n\nexport function addTone(\n  colorCode,\n  offsetx,\n  offsety,\n  attLoop,\n  rad,\n  sound,\n  rotation\n) {\n  return {\n    type: ADD_TONE,\n\n    offset: {\n      x: offsetx,\n      y: offsety\n    },\n    color: colorCode,\n    attachedLoop: attLoop,\n    radius: rad,\n    sound: sound,\n    rotation: rotation\n  };\n}\nexport function deleteTone(index) {\n  return {\n    type: DELETE_TONE,\n    id: index\n  };\n}\nexport function resizeTone(tone) {\n  return {\n    type: RESIZE_TONE,\n    tone\n  };\n}\n\nexport function updateTone(id, color, sound, size, sustain) {\n  return {\n    type: UPDATE_TONE,\n    id: id,\n    color: color,\n    sound: sound,\n    radius: size,\n    duration: sustain\n  };\n}\n\nexport function replaceTone(\n  id,\n  xCoord,\n  yCoord,\n  colorCode,\n  stroke,\n  strokeWidth,\n  offsetx,\n  offsety,\n  attLoop,\n  rad,\n  sound,\n  rotation\n) {\n  return {\n    type: REPLACE_TONE,\n    id: id,\n    position: {\n      x: xCoord,\n      y: yCoord\n    },\n    offset: {\n      x: offsetx,\n      y: offsety\n    },\n    color: colorCode,\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    attachedLoop: attLoop,\n    radius: rad,\n    sound: sound,\n    rotation: rotation\n  };\n}\n\nexport function receiveTones(tones) {\n  return {\n    type: RECEIVE_TONES,\n    tones\n  };\n}\n"]},"metadata":{},"sourceType":"module"}