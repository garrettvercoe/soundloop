{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var x1 = this.props.x - this.props.offset.x;\n    var y1 = this.props.y - this.props.offset.y;\n    var x2 = this.props.x;\n    var y2 = this.props.y - this.props.radius;\n    var rad = Math.acos((2 * (this.props.radius * this.props.radius) - Math.abs(Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)))) / (2 * (this.props.radius * this.props.radius)));\n    return rad * (180 / Math.PI);\n  }\n\n  componentDidMount() {\n    var angularSpeed = 180;\n    var angle = this.getAngle();\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000;\n    console.log(timerInit);\n    var timerLoop = (timerInit + 360) / angularSpeed * 1000;\n    var played = false;\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n\n      if (!played && timerInit - 20 < frame.time && frame.time > timerInit + 20) {\n        console.log(\"checking\"); //play that sound;\n\n        played = true;\n        this.circle.fill(\"#000\"); //update that toHit;\n      }\n\n      console.log(played);\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y // draggable\n      ,\n      fill: this.props.color,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","ToneKonva","Component","constructor","props","state","isDragging","active","getAngle","bind","x1","x","offset","y1","y","x2","y2","radius","rad","Math","acos","abs","sqrt","PI","componentDidMount","angularSpeed","angle","timerInit","console","log","timerLoop","played","anim","Animation","frame","angleDiff","timeDiff","circle","rotate","time","fill","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","render","color","node","setState","e","target","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var x1 = this.props.x - this.props.offset.x;\n    var y1 = this.props.y - this.props.offset.y;\n    var x2 = this.props.x;\n    var y2 = this.props.y - this.props.radius;\n    var rad = Math.acos(\n      (2 * (this.props.radius * this.props.radius) -\n        Math.abs(Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)))) /\n        (2 * (this.props.radius * this.props.radius))\n    );\n    return rad * (180 / Math.PI);\n  }\n\n  componentDidMount() {\n    var angularSpeed = 180;\n    var angle = this.getAngle();\n\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    console.log(timerInit);\n    var timerLoop = ((timerInit + 360) / angularSpeed) * 1000;\n    var played = false;\n\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n\n      if (\n        !played &&\n        timerInit - 20 < frame.time &&\n        frame.time > timerInit + 20\n      ) {\n        console.log(\"checking\");\n        //play that sound;\n        played = true;\n        this.circle.fill(\"#000\");\n        //update that toHit;\n      }\n      console.log(played);\n    }, this.circle.getLayer());\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        // draggable\n        fill={this.props.color}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}