{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.angularSpeed = 0;\n    this.trueTime = 0;\n    this.lastTrueTime = 0;\n    this.lastTime = 0;\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    // var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    // if (this.props.mode === \"angular\") {\n    //   // this.angularSpeed = this.props.tempo;\n    //   this.angularSpeed = this.calcTempo();\n    // } else if (this.props.mode === \"linear\") {\n    //   this.angularSpeed = Math.floor(\n    //     this.props.loops[this.props.attachedLoop].speed\n    //   );\n    // }\n    console.log(\"SPEED for \" + this.props.id + \" initially: \" + this.props.loops[this.props.attachedLoop].speed);\n    this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    console.log(\"GET SPEED: \" + this.angularSpeed);\n    this.angle = this.getAngle(); // console.log(\"ANGLE: \" + angle)\n\n    console.log(\"ANGLE for \" + this.props.id + \" initially: \" + this.angle);\n    this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n    this.timerLoop = 360 / this.angularSpeed * 1000; // console.log(\"INITIAL TIMER INIT for \" + this.props.id + \": \" + this.timerInit)\n    // console.log(\"INITIAL TIMER LOOP for \" + this.props.id + \": \"  + this.timerLoop)\n    // rotate circle initially to loop rotation\n    // this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n      // trying to figure out whether issue in timeDiff or angularSpeed\n      // frame.timeDiff = 32;\n      // frame.frameRate = 24;\n      var tDiff = frame.timeDiff;\n      var angleDiff = tDiff * this.angularSpeed / 1000; // console.log(\"TIMEDIFF LOOP \" + this.props.attachedLoop + \": \" + tDiff)\n      // console.log(\"ANGULAR SPEED \" + this.props.attachedLoop + \": \" + this.angularSpeed)\n      // console.log(\"ANGlEDIFF \" + this.props.attachedLoop + \": \" + angleDiff)\n\n      this.circle.rotate(angleDiff);\n      this.trueTime = frame.time - this.lastTime;\n\n      if (this.timerInit - 10 < this.trueTime && this.trueTime < this.timerInit + 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound, this.props.duration)); // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n      } else if (this.trueTime % this.timerLoop < this.timerInit + 20 && this.trueTime % this.timerLoop > this.timerInit - 20 && this.props.sound !== null) {\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      }\n    }, this.circle.getLayer()); // if (this.props.playing) {\n    //   this.anim.start();\n    // }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({\n        x: this.props.offset.x,\n        y: this.props.offset.y\n      });\n    } // listen for when speed of attached loop changes, not consistent when listening for tempo to change\n\n\n    if (prevProps.loops[this.props.attachedLoop].speed !== this.props.loops[this.props.attachedLoop].speed) {\n      // check to see if changed within same pause\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      }\n\n      this.angle = this.getAngle();\n      var newAngle = (this.angle + this.circle.rotation()) % 360; // console.log (\"TEST OF NEW ANG 5: \" + newAngle)\n\n      this.angle = newAngle;\n      console.log(\"ANGLE for \" + this.props.id + \" updated: \" + this.angle);\n      console.log(\"SPEED for \" + this.props.id + \" updated: \" + this.props.loops[this.props.attachedLoop].speed);\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      console.log(\"GET SPEED UPDATE: \" + this.angularSpeed);\n      this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n      this.timerLoop = 360 / this.angularSpeed * 1000;\n    }\n\n    if (prevProps.loops[this.props.attachedLoop].active !== this.props.loops[this.props.attachedLoop].active && !this.props.loops[this.props.attachedLoop].active) {\n      this.props.dispatch(updateTone(this.props.id, \"transparent\", null, 1.5));\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop(); // on pause, update the rotation value of the loop in the store\n\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      // attached loop must be the same as the loopToSnap\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // find new offset values for snap, depending on rotation\n\n\n  findTrueOffset(offX, offY, angle) {\n    var originalAngle = Math.atan2(offX, offY);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    var dist = Math.sqrt(offX * offX + offY * offY);\n    const offX2 = Math.sin(newAngle) * dist;\n    const offY2 = Math.cos(newAngle) * dist;\n    return {\n      x: offX2,\n      y: offY2\n    };\n  }\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TK: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y, loopToSnap.index);\n      console.log(\"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop);\n\n      if (!this.props.playing) {\n        this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, this.props.radius, this.props.duration));\n      }\n    }\n  }\n\n  handleDragStart() {\n    if (this.props.playing === false) {\n      console.log(\"zIndex: \" + this.circle.zIndex()); // move current tone above all of the others\n\n      this.circle.zIndex(this.props.tones.length); // for all tones, if sound null make them visible on drag\n\n      var radius = this.props.screenHeight / 350;\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n          this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n        }\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation()); // new x and y are coord at original\n\n    var newX = circX - trueOff.x;\n    var newY = circY - trueOff.y;\n    this.snap(newX, newY); // make the tones transparent on drag end\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    } // this.props.dispatch(deleteTone(this.props.id));\n\n\n    this.props.dispatch(replaceTone(this.props.id, this.cx, this.cy, \"transparent\", \"#fff\", 1.5, this.props.offset.x, this.props.offset.y, this.props.attachedLoop, this.props.screenHeight / 50, null, loopRotation));\n  }\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      draggable: true,\n      onDragStart: this.handleDragStart,\n      onDragEnd: this.handleDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","connect","Konva","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","replaceTone","ToneKonva","Component","constructor","props","cx","center","x","cy","y","angularSpeed","trueTime","lastTrueTime","lastTime","getAngle","bind","handleDragEnd","handleDragStart","snap","findClosestLoop","findTrueOffset","radius","loops","attachedLoop","x1","offset","y1","Math","round","x2","y2","rad","acos","abs","deg","PI","componentDidMount","console","log","id","speed","angle","timerInit","timerLoop","anim","Animation","frame","tDiff","timeDiff","angleDiff","circle","rotate","time","sound","dispatch","duration","getLayer","componentDidUpdate","prevProps","color","newAngle","rotation","active","playing","start","isRunning","stop","distToCenter","acceptableRange","loopArray","curr","diff","i","length","newdiff","index","value","findClosestInterval","a","b","loop","min","ret","tones","diffX","diffY","dist","sqrt","offX","offY","originalAngle","atan2","angleRad","offX2","sin","offY2","cos","findTrueCoordinates","distance","loopToSnap","trueCoords","intervalId","zIndex","screenHeight","loopRotation","circX","circY","offsetX","offsetY","trueOff","newX","newY","render","stroke","strokeWidth","node","mapStateToProps","state","shared","rot","mode","tempo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.angularSpeed = 0;\n    this.trueTime = 0;\n    this.lastTrueTime = 0;\n    this.lastTime = 0;\n\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n        (2 * (radius * radius))\n    );\n\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    // var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n\n    // if (this.props.mode === \"angular\") {\n    //   // this.angularSpeed = this.props.tempo;\n    //   this.angularSpeed = this.calcTempo();\n    // } else if (this.props.mode === \"linear\") {\n    //   this.angularSpeed = Math.floor(\n    //     this.props.loops[this.props.attachedLoop].speed\n    //   );\n    // }\n    console.log(\"SPEED for \" + this.props.id + \" initially: \" + this.props.loops[this.props.attachedLoop].speed)\n    this.angularSpeed=this.props.loops[this.props.attachedLoop].speed\n    console.log(\"GET SPEED: \" + this.angularSpeed)\n\n    this.angle = this.getAngle();\n    // console.log(\"ANGLE: \" + angle)\n    console.log(\"ANGLE for \" + this.props.id + \" initially: \" + this.angle)\n    this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n    this.timerLoop = (360 / this.angularSpeed) * 1000;\n    // console.log(\"INITIAL TIMER INIT for \" + this.props.id + \": \" + this.timerInit)\n    // console.log(\"INITIAL TIMER LOOP for \" + this.props.id + \": \"  + this.timerLoop)\n\n    // rotate circle initially to loop rotation\n    // this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n      // trying to figure out whether issue in timeDiff or angularSpeed\n      // frame.timeDiff = 32;\n      // frame.frameRate = 24;\n      var tDiff = frame.timeDiff;\n      var angleDiff = (tDiff * this.angularSpeed) / 1000;\n      // console.log(\"TIMEDIFF LOOP \" + this.props.attachedLoop + \": \" + tDiff)\n      // console.log(\"ANGULAR SPEED \" + this.props.attachedLoop + \": \" + this.angularSpeed)\n      // console.log(\"ANGlEDIFF \" + this.props.attachedLoop + \": \" + angleDiff)\n\n      this.circle.rotate(angleDiff);\n      this.trueTime = frame.time - this.lastTime;\n\n      if (\n        this.timerInit - 10 < this.trueTime &&\n        this.trueTime < this.timerInit + 10 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n      } else if (\n        this.trueTime % this.timerLoop < this.timerInit + 20 &&\n        this.trueTime % this.timerLoop > this.timerInit - 20 &&\n        this.props.sound !== null\n      ) {\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      }\n    }, this.circle.getLayer());\n\n    // if (this.props.playing) {\n    //   this.anim.start();\n    // }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({ x: this.props.offset.x, y: this.props.offset.y });\n    }\n\n    // listen for when speed of attached loop changes, not consistent when listening for tempo to change\n    if (prevProps.loops[this.props.attachedLoop].speed !== this.props.loops[this.props.attachedLoop].speed) {\n      // check to see if changed within same pause\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      }\n      this.angle = this.getAngle();\n      \n      var newAngle = (this.angle + this.circle.rotation())%360\n      // console.log (\"TEST OF NEW ANG 5: \" + newAngle)\n      \n      this.angle = newAngle;\n      console.log(\"ANGLE for \" + this.props.id + \" updated: \" + this.angle)\n      console.log(\"SPEED for \" + this.props.id + \" updated: \" + this.props.loops[this.props.attachedLoop].speed)\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      console.log(\"GET SPEED UPDATE: \" + this.angularSpeed)\n      this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n      \n      this.timerLoop = (360 / this.angularSpeed) * 1000;\n    }\n\n    if (prevProps.loops[this.props.attachedLoop].active !== this.props.loops[this.props.attachedLoop].active \n      && !this.props.loops[this.props.attachedLoop].active) {\n          this.props.dispatch(updateTone(this.props.id, \"transparent\", null, 1.5));\n\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop(); \n        // on pause, update the rotation value of the loop in the store\n        this.props.dispatch(\n          updateLoop(this.props.attachedLoop, this.circle.rotation())\n        );\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      // attached loop must be the same as the loopToSnap\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // find new offset values for snap, depending on rotation\n  findTrueOffset(offX, offY, angle) {\n    var originalAngle = Math.atan2(offX, offY);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    var dist = Math.sqrt(offX * offX + offY * offY);\n    const offX2 = Math.sin(newAngle) * dist;\n    const offY2 = Math.cos(newAngle) * dist;\n    return { x: offX2, y: offY2 };\n  }\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TK: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(\n        trueCoords.x,\n        trueCoords.y,\n        loopToSnap.index\n      );\n      console.log(\n        \"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop\n      );\n      if (!this.props.playing) {\n        this.props.dispatch(\n          updateTone(\n            intervalId,\n            this.props.color,\n            this.props.sound,\n            this.props.radius,\n            this.props.duration\n          )\n        );\n      }\n    }\n  }\n\n  handleDragStart() {\n    if (this.props.playing === false) {\n      console.log(\"zIndex: \" + this.circle.zIndex());\n      // move current tone above all of the others\n      this.circle.zIndex(this.props.tones.length);\n      // for all tones, if sound null make them visible on drag\n      var radius = this.props.screenHeight / 350;\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (\n          this.props.tones[i].sound === null &&\n          this.props.loops[this.props.tones[i].attachedLoop].active === true\n        ) {\n          this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n        }\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation());\n\n    // new x and y are coord at original\n    var newX = circX - trueOff.x;\n    var newY = circY - trueOff.y;\n\n    this.snap(newX, newY);\n    // make the tones transparent on drag end\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (\n        this.props.tones[i].sound === null &&\n        this.props.loops[this.props.tones[i].attachedLoop].active === true\n      ) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n    // this.props.dispatch(deleteTone(this.props.id));\n    this.props.dispatch(\n      replaceTone(\n        this.props.id,\n        this.cx,\n        this.cy,\n        \"transparent\",\n        \"#fff\",\n        1.5,\n        this.props.offset.x,\n        this.props.offset.y,\n        this.props.attachedLoop,\n        this.props.screenHeight / 50,\n        null,\n        loopRotation\n      )\n    );\n  }\n\n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragEnd={this.handleDragEnd}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}