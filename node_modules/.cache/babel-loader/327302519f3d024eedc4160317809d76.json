{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  } // CHECK HERE FOR STRANGE SPEED STUFF\n\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var test = (2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)); //test = test.toFixed(2)\n    // var rad = test;\n\n    console.log(\"CALC: \" + test);\n    var deg = rad * (180 / Math.PI);\n    console.log(\"DEG: \" + deg);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed; //var angularSpeed = 75;\n\n    console.log(this.props);\n    var angle = this.getAngle(); // console.log(\"ANGLE: \" + angle)\n\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000;\n    console.log(\"TIMER INIT for \" + this.props.id + \": \" + timerInit);\n    this.circle.opacity((this.circle.rotation() + angle) % 360 / 1080 + 0.66);\n    var timerLoop = 360 / angularSpeed * 1000; // rotate circle initially to loop rotation\n\n    this.circle.rotate(this.props.rotation);\n    this.anim = new Konva.Animation(frame => {\n      var constTimeDiff = 16;\n      console.log(\"TIME: \" + frame.time); // frame.frameRate = 30;\n      // frame.timeDiff = 33;\n\n      console.log(\"frameRate: \" + frame.frameRate);\n      var angleDiff = frame.timeDiff * angularSpeed / 1000; // console.log(\"angleDiff: \" + angleDiff)\n\n      console.log(\"timeDiff for \" + this.props.id + \": \" + frame.timeDiff);\n      this.circle.rotate(angleDiff); // console.log(\"COLOR \" + this.props.color + \" PLAYED: \" + played)\n      // variable opacity based on angular location\n\n      this.circle.opacity((this.circle.rotation() + angle) % 360 / 1080 + 0.66);\n\n      if (timerInit - 10 < frame.time && frame.time < timerInit + 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound, this.props.color));\n      } else if (frame.time % timerLoop < timerInit + 20 && frame.time % timerLoop > timerInit - 20 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // if (this.props.loops[this.props.attachedLoop].active === false){\n    //   this.circle.fill(\"transparent\");\n    // }\n    console.log(\"UPDATE!!!!\");\n\n    if (prevProps.color !== this.props.color) {\n      console.log(\"replace\");\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({\n        x: this.props.offset.x,\n        y: this.props.offset.y\n      });\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n        console.log(\"ROTATION: \" + this.circle.rotation());\n        console.log(\"OFFSETX: \" + this.circle.offsetX());\n        console.log(\"Position: \" + this.circle.x()); // on pause, update the rotation value of the loop in the store\n\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.props.tones[i].position.x - this.props.tones[i].offset.x;\n      var y = this.props.tones[i].position.y - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n\n    return ret;\n  }\n\n  findFakeCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    console.log(\"OG ANGLE: \" + originalAngle);\n    console.log(\"LOOP ANGLE: \" + angleRad);\n    console.log(\"NEW ANGLE: \" + newAngle);\n    const x2 = cx + Math.cos(newAngle) * distance;\n    const y2 = cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    console.log(\"x1: \" + x1);\n    console.log(\"y1: \" + y1);\n    console.log(\"cy: \" + cy); // calculate virtual location with rotation\n    // first calculate distance\n\n    var a = y1 - cy;\n    var b = x1 - cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"CLOSEST LOOP: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y);\n      console.log(\"CLOSEST TONE: \" + intervalId);\n\n      if (!this.props.playing) {\n        this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, 0));\n      }\n    }\n  }\n\n  handleDragStart() {\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    console.log(\"TEST LOOP ROT: \" + loopRotation);\n    console.log(\"drag end x: \" + this.circle.x());\n    console.log(\"drag end y: \" + this.circle.y());\n    console.log(\"drag end abs pos: \" + this.circle.getAbsolutePosition());\n    console.log(\"drag end offsetX: \" + this.circle.offsetX());\n    console.log(\"drag end offsetY: \" + this.circle.offsetY());\n    console.log(\"drag end x + offsetX: \" + this.circle.x() + this.circle.offsetX());\n    console.log(\"drag end y + offsetY: \" + this.circle.y() + this.circle.offsetY()); // console.log(\"drag end x 2: \" + this.props.x)\n    //console.log(\"STAGE: \" + this.stage.height())\n    // check to see if x and y close to \n\n    this.snap(this.circle.x(), this.circle.y()); // this.props.dispatch(addTone(window.innerWidth/2, window.innerHeight/2, \"red\", \"#fff\", 1.5, this.props.offset.x, (this.props.offset.y), this.props.attachedLoop, 20, null, loopRotation));\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    } // this.props.dispatch(deleteTone(this.props.id));\n\n\n    this.props.dispatch(replaceTone(this.props.id, window.innerWidth / 2, window.innerHeight / 2, \"transparent\", \"#fff\", 1.5, this.props.offset.x, this.props.offset.y, this.props.attachedLoop, 20, null, loopRotation));\n  }\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      draggable: true,\n      onDragStart: this.handleDragStart,\n      onDragEnd: this.handleDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","rotateTone","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","replaceTone","ToneKonva","Component","constructor","props","getAngle","bind","handleDragEnd","handleDragStart","snap","findClosestLoop","radius","loops","attachedLoop","x1","x","offset","y1","Math","round","y","x2","y2","rad","acos","abs","test","console","log","deg","PI","componentDidMount","angularSpeed","speed","angle","timerInit","id","circle","opacity","rotation","timerLoop","rotate","anim","Animation","frame","constTimeDiff","time","frameRate","angleDiff","timeDiff","sound","dispatch","color","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","offsetX","distToCenter","acceptableRange","loopArray","curr","diff","i","length","newdiff","index","value","findClosestInterval","a","b","min","ret","tones","position","diffX","diffY","dist","sqrt","findFakeCoordinates","distance","originalAngle","atan2","cx","window","innerWidth","cy","innerHeight","angleRad","newAngle","cos","sin","loopToSnap","fakeCoords","intervalId","loopRotation","getAbsolutePosition","offsetY","render","active","stroke","strokeWidth","node","mapStateToProps","state","shared","rot"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  // CHECK HERE FOR STRANGE SPEED STUFF\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    \n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / \n        (2 * (radius * radius))\n    );\n\n    var test = (2 * (radius * radius) -\n    Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / \n    (2 * (radius * radius))\n    //test = test.toFixed(2)\n    // var rad = test;\n\n    console.log(\"CALC: \" + test)\n    var deg = rad * ((180 / Math.PI));\n    console.log(\"DEG: \" + deg)\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } \n    else return deg; \n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n    console.log(this.props);\n    var angle = this.getAngle();\n    // console.log(\"ANGLE: \" + angle)\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    console.log(\"TIMER INIT for \" + this.props.id + \": \" + timerInit)\n    \n    this.circle.opacity(((this.circle.rotation() + angle) % 360) / 1080 + 0.66);\n    var timerLoop = (360 / angularSpeed) * 1000;\n    \n    // rotate circle initially to loop rotation\n    this.circle.rotate(this.props.rotation)\n\n    this.anim = new Konva.Animation(frame => {\n      var constTimeDiff = 16;\n      console.log(\"TIME: \" + frame.time)\n      // frame.frameRate = 30;\n      // frame.timeDiff = 33;\n      console.log(\"frameRate: \" + frame.frameRate)\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      // console.log(\"angleDiff: \" + angleDiff)\n      console.log(\"timeDiff for \" + this.props.id+ \": \" + frame.timeDiff)\n      this.circle.rotate(angleDiff);\n      // console.log(\"COLOR \" + this.props.color + \" PLAYED: \" + played)\n      // variable opacity based on angular location\n      this.circle.opacity(\n        ((this.circle.rotation() + angle) % 360) / 1080 + 0.66\n      );\n      if (\n        timerInit - 10 < frame.time &&\n        frame.time < timerInit + 10 && \n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound, this.props.color));\n      } else if (\n        frame.time % timerLoop < timerInit + 20 &&\n        frame.time % timerLoop > timerInit - 20 && \n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound));\n      }\n\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // if (this.props.loops[this.props.attachedLoop].active === false){\n    //   this.circle.fill(\"transparent\");\n    // }\n    console.log(\"UPDATE!!!!\")\n\n    if (prevProps.color !== this.props.color){\n      console.log(\"replace\")\n      this.circle.x(this.props.x)\n      this.circle.y(this.props.y)\n      this.circle.offset({x:this.props.offset.x, y:this.props.offset.y})\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        \n      } else {\n        this.anim.isRunning() && this.anim.stop();\n        console.log(\"ROTATION: \" + this.circle.rotation())\n        console.log(\"OFFSETX: \" + this.circle.offsetX())\n        console.log(\"Position: \" + this.circle.x())\n\n        // on pause, update the rotation value of the loop in the store\n        this.props.dispatch(\n          updateLoop(\n            this.props.attachedLoop,\n            this.circle.rotation()\n          )\n        )\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b){\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++){\n      // need to compare pt + or - offset\n      var x = this.props.tones[i].position.x - this.props.tones[i].offset.x;\n      var y = this.props.tones[i].position.y - this.props.tones[i].offset.y;\n      var diffX = x-a;\n      var diffY = y-b;\n      var dist = Math.sqrt((diffX*diffX)+(diffY*diffY));\n      if (dist < min){\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n      \n    }\n    return ret;\n  }\n\n  findFakeCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var angleRad = angle * (Math.PI/180);\n    var newAngle = originalAngle - angleRad;\n    console.log(\"OG ANGLE: \" + originalAngle)\n    console.log(\"LOOP ANGLE: \" + angleRad)\n    console.log(\"NEW ANGLE: \" + newAngle)\n    const x2 = cx + Math.cos(newAngle) * distance;\n    const y2 = cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    console.log(\"x1: \" + x1)\n    console.log(\"y1: \" + y1)\n    console.log(\"cy: \" + cy)\n    \n    \n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - cy;\n    var b = x1 - cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    if (loopToSnap){\n      console.log(\"CLOSEST LOOP: \" + loopToSnap.index)\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter)\n    \n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y)\n      console.log(\"CLOSEST TONE: \" + intervalId)\n      if( !this.props.playing){\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          0\n        )\n      );\n        }\n    }\n  }\n\n  handleDragStart(){\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null){\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5))\n      }\n    }\n  }\n\n  handleDragEnd(){\n\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    console.log(\"TEST LOOP ROT: \" + loopRotation)\n    console.log(\"drag end x: \" + this.circle.x())\n    console.log(\"drag end y: \" + this.circle.y())\n    console.log(\"drag end abs pos: \" + this.circle.getAbsolutePosition())\n    console.log(\"drag end offsetX: \" + this.circle.offsetX())\n    console.log(\"drag end offsetY: \" + this.circle.offsetY())\n    console.log(\"drag end x + offsetX: \" + this.circle.x()+this.circle.offsetX())\n    console.log(\"drag end y + offsetY: \" + this.circle.y()+this.circle.offsetY())\n    // console.log(\"drag end x 2: \" + this.props.x)\n    //console.log(\"STAGE: \" + this.stage.height())\n    // check to see if x and y close to \n    this.snap(this.circle.x(), this.circle.y())\n    // this.props.dispatch(addTone(window.innerWidth/2, window.innerHeight/2, \"red\", \"#fff\", 1.5, this.props.offset.x, (this.props.offset.y), this.props.attachedLoop, 20, null, loopRotation));\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null){\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5))\n      }\n    }\n    // this.props.dispatch(deleteTone(this.props.id));\n    this.props.dispatch(replaceTone(this.props.id, window.innerWidth/2, window.innerHeight/2, \"transparent\", \"#fff\", 1.5, this.props.offset.x, (this.props.offset.y), this.props.attachedLoop, 20, null, loopRotation))\n  }\n  \n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active === true){\n      color = this.props.color\n    }\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragEnd={this.handleDragEnd}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);"]},"metadata":{},"sourceType":"module"}