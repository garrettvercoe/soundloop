{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/LoopKonva.js\";\nimport React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nclass LoopKonva extends React.Component {\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  componentDidMount() {\n    var cx = this.props.center.x;\n    var cy = this.props.center.y;\n    var numTones = Math.pow(2, 4 - this.props.id);\n    var interval = 2 * Math.PI / numTones;\n    var currAngle = 0;\n\n    for (var i = 0; i < numTones; i++) {\n      var coords = this.findAngleCoord(cx, cy, currAngle, this.props.radius);\n      this.props.dispatch(addTone(\"transparent\", \"#fff\", 1.5, coords.x - cx, coords.y - cy, this.props.id, 20, null, 0)); //this.props.dispatch(addTone(cx, cy, \"#fff9f3\", \"#ed1e79\", 1.5, coords.x-cx, (coords.y-cy), this.props.id, 20, null));\n\n      currAngle = currAngle + interval;\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2,\n      radius: this.props.radius,\n      fill: \"transparent\",\n      stroke: this.props.stroke,\n      strokeWidth: 1.5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/LoopKonva.js"],"names":["React","Circle","connect","addTone","LoopKonva","Component","findAngleCoord","cx","cy","angle","distance","x2","Math","cos","y2","sin","x","y","componentDidMount","props","center","numTones","pow","id","interval","PI","currAngle","i","coords","radius","dispatch","render","window","innerWidth","innerHeight","stroke","mapStateToProps","state","shared"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AACtCC,EAAAA,cAAc,CAACC,EAAD,EAAKC,EAAL,EAASC,KAAT,EAAgBC,QAAhB,EAA0B;AACtC,UAAMC,EAAE,GAAGJ,EAAE,GAAGK,IAAI,CAACC,GAAL,CAASJ,KAAT,IAAkBC,QAAlC;AACA,UAAMI,EAAE,GAAGN,EAAE,GAAGI,IAAI,CAACG,GAAL,CAASN,KAAT,IAAkBC,QAAlC;AACA,WAAO;AAAEM,MAAAA,CAAC,EAAEL,EAAL;AAASM,MAAAA,CAAC,EAAEH;AAAZ,KAAP;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,QAAIX,EAAE,GAAG,KAAKY,KAAL,CAAWC,MAAX,CAAkBJ,CAA3B;AACA,QAAIR,EAAE,GAAG,KAAKW,KAAL,CAAWC,MAAX,CAAkBH,CAA3B;AAEA,QAAII,QAAQ,GAAGT,IAAI,CAACU,GAAL,CAAS,CAAT,EAAY,IAAI,KAAKH,KAAL,CAAWI,EAA3B,CAAf;AACA,QAAIC,QAAQ,GAAI,IAAIZ,IAAI,CAACa,EAAV,GAAgBJ,QAA/B;AACA,QAAIK,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAApB,EAA8BM,CAAC,EAA/B,EAAmC;AACjC,UAAIC,MAAM,GAAG,KAAKtB,cAAL,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4BkB,SAA5B,EAAuC,KAAKP,KAAL,CAAWU,MAAlD,CAAb;AACA,WAAKV,KAAL,CAAWW,QAAX,CACE3B,OAAO,CACL,aADK,EAEL,MAFK,EAGL,GAHK,EAILyB,MAAM,CAACZ,CAAP,GAAWT,EAJN,EAKLqB,MAAM,CAACX,CAAP,GAAWT,EALN,EAML,KAAKW,KAAL,CAAWI,EANN,EAOL,EAPK,EAQL,IARK,EASL,CATK,CADT,EAFiC,CAejC;;AACAG,MAAAA,SAAS,GAAGA,SAAS,GAAGF,QAAxB;AACD;AACF;;AAEDO,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AACE,MAAA,CAAC,EAAEC,MAAM,CAACC,UAAP,GAAoB,CADzB;AAEE,MAAA,CAAC,EAAED,MAAM,CAACE,WAAP,GAAqB,CAF1B;AAGE,MAAA,MAAM,EAAE,KAAKf,KAAL,CAAWU,MAHrB;AAIE,MAAA,IAAI,EAAE,aAJR;AAKE,MAAA,MAAM,EAAE,KAAKV,KAAL,CAAWgB,MALrB;AAME,MAAA,WAAW,EAAE,GANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AA7CqC;;AAgDxC,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLjB,IAAAA,MAAM,EAAEiB,KAAK,CAACC,MAAN,CAAalB;AADhB,GAAP;AAGD;;AAED,eAAelB,OAAO,CAACkC,eAAD,CAAP,CAAyBhC,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nclass LoopKonva extends React.Component {\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  componentDidMount() {\n    var cx = this.props.center.x;\n    var cy = this.props.center.y;\n\n    var numTones = Math.pow(2, 4 - this.props.id);\n    var interval = (2 * Math.PI) / numTones;\n    var currAngle = 0;\n    for (var i = 0; i < numTones; i++) {\n      var coords = this.findAngleCoord(cx, cy, currAngle, this.props.radius);\n      this.props.dispatch(\n        addTone(\n          \"transparent\",\n          \"#fff\",\n          1.5,\n          coords.x - cx,\n          coords.y - cy,\n          this.props.id,\n          20,\n          null,\n          0\n        )\n      );\n      //this.props.dispatch(addTone(cx, cy, \"#fff9f3\", \"#ed1e79\", 1.5, coords.x-cx, (coords.y-cy), this.props.id, 20, null));\n      currAngle = currAngle + interval;\n    }\n  }\n\n  render() {\n    return (\n      <Circle\n        x={window.innerWidth / 2}\n        y={window.innerHeight / 2}\n        radius={this.props.radius}\n        fill={\"transparent\"}\n        stroke={this.props.stroke}\n        strokeWidth={1.5}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);\n"]},"metadata":{},"sourceType":"module"}