{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.angularSpeed = 0;\n    this.trueTime = 0;\n    this.lastTrueTime = 0;\n    this.lastTime = 0;\n    this.lastTempo = 110;\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    // var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    // if (this.props.mode === \"angular\") {\n    //   // this.angularSpeed = this.props.tempo;\n    //   this.angularSpeed = this.calcTempo();\n    // } else if (this.props.mode === \"linear\") {\n    //   this.angularSpeed = Math.floor(\n    //     this.props.loops[this.props.attachedLoop].speed\n    //   );\n    // }\n    this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    this.angle = this.getAngle(); // console.log(\"ANGLE: \" + angle)\n\n    console.log(\"ANGLE for \" + this.props.id + \" initially: \" + this.angle);\n    this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n    this.timerLoop = 360 / this.angularSpeed * 1000; // console.log(\"INITIAL TIMER INIT for \" + this.props.id + \": \" + this.timerInit)\n    // console.log(\"INITIAL TIMER LOOP for \" + this.props.id + \": \"  + this.timerLoop)\n    // rotate circle initially to loop rotation\n    // this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n      // trying to figure out whether issue in timeDiff or angularSpeed\n      frame.timeDiff = 32;\n      frame.frameRate = 24;\n      var tDiff = frame.timeDiff;\n      var angleDiff = tDiff * this.angularSpeed / 1000;\n      console.log(\"TIMEDIFF LOOP \" + this.props.attachedLoop + \": \" + tDiff);\n      console.log(\"ANGULAR SPEED \" + this.props.attachedLoop + \": \" + this.angularSpeed);\n      console.log(\"ANGlEDIFF \" + this.props.attachedLoop + \": \" + angleDiff);\n      this.circle.rotate(angleDiff);\n      this.trueTime = frame.time - this.lastTime; // console.log(\"TRUE TIME of \" + this.props.id +  \": \" + this.trueTime)\n      // console.log(\"LAST TIME of \" + this.props.id +  \": \" + this.lastTime)\n      // console.log(\"FRAME TIME of \" + this.props.id +  \": \" + frame.time)\n      // console.log(\"Rotate with timerInit \" + this.timerInit + \" and timerLoop\" +  this.timerLoop)\n\n      if (this.timerInit - 10 < this.trueTime && this.trueTime < this.timerInit + 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound, this.props.duration)); // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n      } else if (this.trueTime % this.timerLoop < this.timerInit + 20 && this.trueTime % this.timerLoop > this.timerInit - 20 && this.props.sound !== null) {\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({\n        x: this.props.offset.x,\n        y: this.props.offset.y\n      });\n    }\n\n    if (prevProps.tempo !== this.props.tempo) {\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      } // console.log(\"LAST TIME for \" + this.props.id + \": \" + this.lastTime)\n      // console.log(\"TRUE TIME: \" + this.trueTime)\n      // timerInit and timerLoop update when tempo changes\n      // need to reset frame.time\n      // console.log(\"UPDATE TEMPO: \" + this.props.tempo)\n\n\n      this.angle = this.getAngle(); // console.log (\"TEST OF NEW ANG: \" + this.circle.rotation())\n      // console.log (\"TEST OF NEW ANG 2: \" + (this.circle.rotation()-this.angle))\n      // console.log (\"TEST OF NEW ANG 3: \" + (360 - (this.circle.rotation()%360)))\n      // console.log (\"TEST OF NEW ANG 4: \" + ((this.circle.rotation()%360)))\n\n      var newAngle = (this.angle + this.circle.rotation()) % 360; // console.log (\"TEST OF NEW ANG 5: \" + newAngle)\n\n      this.angle = newAngle;\n      console.log(\"ANGLE for \" + this.props.id + \" updated: \" + this.angle);\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n      this.timerLoop = 360 / this.angularSpeed * 1000; // console.log (\"TRUE TIME UPDATE: \" + this.trueTime)\n      // console.log(\"TIMER INIT UPDATE for \" + this.props.id + \": \" + this.timerInit)\n      // console.log(\"TIMER LOOP UPDATE for \" + this.props.id + \": \" + this.timerLoop)\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        // // if (this.lastTempo !== this.props.tempo){\n        //   // console.log (\"TEMPO HAS CHANGED to \" + this.props.tempo + \" IN PAUSE\")\n        //   // set lastTempo to the current at play\n        //   this.lastTempo = this.props.tempo;\n        //   // console.log(\"lastTempo is: \" + this.lastTempo)\n        //   this.lastTime += this.trueTime;\n        //   var newAngle = (this.angle + this.circle.rotation())%360\n        //   this.angle = newAngle;\n        //   this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n        //   this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n        //   this.timerLoop = (360 / this.angularSpeed) * 1000;\n        //   // console.log(\"TRUE TIME UPDATE: \" + this.trueTime)\n        //   // console.log(\"TIMER INIT UPDATE for \" + this.props.id + \": \" + this.timerInit)\n        //   // console.log(\"TIMER LOOP UPDATE for \" + this.props.id + \": \" + this.timerLoop)\n        // // }\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop(); // on pause, update the rotation value of the loop in the store\n\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      // attached loop must be the same as the loopToSnap\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // find new offset values for snap, depending on rotation\n\n\n  findTrueOffset(offX, offY, angle) {\n    var originalAngle = Math.atan2(offX, offY);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    var dist = Math.sqrt(offX * offX + offY * offY);\n    const offX2 = Math.sin(newAngle) * dist;\n    const offY2 = Math.cos(newAngle) * dist;\n    return {\n      x: offX2,\n      y: offY2\n    };\n  }\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TK: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y, loopToSnap.index);\n      console.log(\"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop);\n\n      if (!this.props.playing) {\n        this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, this.props.radius, this.props.duration));\n      }\n    }\n  }\n\n  handleDragStart() {\n    if (this.props.playing === false) {\n      console.log(\"zIndex: \" + this.circle.zIndex()); // move current tone above all of the others\n\n      this.circle.zIndex(this.props.tones.length); // for all tones, if sound null make them visible on drag\n\n      var radius = this.props.screenHeight / 350;\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n          this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n        }\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation()); // new x and y are coord at original\n\n    var newX = circX - trueOff.x;\n    var newY = circY - trueOff.y;\n    this.snap(newX, newY); // make the tones transparent on drag end\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    } // this.props.dispatch(deleteTone(this.props.id));\n\n\n    this.props.dispatch(replaceTone(this.props.id, this.cx, this.cy, \"transparent\", \"#fff\", 1.5, this.props.offset.x, this.props.offset.y, this.props.attachedLoop, this.props.screenHeight / 50, null, loopRotation));\n  }\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      draggable: true,\n      onDragStart: this.handleDragStart,\n      onDragEnd: this.handleDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","rotateTone","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","replaceTone","ToneKonva","Component","constructor","props","cx","center","x","cy","y","angularSpeed","trueTime","lastTrueTime","lastTime","lastTempo","getAngle","bind","handleDragEnd","handleDragStart","snap","findClosestLoop","findTrueOffset","radius","loops","attachedLoop","x1","offset","y1","Math","round","x2","y2","rad","acos","abs","deg","PI","componentDidMount","speed","angle","console","log","id","timerInit","timerLoop","anim","Animation","frame","timeDiff","frameRate","tDiff","angleDiff","circle","rotate","time","sound","dispatch","duration","getLayer","playing","start","componentDidUpdate","prevProps","color","tempo","newAngle","rotation","isRunning","stop","distToCenter","acceptableRange","loopArray","curr","diff","i","length","active","newdiff","index","value","findClosestInterval","a","b","loop","min","ret","tones","diffX","diffY","dist","sqrt","offX","offY","originalAngle","atan2","angleRad","offX2","sin","offY2","cos","findTrueCoordinates","distance","loopToSnap","trueCoords","intervalId","zIndex","screenHeight","loopRotation","circX","circY","offsetX","offsetY","trueOff","newX","newY","render","stroke","strokeWidth","node","mapStateToProps","state","shared","rot","mode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.angularSpeed = 0;\n    this.trueTime = 0;\n    this.lastTrueTime = 0;\n    this.lastTime = 0;\n    this.lastTempo = 110;\n\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n        (2 * (radius * radius))\n    );\n\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    // var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n\n    // if (this.props.mode === \"angular\") {\n    //   // this.angularSpeed = this.props.tempo;\n    //   this.angularSpeed = this.calcTempo();\n    // } else if (this.props.mode === \"linear\") {\n    //   this.angularSpeed = Math.floor(\n    //     this.props.loops[this.props.attachedLoop].speed\n    //   );\n    // }\n    this.angularSpeed=this.props.loops[this.props.attachedLoop].speed\n\n    this.angle = this.getAngle();\n    // console.log(\"ANGLE: \" + angle)\n    console.log(\"ANGLE for \" + this.props.id + \" initially: \" + this.angle)\n    this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n    this.timerLoop = (360 / this.angularSpeed) * 1000;\n    // console.log(\"INITIAL TIMER INIT for \" + this.props.id + \": \" + this.timerInit)\n    // console.log(\"INITIAL TIMER LOOP for \" + this.props.id + \": \"  + this.timerLoop)\n\n    // rotate circle initially to loop rotation\n    // this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n      // trying to figure out whether issue in timeDiff or angularSpeed\n      frame.timeDiff = 32;\n      frame.frameRate = 24;\n      var tDiff = frame.timeDiff;\n      var angleDiff = (tDiff * this.angularSpeed) / 1000;\n      console.log(\"TIMEDIFF LOOP \" + this.props.attachedLoop + \": \" + tDiff)\n      console.log(\"ANGULAR SPEED \" + this.props.attachedLoop + \": \" + this.angularSpeed)\n      console.log(\"ANGlEDIFF \" + this.props.attachedLoop + \": \" + angleDiff)\n\n      this.circle.rotate(angleDiff);\n      this.trueTime = frame.time - this.lastTime;\n      // console.log(\"TRUE TIME of \" + this.props.id +  \": \" + this.trueTime)\n      // console.log(\"LAST TIME of \" + this.props.id +  \": \" + this.lastTime)\n      // console.log(\"FRAME TIME of \" + this.props.id +  \": \" + frame.time)\n      // console.log(\"Rotate with timerInit \" + this.timerInit + \" and timerLoop\" +  this.timerLoop)\n      if (\n        this.timerInit - 10 < this.trueTime &&\n        this.trueTime < this.timerInit + 10 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n      } else if (\n        this.trueTime % this.timerLoop < this.timerInit + 20 &&\n        this.trueTime % this.timerLoop > this.timerInit - 20 &&\n        this.props.sound !== null\n      ) {\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({ x: this.props.offset.x, y: this.props.offset.y });\n    }\n\n    if (prevProps.tempo !== this.props.tempo){\n      if(this.lastTrueTime !== this.trueTime){\n      this.lastTime += this.trueTime;\n      this.lastTrueTime = this.trueTime;\n      }\n      // console.log(\"LAST TIME for \" + this.props.id + \": \" + this.lastTime)\n      // console.log(\"TRUE TIME: \" + this.trueTime)\n      // timerInit and timerLoop update when tempo changes\n      // need to reset frame.time\n      // console.log(\"UPDATE TEMPO: \" + this.props.tempo)\n      this.angle = this.getAngle();\n      // console.log (\"TEST OF NEW ANG: \" + this.circle.rotation())\n      // console.log (\"TEST OF NEW ANG 2: \" + (this.circle.rotation()-this.angle))\n      // console.log (\"TEST OF NEW ANG 3: \" + (360 - (this.circle.rotation()%360)))\n      // console.log (\"TEST OF NEW ANG 4: \" + ((this.circle.rotation()%360)))\n      \n      var newAngle = (this.angle + this.circle.rotation())%360\n      // console.log (\"TEST OF NEW ANG 5: \" + newAngle)\n      \n      this.angle = newAngle;\n      console.log(\"ANGLE for \" + this.props.id + \" updated: \" + this.angle)\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n      \n      this.timerLoop = (360 / this.angularSpeed) * 1000;\n      // console.log (\"TRUE TIME UPDATE: \" + this.trueTime)\n      // console.log(\"TIMER INIT UPDATE for \" + this.props.id + \": \" + this.timerInit)\n      // console.log(\"TIMER LOOP UPDATE for \" + this.props.id + \": \" + this.timerLoop)\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        // // if (this.lastTempo !== this.props.tempo){\n        //   // console.log (\"TEMPO HAS CHANGED to \" + this.props.tempo + \" IN PAUSE\")\n        //   // set lastTempo to the current at play\n        //   this.lastTempo = this.props.tempo;\n        //   // console.log(\"lastTempo is: \" + this.lastTempo)\n        //   this.lastTime += this.trueTime;\n          \n        //   var newAngle = (this.angle + this.circle.rotation())%360\n          \n        //   this.angle = newAngle;\n        //   this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n        //   this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n          \n        //   this.timerLoop = (360 / this.angularSpeed) * 1000;\n        //   // console.log(\"TRUE TIME UPDATE: \" + this.trueTime)\n        //   // console.log(\"TIMER INIT UPDATE for \" + this.props.id + \": \" + this.timerInit)\n        //   // console.log(\"TIMER LOOP UPDATE for \" + this.props.id + \": \" + this.timerLoop)\n        // // }\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop(); \n        // on pause, update the rotation value of the loop in the store\n        this.props.dispatch(\n          updateLoop(this.props.attachedLoop, this.circle.rotation())\n        );\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      // attached loop must be the same as the loopToSnap\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // find new offset values for snap, depending on rotation\n  findTrueOffset(offX, offY, angle) {\n    var originalAngle = Math.atan2(offX, offY);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    var dist = Math.sqrt(offX * offX + offY * offY);\n    const offX2 = Math.sin(newAngle) * dist;\n    const offY2 = Math.cos(newAngle) * dist;\n    return { x: offX2, y: offY2 };\n  }\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TK: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(\n        trueCoords.x,\n        trueCoords.y,\n        loopToSnap.index\n      );\n      console.log(\n        \"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop\n      );\n      if (!this.props.playing) {\n        this.props.dispatch(\n          updateTone(\n            intervalId,\n            this.props.color,\n            this.props.sound,\n            this.props.radius,\n            this.props.duration\n          )\n        );\n      }\n    }\n  }\n\n  handleDragStart() {\n    if (this.props.playing === false) {\n      console.log(\"zIndex: \" + this.circle.zIndex());\n      // move current tone above all of the others\n      this.circle.zIndex(this.props.tones.length);\n      // for all tones, if sound null make them visible on drag\n      var radius = this.props.screenHeight / 350;\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (\n          this.props.tones[i].sound === null &&\n          this.props.loops[this.props.tones[i].attachedLoop].active === true\n        ) {\n          this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n        }\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation());\n\n    // new x and y are coord at original\n    var newX = circX - trueOff.x;\n    var newY = circY - trueOff.y;\n\n    this.snap(newX, newY);\n    // make the tones transparent on drag end\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (\n        this.props.tones[i].sound === null &&\n        this.props.loops[this.props.tones[i].attachedLoop].active === true\n      ) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n    // this.props.dispatch(deleteTone(this.props.id));\n    this.props.dispatch(\n      replaceTone(\n        this.props.id,\n        this.cx,\n        this.cy,\n        \"transparent\",\n        \"#fff\",\n        1.5,\n        this.props.offset.x,\n        this.props.offset.y,\n        this.props.attachedLoop,\n        this.props.screenHeight / 50,\n        null,\n        loopRotation\n      )\n    );\n  }\n\n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragEnd={this.handleDragEnd}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}