{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    console.log(\"CALC: \" + (2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var deg = rad * (180 / Math.PI);\n    console.log(\"DEG: \" + deg);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed); //var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n\n    var angle = this.getAngle();\n    console.log(\"ANGLE: \" + angle);\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000;\n    this.circle.opacity((this.circle.rotation() + angle) % 360 / 1080 + 0.66);\n    var timerLoop = 360 / angularSpeed * 1000;\n    var played = false;\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n      console.log(\"PLAYED: \" + played); //variable opacity based on angular location\n\n      this.circle.opacity((this.circle.rotation() + angle) % 360 / 1080 + 0.66);\n\n      if (!played && timerInit - 10 < frame.time && frame.time < timerInit + 10 && this.props.sound !== null) {\n        console.log(\"!played color: \" + this.props.color + \" sound: \" + this.props.sound); //console.log(\"Sound before dis: \" + this.props.sound)\n\n        this.props.dispatch(playTone(this.props.sound));\n        played = true; //console.log(\"SOUND NOT PLAYED: \" + JSON.stringify(this.props))\n      } else if (played && frame.time % timerLoop < timerInit + 20 && frame.time % timerLoop > timerInit - 20 && this.props.sound !== null) {\n        console.log(\"played color: \" + this.props.color);\n        this.props.dispatch(playTone(this.props.sound)); //console.log(\"SOUND PLAYED: \" + JSON.stringify(this.props))\n      } // else if (this.props.sound === null) {\n      //   this.circle.fill(\"transparent\");\n      // }\n\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  } // findAngleCoord(cx, cy, angle, distance){\n  //   const x2 = cx - Math.cos(angle) * distance;\n  //   const y2 = cy + Math.sin(angle) * distance;\n  //   return { x: x2, y: y2 };\n  // }\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start(); // console.log(\"ROTATION: \" + this.circle.rotation())\n        // console.log(\"OFFSETX: \" + this.circle.offsetX())\n        // console.log(\"Position: \" + this.circle.x())\n        // if (this.props.sound === null) {\n        //   this.circle.fill(\"transparent\");\n        // }\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n        console.log(\"ROTATION: \" + this.circle.rotation());\n        console.log(\"OFFSETX: \" + this.circle.offsetX());\n        console.log(\"Position: \" + this.circle.x()); // var off = this.findAngleCoord(window.innerWidth/2, window.innerHeight/2, this.circle.rotation()*(Math.PI/180), this.props.loops[this.props.attachedLoop].radius)\n        // this.props.dispatch(\n        //   rotateTone(\n        //     this.props.id,\n        //     {x: off.x, y: off.y}\n        //   )\n        // );\n        // on pause, update the offset values in the store\n        // on pause, update the rotation value of the loop in the store\n\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: this.props.color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","rotateTone","updateLoop","playTone","throwStatement","thisExpression","ToneKonva","Component","constructor","props","state","isDragging","active","getAngle","bind","radius","loops","attachedLoop","x1","x","offset","y1","Math","round","y","x2","y2","rad","acos","abs","console","log","deg","PI","componentDidMount","angularSpeed","floor","speed","angle","timerInit","circle","opacity","rotation","timerLoop","played","anim","Animation","frame","angleDiff","timeDiff","rotate","time","sound","color","dispatch","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","offsetX","render","stroke","strokeWidth","node","setState","e","target","mapStateToProps","shared","rot"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / \n        (2 * (radius * radius))\n    );\n    console.log(\"CALC: \" + (2 * (radius * radius) -\n    Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / \n    (2 * (radius * radius)))\n    var deg = rad * ((180 / Math.PI));\n    console.log(\"DEG: \" + deg)\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } \n    else return deg; \n  }\n\n  componentDidMount() {\n    var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    //var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n    var angle = this.getAngle();\n    console.log(\"ANGLE: \" + angle)\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    this.circle.opacity(((this.circle.rotation() + angle) % 360) / 1080 + 0.66);\n    var timerLoop = (360 / angularSpeed) * 1000;\n    var played = false;\n    \n\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n      console.log(\"PLAYED: \" + played)\n      //variable opacity based on angular location\n      this.circle.opacity(\n        ((this.circle.rotation() + angle) % 360) / 1080 + 0.66\n      );\n      if (\n        !played &&\n        timerInit - 10 < frame.time &&\n        frame.time < timerInit + 10 && \n        this.props.sound !== null\n      ) {\n        console.log(\"!played color: \" + this.props.color + \" sound: \" + this.props.sound)\n        //console.log(\"Sound before dis: \" + this.props.sound)\n        this.props.dispatch(playTone(this.props.sound));\n        played = true;\n        //console.log(\"SOUND NOT PLAYED: \" + JSON.stringify(this.props))\n      } else if (\n        played &&\n        frame.time % timerLoop < timerInit + 20 &&\n        frame.time % timerLoop > timerInit - 20 && \n        this.props.sound !== null\n      ) {\n        console.log(\"played color: \" + this.props.color)\n        this.props.dispatch(playTone(this.props.sound));\n        //console.log(\"SOUND PLAYED: \" + JSON.stringify(this.props))\n      }\n      // else if (this.props.sound === null) {\n      //   this.circle.fill(\"transparent\");\n      // }\n    }, this.circle.getLayer());\n    if (this.props.playing) {\n      this.anim.start();\n      \n    }\n  }\n\n  // findAngleCoord(cx, cy, angle, distance){\n  //   const x2 = cx - Math.cos(angle) * distance;\n  //   const y2 = cy + Math.sin(angle) * distance;\n  //   return { x: x2, y: y2 };\n  // }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        // console.log(\"ROTATION: \" + this.circle.rotation())\n        // console.log(\"OFFSETX: \" + this.circle.offsetX())\n        // console.log(\"Position: \" + this.circle.x())\n        // if (this.props.sound === null) {\n        //   this.circle.fill(\"transparent\");\n        // }\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n        console.log(\"ROTATION: \" + this.circle.rotation())\n        console.log(\"OFFSETX: \" + this.circle.offsetX())\n        console.log(\"Position: \" + this.circle.x())\n        // var off = this.findAngleCoord(window.innerWidth/2, window.innerHeight/2, this.circle.rotation()*(Math.PI/180), this.props.loops[this.props.attachedLoop].radius)\n        // this.props.dispatch(\n        //   rotateTone(\n        //     this.props.id,\n        //     {x: off.x, y: off.y}\n        //   )\n        // );\n        // on pause, update the offset values in the store\n\n        // on pause, update the rotation value of the loop in the store\n        this.props.dispatch(\n          updateLoop(\n            this.props.attachedLoop,\n            this.circle.rotation()\n          )\n        )\n      }\n    }\n  }\n  \n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={this.props.color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);"]},"metadata":{},"sourceType":"module"}