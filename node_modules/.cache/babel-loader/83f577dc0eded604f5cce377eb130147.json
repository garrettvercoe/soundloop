{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    var y1 = this.props.y + this.props.offset.y;\n    var x2 = this.props.x;\n    var y2 = this.props.y + radius;\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed); //var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n\n    var angle = this.getAngle();\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000; // this.circle.opacity(((this.circle.rotation() + angle) % 360) / 1080 + 0.66);\n\n    var timerLoop = 360 / angularSpeed * 1000;\n    var played = false;\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff); // variable opacity based on angular location\n      // this.circle.opacity(\n      //   ((this.circle.rotation() + angle) % 360) / 1080 + 0.66\n      // );\n\n      if (!played && timerInit - 10 < frame.time && frame.time < timerInit + 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound));\n        played = true;\n        console.log(\"SOUND NOT PLAYED: \" + JSON.stringify(this.props));\n      } else if (played && frame.time % timerLoop < timerInit + 10 && frame.time % timerLoop > timerInit - 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound));\n        console.log(\"SOUND PLAYED: \" + JSON.stringify(this.props));\n      } else {\n        this.circle.fill(this.props.color);\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        console.log(\"Playing\");\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: this.props.color,\n      stroke: \"#ed1e79\",\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    playing: state.shared.playing,\n    loops: state.loops\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","playTone","throwStatement","thisExpression","ToneKonva","Component","constructor","props","state","isDragging","active","getAngle","bind","radius","loops","attachedLoop","x1","x","offset","y1","y","x2","y2","rad","Math","acos","abs","deg","PI","componentDidMount","angularSpeed","floor","speed","angle","timerInit","timerLoop","played","anim","Animation","frame","angleDiff","timeDiff","circle","rotate","time","sound","dispatch","console","log","JSON","stringify","fill","color","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","render","strokeWidth","node","setState","e","target","mapStateToProps","shared"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,aAA9B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,cAA/C;;AAEA,MAAMC,SAAN,SAAwBZ,KAAK,CAACa,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,KADD;AAEX;AACA;AACAC,MAAAA,MAAM,EAAE;AAJG,KAAb;AAMA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AAEDD,EAAAA,QAAQ,GAAG;AACT,QAAIE,MAAM,GAAG,KAAKN,KAAL,CAAWO,KAAX,CAAiB,KAAKP,KAAL,CAAWQ,YAA5B,EAA0CF,MAAvD;AAEA,QAAIG,EAAE,GAAG,KAAKT,KAAL,CAAWU,CAAX,GAAe,KAAKV,KAAL,CAAWW,MAAX,CAAkBD,CAA1C;AACA,QAAIE,EAAE,GAAG,KAAKZ,KAAL,CAAWa,CAAX,GAAe,KAAKb,KAAL,CAAWW,MAAX,CAAkBE,CAA1C;AACA,QAAIC,EAAE,GAAG,KAAKd,KAAL,CAAWU,CAApB;AACA,QAAIK,EAAE,GAAG,KAAKf,KAAL,CAAWa,CAAX,GAAeP,MAAxB;AACA,QAAIU,GAAG,GAAGC,IAAI,CAACC,IAAL,CACR,CAAC,KAAKZ,MAAM,GAAGA,MAAd,IACCW,IAAI,CAACE,GAAL,CAAS,CAACL,EAAE,GAAGL,EAAN,KAAaK,EAAE,GAAGL,EAAlB,IAAwB,CAACM,EAAE,GAAGH,EAAN,KAAaG,EAAE,GAAGH,EAAlB,CAAjC,CADF,KAEG,KAAKN,MAAM,GAAGA,MAAd,CAFH,CADQ,CAAV;AAMA,QAAIc,GAAG,GAAGJ,GAAG,IAAI,MAAMC,IAAI,CAACI,EAAf,CAAb;;AACA,QAAI,KAAKrB,KAAL,CAAWW,MAAX,CAAkBD,CAAlB,GAAsB,CAA1B,EAA6B;AAC3B,aAAO,MAAMU,GAAb;AACD,KAFD,MAEO,OAAOA,GAAP;AACR;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,YAAY,GAAGN,IAAI,CAACO,KAAL,CAAW,KAAKxB,KAAL,CAAWO,KAAX,CAAiB,KAAKP,KAAL,CAAWQ,YAA5B,EAA0CiB,KAArD,CAAnB,CADkB,CAElB;AACA;;AACA,QAAIC,KAAK,GAAG,KAAKtB,QAAL,EAAZ;AACA,QAAIuB,SAAS,GAAI,CAAC,MAAOD,KAAK,GAAG,GAAhB,IAAwBH,YAAzB,GAAyC,IAAzD,CALkB,CAMlB;;AACA,QAAIK,SAAS,GAAI,MAAML,YAAP,GAAuB,IAAvC;AACA,QAAIM,MAAM,GAAG,KAAb;AAEA,SAAKC,IAAL,GAAY,IAAItC,KAAK,CAACuC,SAAV,CAAoBC,KAAK,IAAI;AACvC,UAAIC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBX,YAAlB,GAAkC,IAAlD;AACA,WAAKY,MAAL,CAAYC,MAAZ,CAAmBH,SAAnB,EAFuC,CAGvC;AACA;AACA;AACA;;AACA,UACE,CAACJ,MAAD,IACAF,SAAS,GAAG,EAAZ,GAAiBK,KAAK,CAACK,IADvB,IAEAL,KAAK,CAACK,IAAN,GAAaV,SAAS,GAAG,EAFzB,IAE+B,KAAK3B,KAAL,CAAWsC,KAAX,KAAqB,IAHtD,EAIE;AAEA,aAAKtC,KAAL,CAAWuC,QAAX,CAAoB7C,QAAQ,CAAC,KAAKM,KAAL,CAAWsC,KAAZ,CAA5B;AACAT,QAAAA,MAAM,GAAG,IAAT;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBC,IAAI,CAACC,SAAL,CAAe,KAAK3C,KAApB,CAAnC;AACD,OATD,MASO,IACL6B,MAAM,IACNG,KAAK,CAACK,IAAN,GAAaT,SAAb,GAAyBD,SAAS,GAAG,EADrC,IAEAK,KAAK,CAACK,IAAN,GAAaT,SAAb,GAAyBD,SAAS,GAAG,EAFrC,IAE2C,KAAK3B,KAAL,CAAWsC,KAAX,KAAqB,IAH3D,EAIL;AACA,aAAKtC,KAAL,CAAWuC,QAAX,CAAoB7C,QAAQ,CAAC,KAAKM,KAAL,CAAWsC,KAAZ,CAA5B;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBC,IAAI,CAACC,SAAL,CAAe,KAAK3C,KAApB,CAA/B;AACD,OAPM,MAOA;AACL,aAAKmC,MAAL,CAAYS,IAAZ,CAAiB,KAAK5C,KAAL,CAAW6C,KAA5B;AACD;AACF,KA1BW,EA0BT,KAAKV,MAAL,CAAYW,QAAZ,EA1BS,CAAZ;;AA2BA,QAAI,KAAK9C,KAAL,CAAW+C,OAAf,EAAwB;AACtB,WAAKjB,IAAL,CAAUkB,KAAV;AACD;AACF;;AACDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAIA,SAAS,CAACH,OAAV,KAAsB,KAAK/C,KAAL,CAAW+C,OAArC,EAA8C;AAC5C,UAAI,KAAK/C,KAAL,CAAW+C,OAAf,EAAwB;AACtB,aAAKjB,IAAL,CAAUkB,KAAV;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,OAHD,MAGO;AACL,aAAKX,IAAL,CAAUqB,SAAV,MAAyB,KAAKrB,IAAL,CAAUsB,IAAV,EAAzB;AACD;AACF;AAEF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AACE,MAAA,CAAC,EAAE,KAAKrD,KAAL,CAAWU,CADhB;AAEE,MAAA,CAAC,EAAE,KAAKV,KAAL,CAAWa,CAFhB;AAGE,MAAA,IAAI,EAAE,KAAKb,KAAL,CAAW6C,KAHnB;AAIE,MAAA,MAAM,EAAE,SAJV;AAKE,MAAA,WAAW,EAAE,KAAK7C,KAAL,CAAWsD,WAL1B;AAME,MAAA,MAAM,EAAE,KAAKtD,KAAL,CAAWM,MANrB;AAOE,MAAA,MAAM,EAAE,KAAKN,KAAL,CAAWW,MAPrB;AAQE,MAAA,GAAG,EAAE4C,IAAI,IAAI;AACX,aAAKpB,MAAL,GAAcoB,IAAd;AACD,OAVH;AAWE,MAAA,WAAW,EAAE,MAAM;AACjB,aAAKC,QAAL,CAAc;AACZtD,UAAAA,UAAU,EAAE;AADA,SAAd;AAGD,OAfH;AAgBE,MAAA,SAAS,EAAEuD,CAAC,IAAI;AACd,aAAKD,QAAL,CAAc;AACZtD,UAAAA,UAAU,EAAE,KADA;AAEZQ,UAAAA,CAAC,EAAE+C,CAAC,CAACC,MAAF,CAAShD,CAAT,EAFS;AAGZG,UAAAA,CAAC,EAAE4C,CAAC,CAACC,MAAF,CAAS7C,CAAT;AAHS,SAAd;AAKD,OAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AA0BD;;AA/GqC;;AAkHxC,SAAS8C,eAAT,CAAyB1D,KAAzB,EAAgC;AAC9BuC,EAAAA,OAAO,CAACC,GAAR,CAAYxC,KAAZ,EAD8B,CACV;;AACpB,SAAO;AACL8C,IAAAA,OAAO,EAAE9C,KAAK,CAAC2D,MAAN,CAAab,OADjB;AAELxC,IAAAA,KAAK,EAAEN,KAAK,CAACM;AAFR,GAAP;AAID;;AAED,eAAehB,OAAO,CAACoE,eAAD,CAAP,CAAyB9D,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n\n    var x1 = this.props.x - this.props.offset.x;\n    var y1 = this.props.y + this.props.offset.y;\n    var x2 = this.props.x;\n    var y2 = this.props.y + radius;\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n        (2 * (radius * radius))\n    );\n\n    var deg = rad * (180 / Math.PI);\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    //var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n    var angle = this.getAngle();\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    // this.circle.opacity(((this.circle.rotation() + angle) % 360) / 1080 + 0.66);\n    var timerLoop = (360 / angularSpeed) * 1000;\n    var played = false;\n\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n      // variable opacity based on angular location\n      // this.circle.opacity(\n      //   ((this.circle.rotation() + angle) % 360) / 1080 + 0.66\n      // );\n      if (\n        !played &&\n        timerInit - 10 < frame.time &&\n        frame.time < timerInit + 10 && this.props.sound !== null\n      ) {\n        \n        this.props.dispatch(playTone(this.props.sound));\n        played = true;\n        console.log(\"SOUND NOT PLAYED: \" + JSON.stringify(this.props))\n      } else if (\n        played &&\n        frame.time % timerLoop < timerInit + 10 &&\n        frame.time % timerLoop > timerInit - 10 && this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound));\n        console.log(\"SOUND PLAYED: \" + JSON.stringify(this.props))\n      } else {\n        this.circle.fill(this.props.color);\n      }\n    }, this.circle.getLayer());\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        console.log(\"Playing\")\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n    \n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={this.props.color}\n        stroke={\"#ed1e79\"}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);"]},"metadata":{},"sourceType":"module"}