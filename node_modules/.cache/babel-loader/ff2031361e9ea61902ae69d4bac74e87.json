{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/Cord.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport PlayButton from \"./PlayButton\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    //playing around with creating a sound\n    //create a synth and connect it to the master output (your speakers)\n    // var distortion = new Tone.Distortion(1.5);\n    // var tremolo = new Tone.Tremolo().start();\n    // this.synth = new Tone.PolySynth().chain(distortion, tremolo, Tone.Master);\n    this.synth = new Tone.PolySynth().toMaster();\n    var cordLength = window.innerHeight / 2 - 50; // modify this to change number of waves\n\n    var numAnchors = 1;\n    var interval = cordLength / (numAnchors + 1);\n    var pts = [];\n    var prevX = this.props.center.x;\n    var oscill = 8;\n    var prevY = this.props.center.y;\n\n    for (var i = 0; i < numAnchors + 2; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevX = prevX + oscill;\n      prevY = prevY - interval;\n      oscill = -oscill;\n    }\n\n    this.tween = new Konva.Tween({\n      node: this.line,\n      duration: 0.1,\n      easing: Konva.Easings.EaseOut,\n      points: pts,\n      // stroke: \"#fff\",\n      onFinish: function () {\n        this.tween.reverse();\n      } //   onReset: function() {\n      //     this.tween.play();\n      // }\n\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"INDEX: \" + this.props.index);\n    console.log(\"COLOR: \" + this.props.color);\n    console.log(\"SOUND 2: \" + this.props.sounds[this.props.index]); // check if sound at index is null\n\n    if (prevProps.sounds !== this.props.sounds) {\n      this.synth.triggerAttackRelease(this.props.sounds[this.props.index], \"4n\");\n      this.tween.play();\n    }\n  }\n\n  render() {\n    var cordLength = window.innerHeight / 2 - 50;\n    return React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y - cordLength,\n      radius: 4,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: 11,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Line, {\n      points: [this.props.center.x, this.props.center.y, this.props.center.x, this.props.center.y - cordLength],\n      stroke: \"#692D55\",\n      strokeWidth: 2,\n      tension: 0.5,\n      ref: node => {\n        this.line = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    sounds: state.cord.sounds,\n    index: state.cord.index\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/Cord.js"],"names":["React","AppBar","PlayButton","Line","Layer","Circle","Toolbar","connect","Konva","Tone","Cord","Component","componentDidMount","synth","PolySynth","toMaster","cordLength","window","innerHeight","numAnchors","interval","pts","prevX","props","center","x","oscill","prevY","y","i","push","tween","Tween","node","line","duration","easing","Easings","EaseOut","points","onFinish","reverse","componentDidUpdate","prevProps","console","log","index","color","sounds","triggerAttackRelease","play","render","mapStateToProps","state","shared","playing","cord"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport PlayButton from \"./PlayButton\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    //playing around with creating a sound\n\n    //create a synth and connect it to the master output (your speakers)\n    // var distortion = new Tone.Distortion(1.5);\n    // var tremolo = new Tone.Tremolo().start();\n    // this.synth = new Tone.PolySynth().chain(distortion, tremolo, Tone.Master);\n\n    this.synth = new Tone.PolySynth().toMaster();\n    var cordLength = window.innerHeight / 2 - 50;\n    // modify this to change number of waves\n    var numAnchors = 1;\n    var interval = cordLength / (numAnchors+1);\n    var pts = [];\n    var prevX = this.props.center.x;\n    var oscill = 8;\n    var prevY = this.props.center.y;\n    for (var i = 0; i < numAnchors+2; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevX = prevX + oscill;\n      prevY = prevY - interval;\n      oscill = -oscill;\n    }\n\n    this.tween = new Konva.Tween({\n      node: this.line,\n      duration: 0.1,\n      easing: Konva.Easings.EaseOut,\n      points: pts,\n      // stroke: \"#fff\",\n      onFinish: function() {\n        this.tween.reverse();\n      }\n      //   onReset: function() {\n      //     this.tween.play();\n      // }\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"INDEX: \" + this.props.index)\n    console.log(\"COLOR: \" + this.props.color)\n    console.log(\"SOUND 2: \" + this.props.sounds[this.props.index])\n    // check if sound at index is null\n    if (prevProps.sounds !== this.props.sounds) {\n      this.synth.triggerAttackRelease(\n        this.props.sounds[this.props.index],\n        \"4n\"\n      );\n      this.tween.play();\n    }\n  }\n\n  render() {\n    var cordLength = window.innerHeight / 2 - 50;\n    return (\n      <Layer>\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y - cordLength}\n          radius={4}\n          fill=\"#692D55\"\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y}\n          radius={11}\n          fill=\"#692D55\"\n        />\n        <Line\n          points={[\n            this.props.center.x,\n            this.props.center.y,\n            this.props.center.x,\n            this.props.center.y - cordLength\n          ]}\n          stroke=\"#692D55\"\n          strokeWidth={2}\n          tension={0.5}\n          ref={node => {\n            this.line = node;\n          }}\n        />\n      </Layer>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    sounds: state.cord.sounds,\n    index: state.cord.index\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);\n"]},"metadata":{},"sourceType":"module"}