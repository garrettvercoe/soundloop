{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      snapped: false\n    };\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.cx - this.props.tones[i].offset.x;\n      var y = this.cy - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n\n    return ret;\n  } // convert current cursor location to coordinates\n\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1); // original angle in radians\n\n    var angleRad = angle * (Math.PI / 180); // new angle\n\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    console.log(\"LSNAP in TB: \" + loopToSnap.index);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y);\n      this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, 0));\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    this.snap(x, y); // this.setState({\n    //   deltaPosition: {\n    //     x: 0,\n    //     y: 0\n    //   }\n    // });\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n  }\n\n  handleClick() {\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound));\n    }\n  }\n\n  handleDrag() {\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      onStart: this.handleDrag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onClick: this.handleClick,\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, this.props.children))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","updateTone","playTone","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","snapped","cx","center","cy","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","handleClick","handleDrag","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","active","newdiff","index","value","x1","y1","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","min","ret","tones","offset","diffX","diffY","dist","sqrt","findTrueCoordinates","originalAngle","angleRad","PI","newAngle","loopToSnap","console","log","rotation","trueCoords","intervalId","dispatch","color","sound","rect","current","getBoundingClientRect","left","top","attachedLoop","playing","render","borderRadius","border","borderColor","backgroundColor","width","height","position","outline","pointerEvents","zIndex","children","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      snapped: false\n    };\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    \n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active){\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.cx - this.props.tones[i].offset.x;\n      var y = this.cy - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n    return ret;\n  }\n\n  // convert current cursor location to coordinates\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1);\n    // original angle in radians\n    var angleRad = angle * (Math.PI / 180);\n    // new angle\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    console.log(\"LSNAP in TB: \" + loopToSnap.index)\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y);\n\n      this.props.dispatch(\n        updateTone(intervalId, this.props.color, this.props.sound, 0)\n      );\n        }\n    }\n  \n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n\n    this.snap(x, y);\n\n    // this.setState({\n    //   deltaPosition: {\n    //     x: 0,\n    //     y: 0\n    //   }\n    // });\n\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true){\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5))\n      }\n    }\n  }\n\n  handleClick() {\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound));\n    }\n  }\n\n  handleDrag(){\n    \n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true){\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5))\n      }\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <Draggable\n          position={this.state.deltaPosition}\n          onStop={this.handleStop}\n          onStart={this.handleDrag}\n        >\n          <div\n            ref={this.selector}\n            className=\"hover-shadow\"\n            onClick={this.handleClick}\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n\n              border: \"none\",\n              outline: \"none\"\n            }}\n          >\n            <div className=\"note-select\">{this.props.children}</div>\n          </div>\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}