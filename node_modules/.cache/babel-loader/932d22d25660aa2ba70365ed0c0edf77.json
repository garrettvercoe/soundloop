{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/MountedTones.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Layer, Group } from \"react-konva\";\nimport Konva from \"konva\";\nimport { connect } from \"react-redux\";\nimport ToneKonva from \"./ToneKonva\";\n\nclass MountedTones extends React.Component {\n  componentDidMount() {\n    this.angularSpeed = 70;\n    this.anim = new Konva.Animation(frame => {\n      // frame.timeDiff = 30;\n      // frame.frameRate = 60;\n      var tDiff = frame.timeDiff;\n      var angleDiff = tDiff * this.angularSpeed / 1000; // rotate the group\n\n      this.group1.rotate(angleDiff);\n      console.log(\"frame.time for \" + this.props.id + \": \" + frame.time);\n      this.trueTime = frame.time - this.lastTime;\n      console.log(\"angleDiff for \" + this.props.id + \": \" + angleDiff);\n      console.log(\"angleSpeed for \" + this.props.id + \": \" + this.angularSpeed);\n    }, this.group1.getLayer());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.tones !== this.props.tones) {\n      console.log(\"TONES update: \" + this.props.tones);\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        console.log(\"anim start\");\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    // if (this.props.tones.length === 112){\n    console.log(\"TONES updateddd: \" + this.props.tones);\n    console.log(\"FILTER: \" + this.props.tones.filter(item => item.attachedLoop === 0));\n    const loop0 = this.props.tones.filter(item => item.attachedLoop === 0);\n    const loop1 = this.props.tones.filter(item => item.attachedLoop === 1); // console.log(loop0)\n\n    return React.createElement(Layer, {\n      ref: node => {\n        this.layer = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Group, {\n      ref: node => {\n        this.group0 = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, loop0.map(item => {\n      return React.createElement(ToneKonva, {\n        color: item.color,\n        x: this.props.center.x,\n        y: this.props.center.y,\n        offset: item.offset,\n        radius: item.radius,\n        attachedLoop: item.attachedLoop,\n        sound: item.sound,\n        duration: item.duration,\n        strokeWidth: item.strokeWidth,\n        id: item.id,\n        rotation: item.rotation,\n        ref: node => {\n          this.child = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      });\n    })), React.createElement(Group, {\n      ref: node => {\n        this.group1 = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, loop1.map(item => {\n      return React.createElement(ToneKonva, {\n        color: item.color,\n        x: this.props.center.x,\n        y: this.props.center.y,\n        offset: item.offset,\n        radius: item.radius,\n        attachedLoop: item.attachedLoop,\n        sound: item.sound,\n        duration: item.duration,\n        strokeWidth: item.strokeWidth,\n        id: item.id,\n        rotation: item.rotation,\n        ref: node => {\n          this.child = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    }))); // } else {\n    //   return null\n    // }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    tones: state.tones,\n    loops: state.loops,\n    center: state.shared.center,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(MountedTones);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/MountedTones.js"],"names":["React","Layer","Group","Konva","connect","ToneKonva","MountedTones","Component","componentDidMount","angularSpeed","anim","Animation","frame","tDiff","timeDiff","angleDiff","group1","rotate","console","log","props","id","time","trueTime","lastTime","getLayer","componentDidUpdate","prevProps","tones","playing","start","isRunning","stop","render","filter","item","attachedLoop","loop0","loop1","node","layer","group0","map","color","center","x","y","offset","radius","sound","duration","strokeWidth","rotation","child","mapStateToProps","state","loops","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Layer, Group } from \"react-konva\";\nimport Konva from \"konva\";\nimport { connect } from \"react-redux\";\nimport ToneKonva from \"./ToneKonva\";\n\nclass MountedTones extends React.Component {\n  componentDidMount(){\n    this.angularSpeed = 70;\n    this.anim = new Konva.Animation(frame => {\n      // frame.timeDiff = 30;\n      // frame.frameRate = 60;\n      var tDiff = frame.timeDiff;\n      var angleDiff = (tDiff * this.angularSpeed) / 1000;\n      // rotate the group\n      this.group1.rotate(angleDiff);\n      console.log(\"frame.time for \" + this.props.id + \": \" + frame.time)\n      this.trueTime = frame.time - this.lastTime;\n      console.log(\"angleDiff for \" + this.props.id + \": \" + angleDiff)\n      console.log(\"angleSpeed for \" + this.props.id + \": \" + this.angularSpeed)\n\n    }, this.group1.getLayer());\n  }\n\n  componentDidUpdate(prevProps){\n    if (prevProps.tones !== this.props.tones){\n      console.log(\"TONES update: \" + this.props.tones)\n    }\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        console.log(\"anim start\")\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    // if (this.props.tones.length === 112){\n    console.log(\"TONES updateddd: \" + this.props.tones)\n    console.log(\"FILTER: \" + this.props.tones.filter(item => item.attachedLoop === 0))\n    const loop0 = this.props.tones.filter(item => item.attachedLoop === 0)\n    const loop1 = this.props.tones.filter(item => item.attachedLoop === 1)\n    // console.log(loop0)\n    return (\n      <Layer ref={node => { this.layer = node; }}>\n        <Group  ref={node => { this.group0 = node; }}>\n        {/* {this.props.tones.map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })} */}\n        {loop0.map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })}\n        </Group>\n        <Group ref={node => { this.group1 = node; }}>\n        {/* {this.props.tones.map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })} */}\n        {loop1.map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })}\n        </Group>\n      </Layer>\n    );\n      // } else {\n      //   return null\n      // }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    tones: state.tones,\n    loops: state.loops,\n    center: state.shared.center,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(MountedTones);\n"]},"metadata":{},"sourceType":"module"}