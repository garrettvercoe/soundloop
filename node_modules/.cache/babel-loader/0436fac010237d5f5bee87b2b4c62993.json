{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/MouseTracker.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeInvisible } from \"../actions/cursor\";\nimport { updateTone } from \"../actions/tones\";\nconst tbFiller = {\n  position: \"absolute\",\n  zIndex: 5000,\n  left: 0,\n  top: 0,\n  width: \"100%\",\n  height: \"100%\",\n  backgroundColor: \"#000\"\n};\nconst auto = {\n  style: \"inherit\"\n};\n\nclass Cursor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.selector = React.createRef();\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // convert current cursor location to coordinates\n\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1); // original angle in radians\n\n    var angleRad = angle * (Math.PI / 180); // new angle\n\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TB: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y, loopToSnap.index);\n      this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, //  this.props.screenHeight / 50,\n      this.props.toneSizes[this.props.selectedSustain], this.props.selectedSustain));\n    }\n  }\n\n  handleClick() {\n    // this.props.dispatch(makeInvisible());\n    console.log(\"clicked\");\n\n    if (this.props.playing === false) {\n      this.rect = this.selector.current.getBoundingClientRect();\n      const x = this.rect.left;\n      const y = this.rect.top;\n      this.snap(x, y); // this.setState({\n      //   deltaPosition: {\n      //     x: 0,\n      //     y: 0\n      //   }\n      // });\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n          this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n        }\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \" \", \"test\", React.createElement(\"div\", {\n      onClick: () => this.handleClick(),\n      style: {\n        position: \"absolute\",\n        left: this.props.cursorPos.x - 200,\n        top: this.props.cursorPos.y - 150,\n        width: 30,\n        height: 30,\n        borderRadius: \"50%\",\n        pointerEvents: this.props.visible ? \"auto\" : \"none\",\n        cursor: \"grab \",\n        background: this.props.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    color: state.cursor.color,\n    visible: state.cursor.active\n  };\n}\n\nexport default connect(mapStateToProps)(Cursor);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/MouseTracker.js"],"names":["React","connect","makeInvisible","updateTone","tbFiller","position","zIndex","left","top","width","height","backgroundColor","auto","style","Cursor","Component","constructor","props","handleClick","bind","selector","createRef","cx","center","x","cy","y","handleStop","snap","findSnapCoordinates","findClosestLoop","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","active","newdiff","index","value","x1","y1","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","loop","min","ret","tones","attachedLoop","offset","diffX","diffY","dist","sqrt","findTrueCoordinates","originalAngle","angleRad","PI","newAngle","loopToSnap","console","log","rotation","trueCoords","intervalId","dispatch","color","sound","toneSizes","selectedSustain","playing","rect","current","getBoundingClientRect","render","cursorPos","borderRadius","pointerEvents","visible","cursor","background","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeInvisible } from \"../actions/cursor\";\nimport { updateTone } from \"../actions/tones\";\nconst tbFiller = {\n  position: \"absolute\",\n  zIndex: 5000,\n  left: 0,\n  top: 0,\n  width: \"100%\",\n  height: \"100%\",\n  backgroundColor: \"#000\"\n};\n\nconst auto = { style: \"inherit\" };\nclass Cursor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n\n    this.selector = React.createRef();\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // convert current cursor location to coordinates\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1);\n    // original angle in radians\n    var angleRad = angle * (Math.PI / 180);\n    // new angle\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TB: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n\n      var intervalId = this.findClosestInterval(\n        trueCoords.x,\n        trueCoords.y,\n        loopToSnap.index\n      );\n\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          //  this.props.screenHeight / 50,\n          this.props.toneSizes[this.props.selectedSustain],\n          this.props.selectedSustain\n        )\n      );\n    }\n  }\n\n  handleClick() {\n    // this.props.dispatch(makeInvisible());\n    console.log(\"clicked\");\n\n    if (this.props.playing === false) {\n      this.rect = this.selector.current.getBoundingClientRect();\n      const x = this.rect.left;\n      const y = this.rect.top;\n\n      this.snap(x, y);\n\n      // this.setState({\n      //   deltaPosition: {\n      //     x: 0,\n      //     y: 0\n      //   }\n      // });\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (\n          this.props.tones[i].sound === null &&\n          this.props.loops[this.props.tones[i].attachedLoop].active === true\n        ) {\n          this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n        }\n      }\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        {\" \"}\n        test\n        <div\n          onClick={() => this.handleClick()}\n          style={{\n            position: \"absolute\",\n            left: this.props.cursorPos.x - 200,\n            top: this.props.cursorPos.y - 150,\n            width: 30,\n            height: 30,\n\n            borderRadius: \"50%\",\n            pointerEvents: this.props.visible ? \"auto\" : \"none\",\n            cursor: \"grab \",\n            background: this.props.color\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    color: state.cursor.color,\n    visible: state.cursor.active\n  };\n}\n\nexport default connect(mapStateToProps)(Cursor);\n"]},"metadata":{},"sourceType":"module"}