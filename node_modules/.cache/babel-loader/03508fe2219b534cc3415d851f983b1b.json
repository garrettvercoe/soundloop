{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestLoopPt(a, b, index) {\n    // console.log(\"LOOP ID: \" + this.props.loops[index].pts)\n    // return {x:a, y:b}\n    var min = 500;\n    var ret = {\n      x: 0,\n      y: 0\n    }; // reference the loop and then its points\n\n    for (var i = 0; i < this.props.loops[index].pts.length; i += 2) {\n      var pointX = this.props.loops[index].pts[i];\n      var pointY = this.props.loops[index].pts[i + 1];\n      console.log(\"x: \" + pointX);\n      console.log(\"y: \" + pointY); // if coordinates of currently indexed point are less than min\n\n      var dist = Math.sqrt(pointX - a * pointX - a + (pointY - b * pointY - b));\n\n      if (dist < min) {\n        ret.x = pointX;\n        ret.y = pointY;\n      }\n    }\n\n    console.log(ret.x + \" and \" + ret.y);\n    return ret;\n  }\n\n  findClosestLoopPt(a, b, index) {\n    // console.log(\"LOOP ID: \" + this.props.loops[index].pts)\n    // return {x:a, y:b}\n    var min = 500;\n    var ret = {\n      x: 0,\n      y: 0\n    }; // reference the loop and then its points\n\n    for (var i = 0; i < this.props.loops[index].pts.length; i += 2) {\n      var pointX = this.props.loops[index].pts[i];\n      var pointY = this.props.loops[index].pts[i + 1];\n      console.log(\"x: \" + pointX);\n      console.log(\"y: \" + pointY); // if coordinates of currently indexed point are less than min\n\n      var dist = Math.sqrt(pointX - a * pointX - a + (pointY - b * pointY - b));\n\n      if (dist < min) {\n        ret.x = pointX;\n        ret.y = pointY;\n      }\n    }\n\n    console.log(ret.x + \" and \" + ret.y);\n    return ret;\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // might need to compare pt + or - offset\n      var x = this.props.tones[i].position.x;\n      var y = this.props.tones[i].position.y;\n      var dist = Math.sqrt(x - a * x - a + (y - b * y - b)); // could also set min to this.props.tones[i].id but since id is 0++ they're the same\n\n      min = i;\n    }\n\n    return min;\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var a = y1 - cy;\n    var b = x1 - cx; //c\n\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      // for each point in loopToSnap, dispatch on coord of pts\n      // replace findSnapCoordinats with findClosestLoopPt\n      //var snapCoords = this.findSnapCoordinates(a, b, cx, cy, loopToSnap.value);\n      var snapCoords = this.findClosestLoopPt(a, b, loopToSnap.index);\n      var test = this.findClosestInterval(x1, y1);\n      console.log(\"TEST: \" + test);\n      var newA = (snapCoords.y - cy) * -1;\n      var newB = snapCoords.x - cx;\n      this.props.dispatch(addTone(cx, cy, this.props.color, this.props.stroke, this.props.strokeWidth, newA, newB, loopToSnap.index, 20, this.props.sound));\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    this.snap(x, y);\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  handleClick() {\n    this.props.dispatch(playTone(this.props.sound));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onClick: this.handleClick,\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    loops: state.loops,\n    tones: state.tones\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","addTone","playTone","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","handleClick","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","newdiff","index","value","x1","y1","cx","cy","distance","angle","atan2","x2","cos","y2","sin","findClosestLoopPt","a","b","min","ret","pts","pointX","pointY","console","log","dist","sqrt","findClosestInterval","tones","position","window","innerWidth","innerHeight","loopToSnap","snapCoords","test","newA","newB","dispatch","color","stroke","strokeWidth","sound","rect","current","getBoundingClientRect","left","top","setState","render","borderRadius","border","borderColor","backgroundColor","width","height","outline","pointerEvents","zIndex","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestLoopPt(a, b, index){\n    // console.log(\"LOOP ID: \" + this.props.loops[index].pts)\n    // return {x:a, y:b}\n    var min = 500;\n    var ret = {x: 0, y: 0};\n    // reference the loop and then its points\n    for (var i = 0; i < this.props.loops[index].pts.length; i+=2){\n      \n      var pointX = this.props.loops[index].pts[i];\n      var pointY = this.props.loops[index].pts[i+1];\n      console.log(\"x: \" + pointX)\n      console.log(\"y: \" + pointY)\n      // if coordinates of currently indexed point are less than min\n      var dist = Math.sqrt((pointX-a*pointX-a)+(pointY-b*pointY-b));\n      if (dist < min){\n        ret.x = pointX;\n        ret.y = pointY;\n      }\n    }\n    console.log(ret.x + \" and \" + ret.y)\n    return ret;\n  }\n  \n  findClosestLoopPt(a, b, index){\n    // console.log(\"LOOP ID: \" + this.props.loops[index].pts)\n    // return {x:a, y:b}\n    var min = 500;\n    var ret = {x: 0, y: 0};\n    // reference the loop and then its points\n    for (var i = 0; i < this.props.loops[index].pts.length; i+=2){\n      \n      var pointX = this.props.loops[index].pts[i];\n      var pointY = this.props.loops[index].pts[i+1];\n      console.log(\"x: \" + pointX)\n      console.log(\"y: \" + pointY)\n      // if coordinates of currently indexed point are less than min\n      var dist = Math.sqrt((pointX-a*pointX-a)+(pointY-b*pointY-b));\n      if (dist < min){\n        ret.x = pointX;\n        ret.y = pointY;\n      }\n    }\n    console.log(ret.x + \" and \" + ret.y)\n    return ret;\n  }\n\n  findClosestInterval(a, b){\n    // finds closest tone and returns the index so that color can be changed\n    var min = 0;\n    for (var i = 0; i < this.props.tones.length; i++){\n      // might need to compare pt + or - offset\n      var x = this.props.tones[i].position.x;\n      var y = this.props.tones[i].position.y;\n      var dist = Math.sqrt((x-a*x-a)+(y-b*y-b));\n      // could also set min to this.props.tones[i].id but since id is 0++ they're the same\n      min = i;\n    }\n    return min;\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n\n    var a = y1 - cy;\n    var b = x1 - cx;\n    //c\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    if (loopToSnap) {\n      // for each point in loopToSnap, dispatch on coord of pts\n      // replace findSnapCoordinats with findClosestLoopPt\n      //var snapCoords = this.findSnapCoordinates(a, b, cx, cy, loopToSnap.value);\n      var snapCoords = this.findClosestLoopPt(a, b, loopToSnap.index)\n      var test = this.findClosestInterval(x1, y1)\n      console.log(\"TEST: \"+ test)\n      var newA = (snapCoords.y - cy) * -1;\n      var newB = snapCoords.x - cx;\n\n      this.props.dispatch(\n        addTone(\n          cx,\n          cy,\n          this.props.color,\n          this.props.stroke,\n          this.props.strokeWidth,\n          newA,\n          newB,\n\n          loopToSnap.index,\n          20,\n          this.props.sound\n        )\n      );\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n\n    this.snap(x, y);\n\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  handleClick() {\n    this.props.dispatch(playTone(this.props.sound));\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <Draggable position={this.state.deltaPosition} onStop={this.handleStop}>\n          <button\n            ref={this.selector}\n            className=\"hover-shadow\"\n            onClick={this.handleClick}\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n              border: \"none\",\n              outline: \"none\"\n            }}\n          />\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    loops: state.loops,\n    tones: state.tones\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}