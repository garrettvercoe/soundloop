{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/MountedTones.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Layer, Group } from \"react-konva\";\nimport Konva from \"konva\";\nimport { connect } from \"react-redux\";\nimport ToneKonva from \"./ToneKonva\";\n\nclass MountedTones extends React.Component {\n  // componentDidMount(){\n  //   // would need to get angular speed of loop somehow\n  //   this.angularSpeed = 70;\n  //   this.anim = new Konva.Animation(frame => {\n  //     var tDiff = frame.timeDiff;\n  //     var angleDiff = (tDiff * this.angularSpeed) / 1000;\n  //     // rotate group0\n  //     this.group0.rotate(angleDiff);\n  //     this.trueTime = frame.time - this.lastTime;\n  //   }, this.group1.getLayer());\n  // }\n  // componentDidUpdate(prevProps){\n  //   if (prevProps.tones !== this.props.tones){\n  //   }\n  //   if (prevProps.playing !== this.props.playing) {\n  //     if (this.props.playing) {\n  //       this.anim.start();\n  //     } else {\n  //       this.anim.isRunning() && this.anim.stop();\n  //     }\n  //   }\n  // }\n  render() {\n    // filter tones by loop to be added to group\n    const loop0 = this.props.tones.filter(item => item.attachedLoop === 0);\n    const loop1 = this.props.tones.filter(item => item.attachedLoop === 1);\n    return React.createElement(Layer, {\n      ref: node => {\n        this.layer = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, this.props.tones.map(item => {\n      return React.createElement(ToneKonva, {\n        color: item.color,\n        x: this.props.center.x,\n        y: this.props.center.y,\n        offset: item.offset,\n        radius: item.radius,\n        attachedLoop: item.attachedLoop,\n        sound: item.sound,\n        duration: item.duration,\n        strokeWidth: item.strokeWidth,\n        id: item.id,\n        rotation: item.rotation,\n        ref: node => {\n          this.child = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    })); // } else {\n    //   return null\n    // }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    tones: state.tones,\n    loops: state.loops,\n    center: state.shared.center,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(MountedTones);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/MountedTones.js"],"names":["React","Layer","Group","Konva","connect","ToneKonva","MountedTones","Component","render","loop0","props","tones","filter","item","attachedLoop","loop1","node","layer","map","color","center","x","y","offset","radius","sound","duration","strokeWidth","id","rotation","child","mapStateToProps","state","loops","shared","playing"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,aAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA2C;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACC,YAAL,KAAsB,CAAtD,CAAd;AACA,UAAMC,KAAK,GAAG,KAAKL,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACC,YAAL,KAAsB,CAAtD,CAAd;AACA,WACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEE,IAAI,IAAI;AAAE,aAAKC,KAAL,GAAaD,IAAb;AAAoB,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKN,KAAL,CAAWC,KAAX,CAAiBO,GAAjB,CAAqBL,IAAI,IAAI;AAC5B,aACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAEA,IAAI,CAACM,KADd;AAEE,QAAA,CAAC,EAAE,KAAKT,KAAL,CAAWU,MAAX,CAAkBC,CAFvB;AAGE,QAAA,CAAC,EAAE,KAAKX,KAAL,CAAWU,MAAX,CAAkBE,CAHvB;AAIE,QAAA,MAAM,EAAET,IAAI,CAACU,MAJf;AAKE,QAAA,MAAM,EAAEV,IAAI,CAACW,MALf;AAME,QAAA,YAAY,EAAEX,IAAI,CAACC,YANrB;AAOE,QAAA,KAAK,EAAED,IAAI,CAACY,KAPd;AAQE,QAAA,QAAQ,EAAEZ,IAAI,CAACa,QARjB;AASE,QAAA,WAAW,EAAEb,IAAI,CAACc,WATpB;AAUE,QAAA,EAAE,EAAEd,IAAI,CAACe,EAVX;AAWE,QAAA,QAAQ,EAAEf,IAAI,CAACgB,QAXjB;AAYE,QAAA,GAAG,EAAEb,IAAI,IAAI;AAAE,eAAKc,KAAL,GAAad,IAAb;AAAoB,SAZrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAgBD,KAjBA,CADH,CADF,CAJO,CAmEL;AACA;AACA;AACH;;AAhGwC;;AAmG3C,SAASe,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLrB,IAAAA,KAAK,EAAEqB,KAAK,CAACrB,KADR;AAELsB,IAAAA,KAAK,EAAED,KAAK,CAACC,KAFR;AAGLb,IAAAA,MAAM,EAAEY,KAAK,CAACE,MAAN,CAAad,MAHhB;AAILe,IAAAA,OAAO,EAAEH,KAAK,CAACE,MAAN,CAAaC;AAJjB,GAAP;AAMD;;AAED,eAAe/B,OAAO,CAAC2B,eAAD,CAAP,CAAyBzB,YAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Layer, Group } from \"react-konva\";\nimport Konva from \"konva\";\nimport { connect } from \"react-redux\";\nimport ToneKonva from \"./ToneKonva\";\n\nclass MountedTones extends React.Component {\n  // componentDidMount(){\n  //   // would need to get angular speed of loop somehow\n  //   this.angularSpeed = 70;\n  //   this.anim = new Konva.Animation(frame => {\n  //     var tDiff = frame.timeDiff;\n  //     var angleDiff = (tDiff * this.angularSpeed) / 1000;\n  //     // rotate group0\n  //     this.group0.rotate(angleDiff);\n  //     this.trueTime = frame.time - this.lastTime;\n\n  //   }, this.group1.getLayer());\n  // }\n\n  // componentDidUpdate(prevProps){\n  //   if (prevProps.tones !== this.props.tones){\n  //   }\n  //   if (prevProps.playing !== this.props.playing) {\n  //     if (this.props.playing) {\n  //       this.anim.start();\n  //     } else {\n  //       this.anim.isRunning() && this.anim.stop();\n  //     }\n  //   }\n  // }\n\n  render() {\n    // filter tones by loop to be added to group\n    const loop0 = this.props.tones.filter(item => item.attachedLoop === 0)\n    const loop1 = this.props.tones.filter(item => item.attachedLoop === 1)\n    return (\n      <Layer ref={node => { this.layer = node; }}>\n        {this.props.tones.map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })}\n        {/* The following is the group implementation, need to add position and other props to each */}\n        {/* <Group ref={node => { this.group0 = node; }}>\n        {loop0.map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })}\n        </Group>\n        <Group ref={node => { this.group1 = node; }}>\n        {loop1.map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })}\n        </Group> */}\n      </Layer>\n    );\n      // } else {\n      //   return null\n      // }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    tones: state.tones,\n    loops: state.loops,\n    center: state.shared.center,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(MountedTones);\n"]},"metadata":{},"sourceType":"module"}