{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nimport { makeVisible } from \"../actions/cursor\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this); // this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  handleStop() {}\n\n  handleClick() {\n    this.props.dispatch(makeVisible(this.props.note, this.props.toneSizes[this.props.selectedSustain], this.props.selectedSustain));\n    var radius = this.props.screenHeight / 350;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n      }\n    }\n\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound, this.props.selectedSustain));\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onClick: this.handleClick,\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note-select\",\n      style: {\n        color: this.props.textColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.note)));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n} //\n\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","updateTone","playTone","makeVisible","ToneButton","Component","constructor","props","handleClick","bind","handleStop","dispatch","note","toneSizes","selectedSustain","radius","screenHeight","i","tones","length","sound","playing","loops","attachedLoop","active","render","borderRadius","border","borderColor","color","backgroundColor","width","height","position","outline","pointerEvents","selector","zIndex","textColor","mapStateToProps","state","shared","center"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nimport { makeVisible } from \"../actions/cursor\";\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    // this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  handleStop() {}\n\n  handleClick() {\n    this.props.dispatch(\n      makeVisible(\n        this.props.note,\n        this.props.toneSizes[this.props.selectedSustain],\n        this.props.selectedSustain\n      )\n    );\n\n    var radius = this.props.screenHeight / 350;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (\n        this.props.tones[i].sound === null &&\n        !this.props.playing &&\n        this.props.loops[this.props.tones[i].attachedLoop].active === true\n      ) {\n        this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n      }\n    }\n\n    if (!this.props.playing) {\n      this.props.dispatch(\n        playTone(this.props.sound, this.props.selectedSustain)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        {/* <Draggable\n          position={this.state.deltaPosition}\n          onStop={this.handleStop}\n          onStart={this.handleDrag}\n        > */}\n        <div\n          ref={this.selector}\n          className=\"hover-shadow\"\n          onClick={this.handleClick}\n          style={{\n            borderRadius: \"100%\",\n            backgroundColor: this.props.color,\n            width: \"2rem\",\n            zIndex: 1,\n            height: \"2rem\",\n\n            border: \"none\",\n            outline: \"none\"\n          }}\n        >\n          <div className=\"note-select\" style={{ color: this.props.textColor }}>\n            {this.props.note}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n}\n\n//\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}