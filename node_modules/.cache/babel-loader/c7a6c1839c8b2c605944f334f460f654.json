{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { addTone, updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      noteSelected: false,\n      snapped: false\n    };\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this); // this.handleDrag = this.handleDrag.bind(this);\n    // this.handleDragClick = this.handleDragClick.bind(this);\n  }\n\n  handleClick() {\n    console.log(\"clicked bitches\");\n\n    if (!this.state.noteSelected) {\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n          this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n        }\n      }\n\n      this.setState({\n        noteSelected: true\n      });\n      console.log(this.state.noteSelected);\n    } else {\n      this.rect = this.selector.current.getBoundingClientRect();\n      const x = this.rect.left;\n      const y = this.rect.top;\n      var snapped = this.snap(x, y);\n      console.log(\"snapped: \" + snapped);\n\n      if (snapped) {\n        this.setState({\n          noteSelected: true\n        });\n      }\n\n      if (!snapped) {\n        // this.handleStop();\n        console.log(\"not snapped\");\n        this.setState({\n          noteSelected: false\n        });\n        this.setState({\n          deltaPosition: {\n            x: 0,\n            y: 0\n          }\n        });\n        console.log(this.state.deltaPosition.x);\n\n        for (let i = 0; i < this.props.tones.length; i++) {\n          if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n            this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n          }\n        }\n      }\n    } // if (!this.props.playing) {\n    //   this.props.dispatch(playTone(this.props.sound));\n    // }\n\n  }\n\n  handleStop() {}\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.cx - this.props.tones[i].offset.x;\n      var y = this.cy - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n\n    return ret;\n  }\n\n  findFakeCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y);\n      this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, 0));\n      return true;\n    }\n\n    return false;\n  } // handleDrag() {\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     if (\n  //       this.props.tones[i].sound === null &&\n  //       !this.props.playing &&\n  //       this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //     ) {\n  //       this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n  //     }\n  //   }\n  // }\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.state.noteSelected ? false : () => {},\n      allowAnyClick: true,\n      disabled: this.state.noteSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onMouseDown: () => this.handleClick(),\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, JSON.stringify(this.state.deltaPosition), React.createElement(\"div\", {\n      className: \"note-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, this.props.children))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","addTone","updateTone","playTone","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","noteSelected","snapped","cx","center","cy","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","handleClick","console","log","i","tones","length","sound","playing","loops","attachedLoop","active","dispatch","setState","rect","current","getBoundingClientRect","left","top","distToCenter","acceptableRange","loopArray","id","curr","radius","diff","Math","abs","newdiff","index","value","x1","y1","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","min","ret","offset","diffX","diffY","dist","sqrt","findFakeCoordinates","originalAngle","angleRad","PI","newAngle","loopToSnap","rotation","fakeCoords","intervalId","color","render","borderRadius","border","borderColor","backgroundColor","width","height","position","outline","pointerEvents","zIndex","JSON","stringify","children","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { addTone, updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      noteSelected: false,\n      snapped: false\n    };\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    // this.handleDrag = this.handleDrag.bind(this);\n    // this.handleDragClick = this.handleDragClick.bind(this);\n  }\n\n  handleClick() {\n    console.log(\"clicked bitches\");\n    if (!this.state.noteSelected) {\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (\n          this.props.tones[i].sound === null &&\n          !this.props.playing &&\n          this.props.loops[this.props.tones[i].attachedLoop].active === true\n        ) {\n          this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n        }\n      }\n      this.setState({ noteSelected: true });\n      console.log(this.state.noteSelected);\n    } else {\n      this.rect = this.selector.current.getBoundingClientRect();\n      const x = this.rect.left;\n      const y = this.rect.top;\n\n      var snapped = this.snap(x, y);\n      console.log(\"snapped: \" + snapped);\n      if (snapped) {\n        this.setState({ noteSelected: true });\n      }\n      if (!snapped) {\n        // this.handleStop();\n        console.log(\"not snapped\");\n        this.setState({ noteSelected: false });\n        this.setState({\n          deltaPosition: {\n            x: 0,\n            y: 0\n          }\n        });\n        console.log(this.state.deltaPosition.x);\n        for (let i = 0; i < this.props.tones.length; i++) {\n          if (\n            this.props.tones[i].sound === null &&\n            this.props.loops[this.props.tones[i].attachedLoop].active === true\n          ) {\n            this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n          }\n        }\n      }\n    }\n\n    // if (!this.props.playing) {\n    //   this.props.dispatch(playTone(this.props.sound));\n    // }\n  }\n\n  handleStop() {}\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.cx - this.props.tones[i].offset.x;\n      var y = this.cy - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n    return ret;\n  }\n\n  findFakeCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter);\n\n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y);\n\n      this.props.dispatch(\n        updateTone(intervalId, this.props.color, this.props.sound, 0)\n      );\n      return true;\n    }\n    return false;\n  }\n\n  // handleDrag() {\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     if (\n  //       this.props.tones[i].sound === null &&\n  //       !this.props.playing &&\n  //       this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //     ) {\n  //       this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n  //     }\n  //   }\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n\n        <Draggable\n          position={this.state.deltaPosition}\n          onStop={this.state.noteSelected ? false : () => {}}\n          allowAnyClick={true}\n          disabled={this.state.noteSelected}\n        >\n          <div\n            ref={this.selector}\n            className=\"hover-shadow\"\n            onMouseDown={() => this.handleClick()}\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n\n              border: \"none\",\n              outline: \"none\"\n            }}\n          >\n            {JSON.stringify(this.state.deltaPosition)}\n            <div className=\"note-select\">{this.props.children}</div>\n          </div>\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}