{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  componentDidMount() {\n    function getAngle() {\n      var x1 = this.props.position.x - this.props.offset.x;\n      var y1 = this.props.position.y - this.props.offset.y;\n      var x2 = this.props.position.x;\n      var y2 = this.props.position.y - this.props.radius;\n      return Math.acos((2 * (this.props.radius * this.props.radius) - Math.abs(Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)))) / (2 * (this.props.radius * this.props.radius)));\n    }\n\n    var angularSpeed = 180;\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n      console.log(frame.time);\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y // draggable\n      ,\n      fill: this.props.color,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","ToneKonva","Component","componentDidMount","getAngle","x1","props","position","x","offset","y1","y","x2","y2","radius","Math","acos","abs","sqrt","angularSpeed","anim","Animation","frame","angleDiff","timeDiff","circle","rotate","console","log","time","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","constructor","state","isDragging","active","bind","render","color","node","setState","e","target","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\nclass ToneKonva extends React.Component {\n  componentDidMount() {\n    function getAngle() {\n      var x1 = this.props.position.x - this.props.offset.x;\n      var y1 = this.props.position.y - this.props.offset.y;\n      var x2 = this.props.position.x;\n      var y2 = this.props.position.y - this.props.radius;\n      return Math.acos(\n        (2 * (this.props.radius * this.props.radius) -\n          Math.abs(Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)))) /\n          (2 * (this.props.radius * this.props.radius))\n      );\n    }\n    var angularSpeed = 180;\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n      console.log(frame.time);\n    }, this.circle.getLayer());\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        // draggable\n        fill={this.props.color}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}