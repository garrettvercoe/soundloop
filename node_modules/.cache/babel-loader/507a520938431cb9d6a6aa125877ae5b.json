{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/Cord.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport PlayButton from \"./PlayButton\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\"; //import GreenSock from \"greensock-plugin-master\"\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    //playing around with creating a sound\n    //create a synth and connect it to the master output (your speakers)\n    // var distortion = new Tone.Distortion(1.5);\n    // var tremolo = new Tone.Tremolo().start();\n    // this.synth = new Tone.PolySynth().chain(distortion, tremolo, Tone.Master);\n    this.synth = new Tone.PolySynth().toMaster();\n    var max = window.innerHeight / 2 - 50;\n    var interval = max / 2;\n    var pts = [];\n    var prevX = this.props.center.x;\n    var flux = 8;\n    var prevY = this.props.center.y;\n\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevX = prevX + flux;\n      prevY = prevY - interval;\n      flux = -flux;\n    } //var tl = new TimelineLite();\n\n\n    this.tween = new Konva.Tween({\n      node: this.line,\n      duration: 0.1,\n      easing: Konva.Easings.EaseOut,\n      points: pts,\n      stroke: this.props.color,\n      onFinish: function () {\n        // for (var i = 0; i < 18; i += 2){\n        //   this.tween.points[i] = -this.tween.points[i];\n        // }\n        this.tween.reverse();\n      } //   onReset: function() {\n      //     this.tween.play();\n      // }\n\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.sounds !== this.props.sounds) {\n      this.synth.triggerAttackRelease(this.props.sounds[this.props.index], \"4n\");\n\n      if (this.props.playing) {\n        console.log(\"COLOR: \" + this.props.color);\n        this.line.stroke(this.props.color);\n        this.tween.play();\n      } //console.log(\"CDU Tween points: \" + this.tween.points)\n\n    }\n  }\n\n  render() {\n    var max = window.innerHeight / 2 - 50;\n    var interval = max / 2;\n    var pts = [];\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevY = prevY - interval;\n    }\n\n    return React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y - max,\n      radius: 4,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: 11,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Line, {\n      points: pts,\n      stroke: \"#692D55\",\n      strokeWidth: 2,\n      tension: 0.5,\n      ref: node => {\n        this.line = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    sounds: state.cord.sounds,\n    color: state.cord.color,\n    index: state.cord.index\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/Cord.js"],"names":["React","AppBar","PlayButton","Line","Layer","Circle","Toolbar","connect","Konva","Tone","Cord","Component","componentDidMount","synth","PolySynth","toMaster","max","window","innerHeight","interval","pts","prevX","props","center","x","flux","prevY","y","i","push","tween","Tween","node","line","duration","easing","Easings","EaseOut","points","stroke","color","onFinish","reverse","componentDidUpdate","prevProps","sounds","triggerAttackRelease","index","playing","console","log","play","render","mapStateToProps","state","shared","cord"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport PlayButton from \"./PlayButton\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n//import GreenSock from \"greensock-plugin-master\"\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    //playing around with creating a sound\n\n    //create a synth and connect it to the master output (your speakers)\n    // var distortion = new Tone.Distortion(1.5);\n    // var tremolo = new Tone.Tremolo().start();\n    // this.synth = new Tone.PolySynth().chain(distortion, tremolo, Tone.Master);\n\n    this.synth = new Tone.PolySynth().toMaster();\n    var max = window.innerHeight / 2 - 50;\n    var interval = max / 2;\n    var pts = [];\n    var prevX = this.props.center.x;\n    var flux = 8;\n    var prevY = this.props.center.y;\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevX = prevX + flux;\n      prevY = prevY - interval;\n      flux = -flux;\n    }\n\n    //var tl = new TimelineLite();\n    this.tween = new Konva.Tween({\n      node: this.line,\n      duration: 0.1,\n      easing: Konva.Easings.EaseOut,\n      points: pts,\n      stroke: this.props.color,\n      onFinish: function() {\n        // for (var i = 0; i < 18; i += 2){\n        //   this.tween.points[i] = -this.tween.points[i];\n        // }\n\n        this.tween.reverse();\n      }\n      //   onReset: function() {\n      //     this.tween.play();\n      // }\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.sounds !== this.props.sounds) {\n      this.synth.triggerAttackRelease(\n        this.props.sounds[this.props.index],\n        \"4n\"\n      );\n\n      if (this.props.playing) {\n        console.log(\"COLOR: \" + this.props.color);\n        this.line.stroke(this.props.color);\n        this.tween.play();\n      }\n\n      //console.log(\"CDU Tween points: \" + this.tween.points)\n    }\n  }\n\n  render() {\n    var max = window.innerHeight / 2 - 50;\n    var interval = max / 2;\n    var pts = [];\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevY = prevY - interval;\n    }\n    return (\n      <Layer>\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y - max}\n          radius={4}\n          fill=\"#692D55\"\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y}\n          radius={11}\n          fill=\"#692D55\"\n        />\n        <Line\n          points={pts}\n          stroke=\"#692D55\"\n          strokeWidth={2}\n          tension={0.5}\n          ref={node => {\n            this.line = node;\n          }}\n        />\n      </Layer>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    sounds: state.cord.sounds,\n    color: state.cord.color,\n    index: state.cord.index\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);\n"]},"metadata":{},"sourceType":"module"}