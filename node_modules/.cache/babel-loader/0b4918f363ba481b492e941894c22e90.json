{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/MouseTracker.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeInvisible } from \"../actions/cursor\";\nimport { updateTone } from \"../actions/tones\";\nimport { red, pink, purple, indigo, blue, cyan, teal, green, yellow, amber, orange, deepOrange } from \"@material-ui/core/colors/\";\nconst colorHues = [red, pink, purple, indigo, blue, cyan, teal, green, yellow, amber, orange, deepOrange];\nconst colorHue = colorHues.indexOf(this.props.sound);\n\nclass Cursor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this); // this.selector = React.createRef();\n\n    this.color = colorHues[colorHue][this.props.octave * 100];\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // convert current cursor location to coordinates\n\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1); // original angle in radians\n\n    var angleRad = angle * (Math.PI / 180); // new angle\n\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y, loopToSnap.index);\n      this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, //  this.props.screenHeight / 50,\n      this.props.toneSizes[this.props.selectedSustain], this.props.selectedSustain));\n    }\n  }\n\n  handleClick() {\n    // this.props.dispatch(makeInvisible());\n    console.log(\"clicked\");\n\n    if (this.props.playing === false) {\n      // this.rect = this.selector.current.getBoundingClientRect();\n      const x = this.props.cursorPos.x - 200;\n      const y = this.props.cursorPos.y - 150;\n      this.snap(x, y); // this.setState({\n      //   deltaPosition: {\n      //     x: 0,\n      //     y: 0\n      //   }\n      // });\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {// this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n        }\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => this.handleClick(),\n      style: {\n        position: \"absolute\",\n        left: this.props.cursorPos.x - 185 - this.props.toneSizes[this.props.selectedSustain],\n        top: this.props.cursorPos.y - 135 - this.props.toneSizes[this.props.selectedSustain],\n        width: 2 * this.props.toneSizes[this.props.selectedSustain],\n        height: 2 * this.props.toneSizes[this.props.selectedSustain],\n        borderRadius: \"50%\",\n        pointerEvents: this.props.visible ? \"auto\" : \"none\",\n        cursor: \"grab \",\n        background: this.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    visible: state.cursor.active,\n    loops: state.loops,\n    tones: state.tones,\n    sound: state.cursor.sound,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n}\n\nexport default connect(mapStateToProps)(Cursor);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/MouseTracker.js"],"names":["React","connect","makeInvisible","updateTone","red","pink","purple","indigo","blue","cyan","teal","green","yellow","amber","orange","deepOrange","colorHues","colorHue","indexOf","props","sound","Cursor","Component","constructor","handleClick","bind","color","octave","cx","center","x","cy","y","snap","findSnapCoordinates","findClosestLoop","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","active","newdiff","index","value","x1","y1","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","loop","min","ret","tones","attachedLoop","offset","diffX","diffY","dist","sqrt","findTrueCoordinates","originalAngle","angleRad","PI","newAngle","loopToSnap","rotation","trueCoords","intervalId","dispatch","toneSizes","selectedSustain","console","log","playing","cursorPos","render","position","left","top","width","height","borderRadius","pointerEvents","visible","cursor","background","mapStateToProps","state","shared","screenHeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeInvisible } from \"../actions/cursor\";\nimport { updateTone } from \"../actions/tones\";\nimport {\n  red,\n  pink,\n  purple,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  yellow,\n  amber,\n  orange,\n  deepOrange\n} from \"@material-ui/core/colors/\";\n\nconst colorHues = [\n  red,\n  pink,\n  purple,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  yellow,\n  amber,\n  orange,\n  deepOrange\n];\nconst colorHue = colorHues.indexOf(this.props.sound);\n\nclass Cursor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n\n    // this.selector = React.createRef();\n\n    this.color = colorHues[colorHue][this.props.octave * 100];\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // convert current cursor location to coordinates\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1);\n    // original angle in radians\n    var angleRad = angle * (Math.PI / 180);\n    // new angle\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n\n      var intervalId = this.findClosestInterval(\n        trueCoords.x,\n        trueCoords.y,\n        loopToSnap.index\n      );\n\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          //  this.props.screenHeight / 50,\n          this.props.toneSizes[this.props.selectedSustain],\n          this.props.selectedSustain\n        )\n      );\n    }\n  }\n\n  handleClick() {\n    // this.props.dispatch(makeInvisible());\n    console.log(\"clicked\");\n\n    if (this.props.playing === false) {\n      // this.rect = this.selector.current.getBoundingClientRect();\n      const x = this.props.cursorPos.x - 200;\n      const y = this.props.cursorPos.y - 150;\n\n      this.snap(x, y);\n\n      // this.setState({\n      //   deltaPosition: {\n      //     x: 0,\n      //     y: 0\n      //   }\n      // });\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (\n          this.props.tones[i].sound === null &&\n          this.props.loops[this.props.tones[i].attachedLoop].active === true\n        ) {\n          // this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n        }\n      }\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          onClick={() => this.handleClick()}\n          style={{\n            position: \"absolute\",\n            left:\n              this.props.cursorPos.x -\n              185 -\n              this.props.toneSizes[this.props.selectedSustain],\n            top:\n              this.props.cursorPos.y -\n              135 -\n              this.props.toneSizes[this.props.selectedSustain],\n            width: 2 * this.props.toneSizes[this.props.selectedSustain],\n            height: 2 * this.props.toneSizes[this.props.selectedSustain],\n\n            borderRadius: \"50%\",\n            pointerEvents: this.props.visible ? \"auto\" : \"none\",\n            cursor: \"grab \",\n            background: this.color\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    visible: state.cursor.active,\n    loops: state.loops,\n    tones: state.tones,\n    sound: state.cursor.sound,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n}\n\nexport default connect(mapStateToProps)(Cursor);\n"]},"metadata":{},"sourceType":"module"}