{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n  } // CHECK HERE FOR STRANGE SPEED STUFF\n\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var test = (2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)); //test = test.toFixed(2)\n    // var rad = test;\n\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed; //var angularSpeed = 75;\n\n    console.log(this.props);\n    var angle = this.getAngle(); // console.log(\"ANGLE: \" + angle)\n\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000;\n    console.log(\"TIMER INIT for \" + this.props.id + \": \" + timerInit); //this.circle.opacity(((this.circle.rotation() + angle) % 360) / 1080 + 0.66);\n\n    var timerLoop = 360 / angularSpeed * 1000; // rotate circle initially to loop rotation\n\n    this.circle.rotate(this.props.rotation);\n    this.anim = new Konva.Animation(frame => {\n      var constTimeDiff = 16;\n      console.log(\"TIME: \" + frame.time); // frame.frameRate = 30;\n      // frame.timeDiff = 33;\n\n      console.log(\"frameRate: \" + frame.frameRate);\n      var angleDiff = frame.timeDiff * angularSpeed / 1000; // console.log(\"angleDiff: \" + angleDiff)\n\n      console.log(\"timeDiff for \" + this.props.id + \": \" + frame.timeDiff);\n      this.circle.rotate(angleDiff); // console.log(\"COLOR \" + this.props.color + \" PLAYED: \" + played)\n      // variable opacity based on angular location\n      // this.circle.opacity(\n      //   ((this.circle.rotation() + angle) % 360) / 1080 + 0.66\n      // );\n\n      if (timerInit - 10 < frame.time && frame.time < timerInit + 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound, this.props.color));\n      } else if (frame.time % timerLoop < timerInit + 20 && frame.time % timerLoop > timerInit - 20 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // if (this.props.loops[this.props.attachedLoop].active === false){\n    //   this.circle.fill(\"transparent\");\n    // }\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start(); // console.log(\"ROTATION: \" + this.circle.rotation())\n        // console.log(\"OFFSETX: \" + this.circle.offsetX())\n        // console.log(\"Position: \" + this.circle.x())\n\n        if (this.props.sound === null) {// this.props.dispatch(updateTone(this.props.id, \"transparent\", null, 1.5))\n        }\n      } else {\n        this.anim.isRunning() && this.anim.stop(); // on pause, update the rotation value of the loop in the store\n\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  }\n\n  handleDragStart() {\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  handleDragEnd() {\n    this.props.dispatch(deleteTone(this.props.id));\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    this.props.dispatch(addTone(window.innerWidth / 2, window.innerHeight / 2, \"red\", \"#fff\", 1.5, this.props.offset.x, this.props.offset.y, this.props.attachedLoop, 20, null, loopRotation));\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n  }\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      draggable: true,\n      onDragStart: this.handleDragStart,\n      onDragEnd: this.handleDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","rotateTone","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","ToneKonva","Component","constructor","props","getAngle","bind","handleDragEnd","handleDragStart","radius","loops","attachedLoop","x1","x","offset","y1","Math","round","y","x2","y2","rad","acos","abs","test","deg","PI","componentDidMount","angularSpeed","speed","console","log","angle","timerInit","id","timerLoop","circle","rotate","rotation","anim","Animation","frame","constTimeDiff","time","frameRate","angleDiff","timeDiff","sound","dispatch","color","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","i","tones","length","loopRotation","window","innerWidth","innerHeight","render","active","stroke","strokeWidth","node","mapStateToProps","state","shared","rot"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n  }\n\n  // CHECK HERE FOR STRANGE SPEED STUFF\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n        (2 * (radius * radius))\n    );\n\n    var test =\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n      (2 * (radius * radius));\n    //test = test.toFixed(2)\n    // var rad = test;\n\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n    console.log(this.props);\n    var angle = this.getAngle();\n    // console.log(\"ANGLE: \" + angle)\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    console.log(\"TIMER INIT for \" + this.props.id + \": \" + timerInit);\n\n    //this.circle.opacity(((this.circle.rotation() + angle) % 360) / 1080 + 0.66);\n    var timerLoop = (360 / angularSpeed) * 1000;\n\n    // rotate circle initially to loop rotation\n    this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n      var constTimeDiff = 16;\n      console.log(\"TIME: \" + frame.time);\n      // frame.frameRate = 30;\n      // frame.timeDiff = 33;\n      console.log(\"frameRate: \" + frame.frameRate);\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      // console.log(\"angleDiff: \" + angleDiff)\n      console.log(\"timeDiff for \" + this.props.id + \": \" + frame.timeDiff);\n      this.circle.rotate(angleDiff);\n      // console.log(\"COLOR \" + this.props.color + \" PLAYED: \" + played)\n      // variable opacity based on angular location\n      // this.circle.opacity(\n      //   ((this.circle.rotation() + angle) % 360) / 1080 + 0.66\n      // );\n      if (\n        timerInit - 10 < frame.time &&\n        frame.time < timerInit + 10 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound, this.props.color));\n      } else if (\n        frame.time % timerLoop < timerInit + 20 &&\n        frame.time % timerLoop > timerInit - 20 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // if (this.props.loops[this.props.attachedLoop].active === false){\n    //   this.circle.fill(\"transparent\");\n    // }\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        // console.log(\"ROTATION: \" + this.circle.rotation())\n        // console.log(\"OFFSETX: \" + this.circle.offsetX())\n        // console.log(\"Position: \" + this.circle.x())\n        if (this.props.sound === null) {\n          // this.props.dispatch(updateTone(this.props.id, \"transparent\", null, 1.5))\n        }\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n\n        // on pause, update the rotation value of the loop in the store\n        this.props.dispatch(\n          updateLoop(this.props.attachedLoop, this.circle.rotation())\n        );\n      }\n    }\n  }\n\n  handleDragStart() {\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  handleDragEnd() {\n    this.props.dispatch(deleteTone(this.props.id));\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    this.props.dispatch(\n      addTone(\n        window.innerWidth / 2,\n        window.innerHeight / 2,\n        \"red\",\n        \"#fff\",\n        1.5,\n        this.props.offset.x,\n        this.props.offset.y,\n        this.props.attachedLoop,\n        20,\n        null,\n        loopRotation\n      )\n    );\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n  }\n\n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragEnd={this.handleDragEnd}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}