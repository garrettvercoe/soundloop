{"ast":null,"code":"import _objectSpread from \"/Users/garrett/repos/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_TONE, RECEIVE_TONES, RESIZE_TONE, UPDATE_TONE, DELETE_TONE, REPLACE_TONE } from \"../actions/tones\";\nimport { strictEqual } from \"assert\";\nimport { stat } from \"fs\";\nimport { TRASH_ALL_LINEAR, TRASH_ALL_ANGULAR } from \"../actions/shared\";\nlet nextToneId = 0;\nexport default function tones(state = [], action) {\n  switch (action.type) {\n    case ADD_TONE:\n      return [...state, {\n        id: nextToneId++,\n        color: action.color,\n        stroke: action.stroke,\n        strokeWidth: action.strokeWidth,\n        attachedLoop: action.attachedLoop,\n        radius: action.radius,\n        sound: action.sound,\n        offset: action.offset,\n        rotation: action.rotation\n      }];\n    // return new state with modified tone color, sound, and stroke with everything else same\n\n    case UPDATE_TONE:\n      //console.log(...state);\n      var id = action.id;\n      return [...state.slice(0, id), _objectSpread({}, state[id], {\n        color: action.color,\n        sound: action.sound,\n        radius: action.radius,\n        duration: action.duration\n      }), ...state.slice(id + 1)];\n\n    case RESIZE_TONE:\n      return {\n        state\n      };\n\n    case DELETE_TONE:\n      // let x = [...state.filter((i, index) => index !== action.id)];\n      // return x;\n      var id = action.id;\n      return [...state.slice(0, id), {\n        id: id,\n        color: action.color,\n        stroke: action.stroke,\n        strokeWidth: action.strokeWidth,\n        attachedLoop: action.attachedLoop,\n        radius: action.radius,\n        sound: action.sound,\n        position: action.position,\n        offset: action.offset,\n        rotation: action.rotation\n      }, ...state.slice(id + 1)];\n\n    case REPLACE_TONE:\n      var id = action.id;\n      return [...state.slice(0, id), {\n        id: id,\n        color: action.color,\n        stroke: action.stroke,\n        strokeWidth: action.strokeWidth,\n        attachedLoop: action.attachedLoop,\n        radius: action.radius,\n        sound: action.sound,\n        position: action.position,\n        offset: action.offset,\n        rotation: action.rotation\n      }, ...state.slice(id + 1)];\n\n    case TRASH_ALL_LINEAR:\n      nextToneId = 0;\n      return [];\n\n    case TRASH_ALL_ANGULAR:\n      nextToneId = 0;\n      return [];\n\n    case RECEIVE_TONES:\n      return _objectSpread({}, state, action.tones);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/reducers/tones.js"],"names":["ADD_TONE","RECEIVE_TONES","RESIZE_TONE","UPDATE_TONE","DELETE_TONE","REPLACE_TONE","strictEqual","stat","TRASH_ALL_LINEAR","TRASH_ALL_ANGULAR","nextToneId","tones","state","action","type","id","color","stroke","strokeWidth","attachedLoop","radius","sound","offset","rotation","slice","duration","position"],"mappings":"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","sourcesContent":["import {\n  ADD_TONE,\n  RECEIVE_TONES,\n  RESIZE_TONE,\n  UPDATE_TONE,\n  DELETE_TONE,\n  REPLACE_TONE\n} from \"../actions/tones\";\nimport { strictEqual } from \"assert\";\nimport { stat } from \"fs\";\nimport { TRASH_ALL_LINEAR, TRASH_ALL_ANGULAR } from \"../actions/shared\";\n\nlet nextToneId = 0;\nexport default function tones(state = [], action) {\n  switch (action.type) {\n    case ADD_TONE:\n      return [\n        ...state,\n        {\n          id: nextToneId++,\n          color: action.color,\n          stroke: action.stroke,\n          strokeWidth: action.strokeWidth,\n          attachedLoop: action.attachedLoop,\n          radius: action.radius,\n          sound: action.sound,\n          offset: action.offset,\n          rotation: action.rotation\n        }\n      ];\n\n    // return new state with modified tone color, sound, and stroke with everything else same\n    case UPDATE_TONE:\n      //console.log(...state);\n      var id = action.id;\n\n      return [\n        ...state.slice(0, id),\n        {\n          ...state[id],\n          color: action.color,\n          sound: action.sound,\n          radius: action.radius,\n          duration: action.duration\n        },\n        ...state.slice(id + 1)\n      ];\n\n    case RESIZE_TONE:\n      return { state };\n\n    case DELETE_TONE:\n      // let x = [...state.filter((i, index) => index !== action.id)];\n      // return x;\n      var id = action.id;\n      return [\n        ...state.slice(0, id),\n        {\n          id: id,\n          color: action.color,\n          stroke: action.stroke,\n          strokeWidth: action.strokeWidth,\n          attachedLoop: action.attachedLoop,\n          radius: action.radius,\n          sound: action.sound,\n          position: action.position,\n          offset: action.offset,\n          rotation: action.rotation\n        },\n        ...state.slice(id + 1)\n      ];\n\n    case REPLACE_TONE:\n      var id = action.id;\n      return [\n        ...state.slice(0, id),\n        {\n          id: id,\n          color: action.color,\n          stroke: action.stroke,\n          strokeWidth: action.strokeWidth,\n          attachedLoop: action.attachedLoop,\n          radius: action.radius,\n          sound: action.sound,\n          position: action.position,\n          offset: action.offset,\n          rotation: action.rotation\n        },\n        ...state.slice(id + 1)\n      ];\n\n    case TRASH_ALL_LINEAR:\n      nextToneId = 0;\n\n      return [];\n\n    case TRASH_ALL_ANGULAR:\n      nextToneId = 0;\n\n      return [];\n\n    case RECEIVE_TONES:\n      return {\n        ...state,\n        ...action.tones\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}