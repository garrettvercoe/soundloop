{"ast":null,"code":"import _slicedToArray from \"/Users/ericduong/Documents/repos/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/ericduong/Documents/repos/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/Loop.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { Layer, Transformer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addLoop, updateLoop } from \"../actions/loops\";\n\nfunction LoopScale({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange\n}) {\n  // shape state reference\n  const shapeRef = React.useRef(); // transformer state reference\n\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]); // return circle and transformer when selected\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Circle, Object.assign({\n    onClick: onSelect,\n    ref: shapeRef\n  }, shapeProps, {\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2,\n    fill: \"transparent\",\n    stroke: \"#ed1e79\",\n    strokeWidth: 1.5 // onTransformEnd: change properties based on scale and reset scale of shapeProps\n    ,\n    onTransformEnd: e => {\n      // transformer is changing scale\n      const node = shapeRef.current;\n      const scaleX = node.scaleX(); // reset the scale of the node back to 1\n\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange(_objectSpread({}, shapeProps, {\n        x: node.x(),\n        y: node.y(),\n        radius: node.radius() * scaleX\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })), isSelected && React.createElement(Transformer, {\n    ref: trRef,\n    enabledAnchors: [\"top-right\", \"bottom-left\"],\n    centeredScaling: true,\n    rotateEnabled: false,\n    borderStrokeWidth: 0,\n    anchorFill: \"#ed1e79\",\n    anchorCornerRadius: 80,\n    anchorSize: 20,\n    anchorStrokeWidth: 0,\n    ignoreStroke: true,\n    boundBoxFunc: function (oldBoundBox, newBoundBox) {\n      if (Math.abs(newBoundBox.width) > Math.min(window.innerHeight * (4 / 5), window.innerWidth * (4 / 5))) {\n        return oldBoundBox;\n      } else if (Math.abs(newBoundBox.width) < Math.min(window.innerHeight / 5, window.innerWidth / 5)) {\n        return oldBoundBox;\n      }\n\n      return newBoundBox;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n}\n\nclass LoopTest extends React.Component {\n  componentDidMount() {\n    console.log(\"Mounted\"); //this.props.dispatch(updateLoop())\n\n    this.props.dispatch(addLoop(1));\n  }\n\n  render() {\n    return React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(LoopScale, {\n      shapeProps: this.props.circle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction Loop() {\n  // need to change to singular\n  const initialCircles = [{\n    radius: Math.min(window.innerWidth * (1 / 3), window.innerHeight * (1 / 3)),\n    id: \"loop\"\n  }];\n  const circleTest = {\n    width: window.innerWidth * (2 / 3),\n    height: window.innerHeight * (2 / 3),\n    id: \"loop\"\n  };\n\n  const _React$useState = React.useState(initialCircles),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        circles = _React$useState2[0],\n        setCircles = _React$useState2[1];\n\n  const _React$useState3 = React.useState(null),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selectedId = _React$useState4[0],\n        selectShape = _React$useState4[1];\n\n  const _React$useState5 = React.useState(circleTest),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        circle = _React$useState6[0],\n        setCircle = _React$useState6[1];\n\n  return React.createElement(Layer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, circles.map((circle, i) => {\n    return React.createElement(LoopScale, {\n      key: i,\n      shapeProps: circle,\n      isSelected: circle.id === selectedId,\n      onSelect: () => {\n        selectShape(circle.id);\n      },\n      onChange: newAttrs => {\n        const circs = circles.slice();\n        circs[i] = newAttrs;\n        setCircles(circs);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    });\n  }));\n}\n\nfunction mapStateToProps(state) {\n  console.log(state);\n  return {\n    //pass through loopExport\n    radius: state.loops.radius\n  };\n} // temporary component to handle componentDidMount and test state\n\n\nclass LoopExport extends React.Component {\n  componentDidMount() {\n    console.log(\"Mounted\"); //this.props.dispatch(updateLoop())\n\n    this.props.dispatch(addLoop(window.innerHeight * 2 / 3));\n  }\n\n  render() {\n    return React.createElement(Loop, {\n      radius: this.props.radius,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default connect(mapStateToProps)(LoopExport); //export default connect(mapStateToProps)(LoopTest)","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/Loop.js"],"names":["React","Component","render","Layer","Transformer","Circle","connect","addLoop","updateLoop","LoopScale","shapeProps","isSelected","onSelect","onChange","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","window","innerWidth","innerHeight","e","node","scaleX","scaleY","x","y","radius","oldBoundBox","newBoundBox","Math","abs","width","min","LoopTest","componentDidMount","console","log","props","dispatch","circle","Loop","initialCircles","id","circleTest","height","useState","circles","setCircles","selectedId","selectShape","setCircle","map","i","newAttrs","circs","slice","mapStateToProps","state","loops","LoopExport"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { Layer, Transformer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addLoop, updateLoop } from \"../actions/loops\";\n\nfunction LoopScale({ shapeProps, isSelected, onSelect, onChange }) {\n  // shape state reference\n  const shapeRef = React.useRef();\n  // transformer state reference\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n  // return circle and transformer when selected\n  return (\n    <React.Fragment>\n      <Circle\n        onClick={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        x={window.innerWidth / 2}\n        y={window.innerHeight / 2}\n        fill={\"transparent\"}\n        stroke={\"#ed1e79\"}\n        strokeWidth={1.5}\n        // onTransformEnd: change properties based on scale and reset scale of shapeProps\n        onTransformEnd={e => {\n          // transformer is changing scale\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n\n          // reset the scale of the node back to 1\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            radius: node.radius() * scaleX\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          enabledAnchors={[\"top-right\", \"bottom-left\"]}\n          centeredScaling={true}\n          rotateEnabled={false}\n          borderStrokeWidth={0}\n          anchorFill={\"#ed1e79\"}\n          anchorCornerRadius={80}\n          anchorSize={20}\n          anchorStrokeWidth={0}\n          ignoreStroke={true}\n          boundBoxFunc={function(oldBoundBox, newBoundBox) {\n            if (\n              Math.abs(newBoundBox.width) >\n              Math.min(\n                window.innerHeight * (4 / 5),\n                window.innerWidth * (4 / 5)\n              )\n            ) {\n              return oldBoundBox;\n            } else if (\n              Math.abs(newBoundBox.width) <\n              Math.min(window.innerHeight / 5, window.innerWidth / 5)\n            ) {\n              return oldBoundBox;\n            }\n            return newBoundBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n}\n\nclass LoopTest extends React.Component {\n  componentDidMount() {\n    console.log(\"Mounted\");\n    //this.props.dispatch(updateLoop())\n    this.props.dispatch(addLoop(1));\n  }\n\n  render() {\n    return (\n      <Layer>\n        <LoopScale shapeProps={this.props.circle} />\n      </Layer>\n    );\n  }\n}\n\nfunction Loop() {\n  // need to change to singular\n  const initialCircles = [\n    {\n      radius: Math.min(\n        window.innerWidth * (1 / 3),\n        window.innerHeight * (1 / 3)\n      ),\n      id: \"loop\"\n    }\n  ];\n\n  const circleTest = {\n    width: window.innerWidth * (2 / 3),\n    height: window.innerHeight * (2 / 3),\n    id: \"loop\"\n  };\n\n  const [circles, setCircles] = React.useState(initialCircles);\n  const [selectedId, selectShape] = React.useState(null);\n  const [circle, setCircle] = React.useState(circleTest);\n  return (\n    <Layer>\n      {circles.map((circle, i) => {\n        return (\n          <LoopScale\n            key={i}\n            shapeProps={circle}\n            isSelected={circle.id === selectedId}\n            onSelect={() => {\n              selectShape(circle.id);\n            }}\n            onChange={newAttrs => {\n              const circs = circles.slice();\n              circs[i] = newAttrs;\n              setCircles(circs);\n            }}\n          />\n        );\n      })}\n    </Layer>\n  );\n}\n\nfunction mapStateToProps(state) {\n  console.log(state);\n  return {\n    //pass through loopExport\n    radius: state.loops.radius\n  };\n}\n\n// temporary component to handle componentDidMount and test state\nclass LoopExport extends React.Component {\n  componentDidMount() {\n    console.log(\"Mounted\");\n    //this.props.dispatch(updateLoop())\n    this.props.dispatch(addLoop((window.innerHeight * 2) / 3));\n  }\n  render() {\n    return <Loop radius={this.props.radius} />;\n  }\n}\n\nexport default connect(mapStateToProps)(LoopExport);\n//export default connect(mapStateToProps)(LoopTest)\n"]},"metadata":{},"sourceType":"module"}