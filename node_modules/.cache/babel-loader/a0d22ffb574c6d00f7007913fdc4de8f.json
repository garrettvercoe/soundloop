{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed; //var angularSpeed = 75;\n\n    console.log(this.props);\n    var angle = this.getAngle(); // console.log(\"ANGLE: \" + angle)\n\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000;\n    var timerLoop = 360 / angularSpeed * 1000; // rotate circle initially to loop rotation\n\n    this.circle.rotate(this.props.rotation);\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n\n      if (timerInit - 10 < frame.time && frame.time < timerInit + 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound, this.props.color));\n      } else if (frame.time % timerLoop < timerInit + 20 && frame.time % timerLoop > timerInit - 20 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({\n        x: this.props.offset.x,\n        y: this.props.offset.y\n      });\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop(); // on pause, update the rotation value of the loop in the store\n\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // find new offset values for snap, depending on rotation\n\n\n  findTrueOffset(offX, offY, angle) {\n    var originalAngle = Math.atan2(offX, offY);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    var dist = Math.sqrt(offX * offX + offY * offY);\n    const offX2 = Math.sin(newAngle) * dist;\n    const offY2 = Math.cos(newAngle) * dist;\n    return {\n      x: offX2,\n      y: offY2\n    };\n  }\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TK: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y);\n      console.log(\"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop);\n\n      if (!this.props.playing) {\n        this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, 0));\n      }\n    }\n  }\n\n  handleDragStart() {\n    console.log(\"zIndex: \" + this.circle.zIndex()); // move current tone above all of the others\n\n    this.circle.zIndex(this.props.tones.length); // for all tones, if sound null make them visible on drag\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation()); // new x and y are coord at original\n\n    var newX = circX - trueOff.x;\n    var newY = circY - trueOff.y;\n    this.snap(newX, newY);\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    } // this.props.dispatch(deleteTone(this.props.id));\n\n\n    this.props.dispatch(replaceTone(this.props.id, this.cx, this.cy, \"transparent\", \"#fff\", 1.5, this.props.offset.x, this.props.offset.y, this.props.attachedLoop, 20, null, loopRotation));\n  }\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      draggable: true,\n      onDragStart: this.handleDragStart,\n      onDragEnd: this.handleDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","rotateTone","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","replaceTone","ToneKonva","Component","constructor","props","cx","center","x","cy","y","getAngle","bind","handleDragEnd","handleDragStart","snap","findClosestLoop","findTrueOffset","radius","loops","attachedLoop","x1","offset","y1","Math","round","x2","y2","rad","acos","abs","deg","PI","componentDidMount","angularSpeed","speed","console","log","angle","timerInit","timerLoop","circle","rotate","rotation","anim","Animation","frame","angleDiff","timeDiff","time","sound","dispatch","color","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","distToCenter","acceptableRange","loopArray","id","curr","diff","i","length","active","newdiff","index","value","findClosestInterval","a","b","min","ret","tones","loop","diffX","diffY","dist","sqrt","offX","offY","originalAngle","atan2","angleRad","newAngle","offX2","sin","offY2","cos","findTrueCoordinates","distance","loopToSnap","trueCoords","intervalId","zIndex","loopRotation","circX","circY","offsetX","offsetY","trueOff","newX","newY","render","stroke","strokeWidth","node","mapStateToProps","state","shared","rot"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n        (2 * (radius * radius))\n    );\n\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n    console.log(this.props);\n    var angle = this.getAngle();\n    // console.log(\"ANGLE: \" + angle)\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    var timerLoop = (360 / angularSpeed) * 1000;\n\n    // rotate circle initially to loop rotation\n    this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n\n      this.circle.rotate(angleDiff);\n      if (\n        timerInit - 10 < frame.time &&\n        frame.time < timerInit + 10 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound, this.props.color));\n      } else if (\n        frame.time % timerLoop < timerInit + 20 &&\n        frame.time % timerLoop > timerInit - 20 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color){\n      this.circle.x(this.props.x)\n      this.circle.y(this.props.y)\n      this.circle.offset({x:this.props.offset.x, y:this.props.offset.y})\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        \n      } else {\n        this.anim.isRunning() && this.anim.stop();\n        // on pause, update the rotation value of the loop in the store\n        this.props.dispatch(\n          updateLoop(this.props.attachedLoop, this.circle.rotation())\n        );\n      }\n    }\n  } \n\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active){\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b){\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++){\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop){\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x-a;\n        var diffY = y-b;\n        var dist = Math.sqrt((diffX*diffX)+(diffY*diffY));\n        if (dist < min){\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n    }\n    }\n    return ret;\n  }\n\n  // find new offset values for snap, depending on rotation\n  findTrueOffset(offX, offY, angle){\n\n    var originalAngle = Math.atan2(offX, offY);\n    var angleRad = angle * (Math.PI/180);\n    var newAngle = originalAngle - angleRad;\n    var dist = Math.sqrt((offX*offX)+(offY*offY))\n    const offX2 = Math.sin(newAngle) * dist;\n    const offY2 = Math.cos(newAngle) * dist ;\n    return {x: offX2, y: offY2}\n  }\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI/180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    \n    if (loopToSnap){\n      console.log(\"LSNAP in TK: \" + loopToSnap.index)\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter)\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y)\n      console.log(\"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop)\n      if( !this.props.playing){\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          0\n        )\n      );\n        }\n    }\n  }\n\n  handleDragStart(){\n    console.log(\"zIndex: \" + this.circle.zIndex())\n    // move current tone above all of the others\n    this.circle.zIndex(this.props.tones.length)\n    // for all tones, if sound null make them visible on drag\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true){\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5))\n      }\n    }\n  }\n\n  \n\n  handleDragEnd(){\n\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation())\n    \n    // new x and y are coord at original\n    var newX = circX-trueOff.x;\n    var newY = circY-trueOff.y;\n\n    this.snap(newX, newY)\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true){\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5))\n      }\n    }\n    // this.props.dispatch(deleteTone(this.props.id));\n    this.props.dispatch(replaceTone(this.props.id, this.cx, this.cy, \"transparent\", \"#fff\", 1.5, this.props.offset.x, (this.props.offset.y), this.props.attachedLoop, 20, null, loopRotation))\n  }\n\n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragEnd={this.handleDragEnd}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}