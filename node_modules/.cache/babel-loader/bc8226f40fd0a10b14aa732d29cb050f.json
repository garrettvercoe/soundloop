{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var x1 = this.props.position.x - this.props.offset.x;\n    var y1 = this.props.position.y - this.props.offset.y;\n    var x2 = this.props.position.x;\n    var y2 = this.props.position.y - this.props.radius;\n    return Math.acos((2 * (this.props.radius * this.props.radius) - Math.abs(Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)))) / (2 * (this.props.radius * this.props.radius)));\n  }\n\n  componentDidMount() {\n    var angularSpeed = 180;\n    console.log(this.props.position.x);\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n      console.log(frame.time);\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y // draggable\n      ,\n      fill: this.props.color,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","ToneKonva","Component","constructor","props","state","isDragging","active","getAngle","bind","x1","position","x","offset","y1","y","x2","y2","radius","Math","acos","abs","sqrt","componentDidMount","angularSpeed","console","log","anim","Animation","frame","angleDiff","timeDiff","circle","rotate","time","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","render","color","node","setState","e","target","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var x1 = this.props.position.x - this.props.offset.x;\n    var y1 = this.props.position.y - this.props.offset.y;\n    var x2 = this.props.position.x;\n    var y2 = this.props.position.y - this.props.radius;\n    return Math.acos(\n      (2 * (this.props.radius * this.props.radius) -\n        Math.abs(Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)))) /\n        (2 * (this.props.radius * this.props.radius))\n    );\n  }\n\n  componentDidMount() {\n    var angularSpeed = 180;\n    console.log(this.props.position.x);\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n      console.log(frame.time);\n    }, this.circle.getLayer());\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        // draggable\n        fill={this.props.color}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}