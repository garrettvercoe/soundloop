{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/MountedTones.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Layer, Group } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport ToneKonva from \"./ToneKonva\";\n\nclass MountedTones extends React.Component {\n  componentDidMount() {\n    console.log(\"CHILD: \" + JSON.stringify(this.layer.children));\n    console.log(\"GROUP: \" + this.gruppe);\n    this.gruppe.rotate(2); // console.log(\"CHILD1: \" + this.child1)\n  }\n\n  render() {\n    return React.createElement(Layer, {\n      ref: node => {\n        this.layer = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(Group, {\n      ref: node => {\n        this.gruppe = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, this.props.tones.filter(item => item.attachedLoop = 0).map(item => {\n      return React.createElement(ToneKonva, {\n        color: item.color,\n        x: this.props.center.x,\n        y: this.props.center.y,\n        offset: item.offset,\n        radius: item.radius,\n        attachedLoop: item.attachedLoop,\n        sound: item.sound,\n        duration: item.duration,\n        strokeWidth: item.strokeWidth,\n        id: item.id,\n        rotation: item.rotation,\n        ref: node => {\n          this.child = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    tones: state.tones,\n    loops: state.loops,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(MountedTones);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/MountedTones.js"],"names":["React","Layer","Group","connect","ToneKonva","MountedTones","Component","componentDidMount","console","log","JSON","stringify","layer","children","gruppe","rotate","render","node","props","tones","filter","item","attachedLoop","map","color","center","x","y","offset","radius","sound","duration","strokeWidth","id","rotation","child","mapStateToProps","state","loops","shared"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,aAA7B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AACzCC,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYC,IAAI,CAACC,SAAL,CAAe,KAAKC,KAAL,CAAWC,QAA1B,CAAxB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAY,KAAKK,MAA7B;AACA,SAAKA,MAAL,CAAYC,MAAZ,CAAmB,CAAnB,EAHiB,CAIjB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAEP,WACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEC,IAAI,IAAI;AAAE,aAAKL,KAAL,GAAaK,IAAb;AAAoB,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,IAAI,IAAI;AAAE,aAAKH,MAAL,GAAcG,IAAd;AAAqB,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAmBC,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACC,YAAL,GAAoB,CAApD,EAAuDC,GAAvD,CAA2DF,IAAI,IAAI;AAClE,aACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAEA,IAAI,CAACG,KADd;AAEE,QAAA,CAAC,EAAE,KAAKN,KAAL,CAAWO,MAAX,CAAkBC,CAFvB;AAGE,QAAA,CAAC,EAAE,KAAKR,KAAL,CAAWO,MAAX,CAAkBE,CAHvB;AAIE,QAAA,MAAM,EAAEN,IAAI,CAACO,MAJf;AAKE,QAAA,MAAM,EAAEP,IAAI,CAACQ,MALf;AAME,QAAA,YAAY,EAAER,IAAI,CAACC,YANrB;AAOE,QAAA,KAAK,EAAED,IAAI,CAACS,KAPd;AAQE,QAAA,QAAQ,EAAET,IAAI,CAACU,QARjB;AASE,QAAA,WAAW,EAAEV,IAAI,CAACW,WATpB;AAUE,QAAA,EAAE,EAAEX,IAAI,CAACY,EAVX;AAWE,QAAA,QAAQ,EAAEZ,IAAI,CAACa,QAXjB;AAYE,QAAA,GAAG,EAAEjB,IAAI,IAAI;AAAE,eAAKkB,KAAL,GAAalB,IAAb;AAAoB,SAZrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAgBD,KAjBA,CAnBD,CADF,CADF;AA0CD;;AApDwC;;AAuD3C,SAASmB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLlB,IAAAA,KAAK,EAAEkB,KAAK,CAAClB,KADR;AAELmB,IAAAA,KAAK,EAAED,KAAK,CAACC,KAFR;AAGLb,IAAAA,MAAM,EAAEY,KAAK,CAACE,MAAN,CAAad;AAHhB,GAAP;AAKD;;AAED,eAAetB,OAAO,CAACiC,eAAD,CAAP,CAAyB/B,YAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Layer, Group } from \"react-konva\";\n\nimport { connect } from \"react-redux\";\nimport ToneKonva from \"./ToneKonva\";\n\nclass MountedTones extends React.Component {\n  componentDidMount(){\n    console.log(\"CHILD: \" + JSON.stringify(this.layer.children))\n    console.log(\"GROUP: \" + this.gruppe)\n    this.gruppe.rotate(2)\n    // console.log(\"CHILD1: \" + this.child1)\n  }\n\n  render() {\n\n    return (\n      <Layer ref={node => { this.layer = node; }}>\n        <Group ref={node => { this.gruppe = node; }}>\n        {/* {this.props.tones.map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })} */}\n        {this.props.tones.filter(item => item.attachedLoop = 0).map(item => {\n          return (\n            <ToneKonva\n              color={item.color}\n              x={this.props.center.x}\n              y={this.props.center.y}\n              offset={item.offset}\n              radius={item.radius}\n              attachedLoop={item.attachedLoop}\n              sound={item.sound}\n              duration={item.duration}\n              strokeWidth={item.strokeWidth}\n              id={item.id}\n              rotation={item.rotation}\n              ref={node => { this.child = node; }}\n            />\n          );\n        })}\n        </Group>\n      </Layer>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    tones: state.tones,\n    loops: state.loops,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(MountedTones);\n"]},"metadata":{},"sourceType":"module"}