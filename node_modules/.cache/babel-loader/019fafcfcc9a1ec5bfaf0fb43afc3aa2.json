{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var radius = window.innerHeight * (2 / 3) / 2;\n    var x1 = this.props.x - this.props.offset.x;\n    var y1 = this.props.y + this.props.offset.y;\n    var x2 = this.props.x;\n    var y2 = this.props.y + radius;\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed; //var angularSpeed = 75;\n\n    var angle = this.getAngle();\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000;\n    this.circle.opacity((this.circle.rotation() + angle) % 360 / 1080 + 0.66);\n    var timerLoop = 360 / angularSpeed * 1000;\n    var played = false;\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n      this.circle.opacity((this.circle.rotation() + angle) % 360 / 1080 + 0.66);\n\n      if (!played && timerInit - 10 < frame.time && frame.time < timerInit + 10) {\n        this.props.dispatch(playTone(this.props.sound));\n        played = true;\n      } else if (played && frame.time % timerLoop < timerInit + 20 && frame.time % timerLoop > timerInit) {\n        this.props.dispatch(playTone(this.props.sound));\n      } else {\n        this.circle.fill(this.props.color);\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      draggable: true,\n      fill: this.props.color,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    playing: state.shared.playing,\n    loops: state.loops\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","playTone","ToneKonva","Component","constructor","props","state","isDragging","active","getAngle","bind","radius","window","innerHeight","x1","x","offset","y1","y","x2","y2","rad","Math","acos","abs","deg","PI","componentDidMount","angularSpeed","loops","attachedLoop","speed","angle","timerInit","circle","opacity","rotation","timerLoop","played","anim","Animation","frame","angleDiff","timeDiff","rotate","time","dispatch","sound","fill","color","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","render","node","setState","e","target","mapStateToProps","console","log","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var radius = (window.innerHeight * (2 / 3)) / 2;\n\n    var x1 = this.props.x - this.props.offset.x;\n    var y1 = this.props.y + this.props.offset.y;\n    var x2 = this.props.x;\n    var y2 = this.props.y + radius;\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n        (2 * (radius * radius))\n    );\n\n    var deg = rad * (180 / Math.PI);\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n    var angle = this.getAngle();\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    this.circle.opacity(((this.circle.rotation() + angle) % 360) / 1080 + 0.66);\n    var timerLoop = (360 / angularSpeed) * 1000;\n\n    var played = false;\n\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n\n      this.circle.opacity(\n        ((this.circle.rotation() + angle) % 360) / 1080 + 0.66\n      );\n      if (\n        !played &&\n        timerInit - 10 < frame.time &&\n        frame.time < timerInit + 10\n      ) {\n        this.props.dispatch(playTone(this.props.sound));\n        played = true;\n      } else if (\n        played &&\n        frame.time % timerLoop < timerInit + 20 &&\n        frame.time % timerLoop > timerInit\n      ) {\n        this.props.dispatch(playTone(this.props.sound));\n      } else {\n        this.circle.fill(this.props.color);\n      }\n    }, this.circle.getLayer());\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        draggable={true}\n        fill={this.props.color}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}