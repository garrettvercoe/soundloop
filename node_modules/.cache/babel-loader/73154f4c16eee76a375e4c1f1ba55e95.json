{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/LoopKonva.js\";\nimport React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nclass LoopKonva extends React.Component {\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.mode) {} else {\n      var numTones = Math.pow(2, 5 - this.props.id);\n      var interval = 2 * Math.PI / numTones;\n      var currAngle = 0;\n\n      for (var i = 0; i < numTones; i++) {\n        var coords = this.findAngleCoord(this.props.center.x, this.props.center.y, currAngle, this.props.radius);\n        console.log(coords);\n        this.props.dispatch(addTone(\"transparent\", \"#fff\", 1.5, coords.x - this.props.center.x, coords.y - this.props.center.y, this.props.id, this.props.shared.center.y / 30, null, 0));\n        currAngle = currAngle + interval;\n      }\n    }\n  }\n\n  render() {\n    console.log(\"LOOP ID: \" + this.props.id);\n    return React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: this.props.radius,\n      fill: \"transparent\",\n      stroke: this.props.stroke,\n      strokeWidth: 1.5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    shared: state.shared,\n    mode: state.shared.mode\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/LoopKonva.js"],"names":["React","Circle","connect","addTone","LoopKonva","Component","findAngleCoord","cx","cy","angle","distance","x2","Math","cos","y2","sin","x","y","componentDidMount","props","mode","numTones","pow","id","interval","PI","currAngle","i","coords","center","radius","console","log","dispatch","shared","render","stroke","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AACtCC,EAAAA,cAAc,CAACC,EAAD,EAAKC,EAAL,EAASC,KAAT,EAAgBC,QAAhB,EAA0B;AACtC,UAAMC,EAAE,GAAGJ,EAAE,GAAGK,IAAI,CAACC,GAAL,CAASJ,KAAT,IAAkBC,QAAlC;AACA,UAAMI,EAAE,GAAGN,EAAE,GAAGI,IAAI,CAACG,GAAL,CAASN,KAAT,IAAkBC,QAAlC;AACA,WAAO;AAAEM,MAAAA,CAAC,EAAEL,EAAL;AAASM,MAAAA,CAAC,EAAEH;AAAZ,KAAP;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKC,KAAL,CAAWC,IAAf,EAAoB,CAEnB,CAFD,MAEO;AACP,UAAIC,QAAQ,GAAGT,IAAI,CAACU,GAAL,CAAS,CAAT,EAAY,IAAI,KAAKH,KAAL,CAAWI,EAA3B,CAAf;AACA,UAAIC,QAAQ,GAAI,IAAIZ,IAAI,CAACa,EAAV,GAAgBJ,QAA/B;AACA,UAAIK,SAAS,GAAG,CAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAApB,EAA8BM,CAAC,EAA/B,EAAmC;AACjC,YAAIC,MAAM,GAAG,KAAKtB,cAAL,CACX,KAAKa,KAAL,CAAWU,MAAX,CAAkBb,CADP,EAEX,KAAKG,KAAL,CAAWU,MAAX,CAAkBZ,CAFP,EAGXS,SAHW,EAIX,KAAKP,KAAL,CAAWW,MAJA,CAAb;AAMAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,aAAKT,KAAL,CAAWc,QAAX,CACE9B,OAAO,CACL,aADK,EAEL,MAFK,EAGL,GAHK,EAILyB,MAAM,CAACZ,CAAP,GAAW,KAAKG,KAAL,CAAWU,MAAX,CAAkBb,CAJxB,EAKLY,MAAM,CAACX,CAAP,GAAW,KAAKE,KAAL,CAAWU,MAAX,CAAkBZ,CALxB,EAML,KAAKE,KAAL,CAAWI,EANN,EAOJ,KAAKJ,KAAL,CAAWe,MAAX,CAAkBL,MAAlB,CAAyBZ,CAA1B,GAA6B,EAPxB,EAQL,IARK,EASL,CATK,CADT;AAaAS,QAAAA,SAAS,GAAGA,SAAS,GAAGF,QAAxB;AACD;AACF;AACF;;AAECW,EAAAA,MAAM,GAAG;AACPJ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAc,KAAKb,KAAL,CAAWI,EAArC;AACA,WACE,oBAAC,MAAD;AACE,MAAA,CAAC,EAAE,KAAKJ,KAAL,CAAWU,MAAX,CAAkBb,CADvB;AAEE,MAAA,CAAC,EAAE,KAAKG,KAAL,CAAWU,MAAX,CAAkBZ,CAFvB;AAGE,MAAA,MAAM,EAAE,KAAKE,KAAL,CAAWW,MAHrB;AAIE,MAAA,IAAI,EAAE,aAJR;AAKE,MAAA,MAAM,EAAE,KAAKX,KAAL,CAAWiB,MALrB;AAME,MAAA,WAAW,EAAE,GANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AApDqC;;AAuDxC,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLT,IAAAA,MAAM,EAAES,KAAK,CAACJ,MAAN,CAAaL,MADhB;AAELK,IAAAA,MAAM,EAAEI,KAAK,CAACJ,MAFT;AAGLd,IAAAA,IAAI,EAAEkB,KAAK,CAACJ,MAAN,CAAad;AAHd,GAAP;AAKD;;AAED,eAAelB,OAAO,CAACmC,eAAD,CAAP,CAAyBjC,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nclass LoopKonva extends React.Component {\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  componentDidMount() {\n    if (this.props.mode){\n\n    } else {\n    var numTones = Math.pow(2, 5 - this.props.id);\n    var interval = (2 * Math.PI) / numTones;\n    var currAngle = 0;\n    for (var i = 0; i < numTones; i++) {\n      var coords = this.findAngleCoord(\n        this.props.center.x,\n        this.props.center.y,\n        currAngle,\n        this.props.radius\n      );\n      console.log(coords);\n      this.props.dispatch(\n        addTone(\n          \"transparent\",\n          \"#fff\",\n          1.5,\n          coords.x - this.props.center.x,\n          coords.y - this.props.center.y,\n          this.props.id,\n          (this.props.shared.center.y)/30,\n          null,\n          0\n        )\n      );\n      currAngle = currAngle + interval;\n    }\n  }\n}\n\n  render() {\n    console.log(\"LOOP ID: \" + this.props.id);\n    return (\n      <Circle\n        x={this.props.center.x}\n        y={this.props.center.y}\n        radius={this.props.radius}\n        fill={\"transparent\"}\n        stroke={this.props.stroke}\n        strokeWidth={1.5}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    shared: state.shared,\n    mode: state.shared.mode\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);\n"]},"metadata":{},"sourceType":"module"}