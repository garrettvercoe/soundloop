{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nfunction toDegrees(angle) {\n  return angle * (180 / Math.PI);\n}\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // add loop ID\n    var acceptableRange = 50;\n    var radii = this.props.loops;\n    var id = 0;\n    var curr = radii[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < radii.length; i++) {\n      var newdiff = Math.abs(distToCenter - radii[i].radius);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = radii[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var a = y1 - cy;\n    var b = x1 - cx; //c\n\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    console.log(\"loopToSnap: \" + loopToSnap);\n\n    if (loopToSnap) {\n      var snapCoords = this.findSnapCoordinates(a, b, cx, cy, loopToSnap.value);\n      var newA = (snapCoords.y - cy) * -1;\n      var newB = snapCoords.x - cx;\n      this.props.dispatch(addTone(cx, cy, this.props.color, newA, newB, 0, 20, 300));\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    this.snap(x, y);\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    loops: state.loops\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","addTone","toDegrees","angle","Math","PI","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","distToCenter","acceptableRange","radii","loops","id","curr","radius","diff","abs","i","length","newdiff","index","value","x1","y1","cx","cy","distance","atan2","x2","cos","y2","sin","window","innerWidth","innerHeight","a","b","sqrt","loopToSnap","console","log","snapCoords","newA","newB","dispatch","color","rect","current","getBoundingClientRect","left","top","setState","render","borderRadius","border","borderColor","backgroundColor","width","height","position","outline","pointerEvents","zIndex","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nfunction toDegrees(angle) {\n  return angle * (180 / Math.PI);\n}\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // add loop ID\n    var acceptableRange = 50;\n    var radii = this.props.loops;\n    var id = 0;\n    var curr = radii[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < radii.length; i++) {\n      var newdiff = Math.abs(distToCenter - radii[i].radius);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = radii[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n\n    var a = y1 - cy;\n    var b = x1 - cx;\n    //c\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    console.log(\"loopToSnap: \" + loopToSnap)\n    if (loopToSnap) {\n      var snapCoords = this.findSnapCoordinates(a, b, cx, cy, loopToSnap.value);\n\n      var newA = (snapCoords.y - cy) * -1;\n      var newB = snapCoords.x - cx;\n\n      this.props.dispatch(\n        addTone(\n          cx,\n          cy,\n          this.props.color,\n          newA,\n          newB,\n\n          0,\n          20,\n          300\n        )\n      );\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n\n    this.snap(x, y);\n\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <Draggable position={this.state.deltaPosition} onStop={this.handleStop}>\n          <button\n            ref={this.selector}\n            className=\"hover-shadow\"\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n              border: \"none\",\n              outline: \"none\"\n            }}\n          />\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    loops: state.loops\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}