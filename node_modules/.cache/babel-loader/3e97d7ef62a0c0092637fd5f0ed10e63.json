{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { addTone, updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0; // console.log(\"a: \" + a)\n    // console.log(\"b: \" + b)\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.props.tones[i].position.x - this.props.tones[i].offset.x; // console.log(\"x: \" + x)\n\n      var y = this.props.tones[i].position.y - this.props.tones[i].offset.y; // console.log(\"y: \" + y)\n\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY); // console.log(\"distance for \" + i + \": \" + dist)\n      // could also set min to this.props.tones[i].id but since id is 0++ they're the same\n\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n\n    return ret;\n  }\n\n  findFakeCoordinates(angle, distance) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var angleRad = angle * (Math.PI / 180);\n    const x2 = cx - Math.cos(angleRad) * distance;\n    const y2 = cy + Math.sin(angleRad) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    console.log(\"x1: \" + x1);\n    console.log(\"y1: \" + y1);\n    console.log(\"cy: \" + cy); // calculate virtual location with rotation\n    // first calculate distance\n\n    var a = y1 - cy;\n    var b = x1 - cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LOOPSNAP: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(angle, distToCenter);\n      console.log(\"FAKEX: \" + fakeCoords.x);\n      console.log(\"FAKEY: \" + fakeCoords.y); //var loopToSnap = this.findClosestLoop(distToCenter);\n      //if (loopToSnap) {\n      // for each point in loopToSnap, dispatch on coord of pts\n      // replace findSnapCoordinats with findClosestLoopPt\n      //var snapCoords = this.findSnapCoordinates(a, b, cx, cy, loopToSnap.value);\n      //var snapCoords = this.findClosestLoopPt(a, b, loopToSnap.index)\n\n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y); //var intervalId = this.findClosestInterval(x1, y1)\n\n      console.log(\"CLOSEST TONE: \" + intervalId); // var newA = (snapCoords.y - cy) * -1;\n      // var newB = snapCoords.x - cx;\n\n      this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, 0));\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    this.snap(x, y);\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  handleClick() {\n    this.props.dispatch(playTone(this.props.sound));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onClick: this.handleClick,\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    loops: state.loops,\n    tones: state.tones\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","addTone","updateTone","playTone","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","handleClick","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","newdiff","index","value","x1","y1","cx","cy","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","min","ret","tones","position","offset","diffX","diffY","dist","sqrt","findFakeCoordinates","window","innerWidth","innerHeight","angleRad","PI","console","log","loopToSnap","rotation","fakeCoords","intervalId","dispatch","color","sound","rect","current","getBoundingClientRect","left","top","setState","render","borderRadius","border","borderColor","backgroundColor","width","height","outline","pointerEvents","zIndex","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { addTone, updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b){\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    // console.log(\"a: \" + a)\n    // console.log(\"b: \" + b)\n    for (var i = 0; i < this.props.tones.length; i++){\n      // need to compare pt + or - offset\n      var x = this.props.tones[i].position.x - this.props.tones[i].offset.x;\n      // console.log(\"x: \" + x)\n      var y = this.props.tones[i].position.y - this.props.tones[i].offset.y;\n      // console.log(\"y: \" + y)\n      var diffX = x-a;\n      var diffY = y-b;\n      var dist = Math.sqrt((diffX*diffX)+(diffY*diffY));\n      // console.log(\"distance for \" + i + \": \" + dist)\n      // could also set min to this.props.tones[i].id but since id is 0++ they're the same\n      if (dist < min){\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n      \n    }\n    return ret;\n  }\n\n  findFakeCoordinates(angle, distance) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var angleRad = angle * (Math.PI/180);\n    const x2 = cx - Math.cos(angleRad) * distance;\n    const y2 = cy + Math.sin(angleRad) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    console.log(\"x1: \" + x1)\n    console.log(\"y1: \" + y1)\n    console.log(\"cy: \" + cy)\n    \n    \n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - cy;\n    var b = x1 - cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    if (loopToSnap){\n    console.log(\"LOOPSNAP: \" + loopToSnap.index)\n    var angle = this.props.loops[loopToSnap.index].rotation;\n    var fakeCoords = this.findFakeCoordinates(angle, distToCenter)\n    console.log(\"FAKEX: \" + fakeCoords.x)\n    console.log(\"FAKEY: \" + fakeCoords.y)\n    \n    //var loopToSnap = this.findClosestLoop(distToCenter);\n    //if (loopToSnap) {\n      // for each point in loopToSnap, dispatch on coord of pts\n      // replace findSnapCoordinats with findClosestLoopPt\n      //var snapCoords = this.findSnapCoordinates(a, b, cx, cy, loopToSnap.value);\n      //var snapCoords = this.findClosestLoopPt(a, b, loopToSnap.index)\n\n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y)\n      //var intervalId = this.findClosestInterval(x1, y1)\n      console.log(\"CLOSEST TONE: \" + intervalId)\n      // var newA = (snapCoords.y - cy) * -1;\n      // var newB = snapCoords.x - cx;\n\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          0\n        )\n      );\n        }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    \n\n    const x = this.rect.left;\n    const y = this.rect.top;\n\n    this.snap(x, y);\n\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  handleClick() {\n    this.props.dispatch(playTone(this.props.sound));\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <Draggable position={this.state.deltaPosition} onStop={this.handleStop}>\n          <button\n            ref={this.selector}\n            className=\"hover-shadow\"\n            onClick={this.handleClick}\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n              border: \"none\",\n              outline: \"none\"\n            }}\n          />\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    loops: state.loops,\n    tones: state.tones\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}