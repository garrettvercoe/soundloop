{"ast":null,"code":"import _objectSpread from \"/Users/ericduong/Documents/repos/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_LOOP, UPDATE_LOOP, ACTIVATE_LOOP, UPDATE_LOOP_SPEED } from \"../actions/loops\";\nimport { TRASH_ALL_LINEAR, TRASH_ALL_ANGULAR } from \"../actions/shared\";\nlet nextLoopId = 0;\nexport default function loops(state = [], action) {\n  switch (action.type) {\n    case ADD_LOOP:\n      return [...state, {\n        id: nextLoopId++,\n        radius: action.radius,\n        rotation: action.rotation,\n        active: action.active\n      }];\n\n    case TRASH_ALL_LINEAR:\n      nextLoopId = 0;\n      return [];\n\n    case TRASH_ALL_ANGULAR:\n      nextLoopId = 0;\n      return [];\n\n    case UPDATE_LOOP:\n      return [...state.slice(0, action.id), _objectSpread({}, state[action.id], {\n        rotation: action.rotation\n      }), ...state.slice(action.id + 1)];\n\n    case UPDATE_LOOP_SPEED:\n      return [...state.slice(0, action.id), _objectSpread({}, state[action.id], {\n        speed: action.speed\n      }), ...state.slice(action.id + 1)];\n\n    case ACTIVATE_LOOP:\n      return [...state.slice(0, action.id), _objectSpread({}, state[action.id], {\n        active: action.active,\n        stroke: action.stroke\n      }), ...state.slice(action.id + 1)];\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/reducers/loops.js"],"names":["ADD_LOOP","UPDATE_LOOP","ACTIVATE_LOOP","UPDATE_LOOP_SPEED","TRASH_ALL_LINEAR","TRASH_ALL_ANGULAR","nextLoopId","loops","state","action","type","id","radius","rotation","active","slice","speed","stroke"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,aAAhC,EAA+CC,iBAA/C,QAAwE,kBAAxE;AAEA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,mBAApD;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,eAAe,SAASC,KAAT,CAAeC,KAAK,GAAG,EAAvB,EAA2BC,MAA3B,EAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,QAAL;AACE,aAAO,CACL,GAAGQ,KADE,EAEL;AACEG,QAAAA,EAAE,EAAEL,UAAU,EADhB;AAEEM,QAAAA,MAAM,EAAEH,MAAM,CAACG,MAFjB;AAGEC,QAAAA,QAAQ,EAAEJ,MAAM,CAACI,QAHnB;AAIEC,QAAAA,MAAM,EAAEL,MAAM,CAACK;AAJjB,OAFK,CAAP;;AAUF,SAAKV,gBAAL;AACEE,MAAAA,UAAU,GAAG,CAAb;AACA,aAAO,EAAP;;AAEF,SAAKD,iBAAL;AACEC,MAAAA,UAAU,GAAG,CAAb;AACA,aAAO,EAAP;;AAEF,SAAKL,WAAL;AACE,aAAO,CACL,GAAGO,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeN,MAAM,CAACE,EAAtB,CADE,oBAGAH,KAAK,CAACC,MAAM,CAACE,EAAR,CAHL;AAIHE,QAAAA,QAAQ,EAAEJ,MAAM,CAACI;AAJd,UAML,GAAGL,KAAK,CAACO,KAAN,CAAYN,MAAM,CAACE,EAAP,GAAY,CAAxB,CANE,CAAP;;AASA,SAAKR,iBAAL;AACI,aAAO,CACL,GAAGK,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeN,MAAM,CAACE,EAAtB,CADE,oBAGAH,KAAK,CAACC,MAAM,CAACE,EAAR,CAHL;AAIHK,QAAAA,KAAK,EAAEP,MAAM,CAACO;AAJX,UAML,GAAGR,KAAK,CAACO,KAAN,CAAYN,MAAM,CAACE,EAAP,GAAY,CAAxB,CANE,CAAP;;AASN,SAAKT,aAAL;AACE,aAAO,CACL,GAAGM,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeN,MAAM,CAACE,EAAtB,CADE,oBAGAH,KAAK,CAACC,MAAM,CAACE,EAAR,CAHL;AAIHG,QAAAA,MAAM,EAAEL,MAAM,CAACK,MAJZ;AAKHG,QAAAA,MAAM,EAAER,MAAM,CAACQ;AALZ,UAOL,GAAGT,KAAK,CAACO,KAAN,CAAYN,MAAM,CAACE,EAAP,GAAY,CAAxB,CAPE,CAAP;;AAUF;AACE,aAAOH,KAAP;AApDJ;AAsDD","sourcesContent":["import { ADD_LOOP, UPDATE_LOOP, ACTIVATE_LOOP, UPDATE_LOOP_SPEED } from \"../actions/loops\";\n\nimport { TRASH_ALL_LINEAR, TRASH_ALL_ANGULAR } from \"../actions/shared\";\nlet nextLoopId = 0;\nexport default function loops(state = [], action) {\n  switch (action.type) {\n    case ADD_LOOP:\n      return [\n        ...state,\n        {\n          id: nextLoopId++,\n          radius: action.radius,\n          rotation: action.rotation,\n          active: action.active\n        }\n      ];\n\n    case TRASH_ALL_LINEAR:\n      nextLoopId = 0;\n      return [];\n\n    case TRASH_ALL_ANGULAR:\n      nextLoopId = 0;\n      return [];\n    \n    case UPDATE_LOOP:\n      return [\n        ...state.slice(0, action.id),\n        {\n          ...state[action.id],\n          rotation: action.rotation\n        },\n        ...state.slice(action.id + 1)\n      ];\n\n      case UPDATE_LOOP_SPEED:\n          return [\n            ...state.slice(0, action.id),\n            {\n              ...state[action.id],\n              speed: action.speed\n            },\n            ...state.slice(action.id + 1)\n          ];\n\n    case ACTIVATE_LOOP:\n      return [\n        ...state.slice(0, action.id),\n        {\n          ...state[action.id],\n          active: action.active,\n          stroke: action.stroke\n        },\n        ...state.slice(action.id + 1)\n      ];\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}