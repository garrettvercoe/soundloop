{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { addTone, updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nconst cursor = {\n  width: \"30px\",\n  height: \"30px\",\n  background: \"red\",\n  borderRadius: \"50%\",\n  position: \"absolute\"\n};\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      noteSelected: false,\n      snapped: false\n    };\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  componentDidMount() {\n    this.cursor = document.querySelector(\".cursor\");\n    document.addEventListener(\"mousemove\", e => {\n      this.cursor.setAttribute(\"style\", \"top: \" + (e.pageY - 300) + \"px; left: \" + (e.pageX - 105) + \"px;\");\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.noteSelected !== this.state.noteSelected) {}\n  }\n\n  handleClick() {\n    console.log(\"CLICK SUCCESSFUL YES\");\n    this.setState({\n      noteSelected: true\n    }); // console.log(this.state);\n    // this.cursor.removeAttribute(\"background\");\n    // this.cursor.style.background = this.props.color;\n\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound));\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.cx - this.props.tones[i].offset.x;\n      var y = this.cy - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n\n    return ret;\n  }\n\n  findFakeCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y);\n      this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, 0));\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    this.snap(x, y);\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n  }\n\n  handleDrag() {\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: cursor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \" \"), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      onStart: this.handleDrag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onClick: () => this.handleClick(),\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, this.props.children))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","addTone","updateTone","playTone","cursor","width","height","background","borderRadius","position","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","noteSelected","snapped","cx","center","cy","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","handleClick","handleDrag","componentDidMount","document","querySelector","addEventListener","e","setAttribute","pageY","pageX","componentDidUpdate","prevProps","console","log","setState","playing","dispatch","sound","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","newdiff","index","value","x1","y1","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","min","ret","tones","offset","diffX","diffY","dist","sqrt","findFakeCoordinates","originalAngle","angleRad","PI","newAngle","loopToSnap","rotation","fakeCoords","intervalId","color","rect","current","getBoundingClientRect","left","top","attachedLoop","active","render","border","borderColor","backgroundColor","outline","pointerEvents","zIndex","children","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { addTone, updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nconst cursor = {\n  width: \"30px\",\n  height: \"30px\",\n  background: \"red\",\n  borderRadius: \"50%\",\n  position: \"absolute\"\n};\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      noteSelected: false,\n      snapped: false\n    };\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  componentDidMount() {\n    this.cursor = document.querySelector(\".cursor\");\n    document.addEventListener(\"mousemove\", e => {\n      this.cursor.setAttribute(\n        \"style\",\n        \"top: \" + (e.pageY - 300) + \"px; left: \" + (e.pageX - 105) + \"px;\"\n      );\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.noteSelected !== this.state.noteSelected) {\n    }\n  }\n\n  handleClick() {\n    console.log(\"CLICK SUCCESSFUL YES\");\n    this.setState({ noteSelected: true });\n    // console.log(this.state);\n    // this.cursor.removeAttribute(\"background\");\n    // this.cursor.style.background = this.props.color;\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound));\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.cx - this.props.tones[i].offset.x;\n      var y = this.cy - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n    return ret;\n  }\n\n  findFakeCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter);\n\n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y);\n\n      this.props.dispatch(\n        updateTone(intervalId, this.props.color, this.props.sound, 0)\n      );\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n\n    this.snap(x, y);\n\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (\n        this.props.tones[i].sound === null &&\n        this.props.loops[this.props.tones[i].attachedLoop].active === true\n      ) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n  }\n\n  handleDrag() {\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (\n        this.props.tones[i].sound === null &&\n        !this.props.playing &&\n        this.props.loops[this.props.tones[i].attachedLoop].active === true\n      ) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <div style={cursor}> </div>\n        <Draggable\n          position={this.state.deltaPosition}\n          onStop={this.handleStop}\n          onStart={this.handleDrag}\n        >\n          <div\n            ref={this.selector}\n            className=\"hover-shadow\"\n            onClick={() => this.handleClick()}\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n\n              border: \"none\",\n              outline: \"none\"\n            }}\n          >\n            <div className=\"note-select\">{this.props.children}</div>\n          </div>\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}