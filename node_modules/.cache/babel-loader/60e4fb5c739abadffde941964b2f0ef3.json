{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/LoopKonva.js\";\nimport React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\nimport { throwStatement } from \"@babel/types\";\nimport { updateLoopSpeed } from \"../actions/loops\";\n\nclass LoopKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.numTones = 0;\n  }\n\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.mode === \"angular\") {\n      this.numTones = 16;\n    } else if (this.props.mode === \"linear\") {\n      this.numTones = Math.pow(2, 5 - this.props.id);\n    }\n\n    var interval = 2 * Math.PI / this.numTones;\n    var currAngle = 0;\n\n    for (var i = 0; i < this.numTones; i++) {\n      var coords = this.findAngleCoord(this.props.center.x, this.props.center.y, currAngle, this.props.radius);\n      this.props.dispatch(addTone(\"transparent\", \"#fff\", 1.5, coords.x - this.props.center.x, coords.y - this.props.center.y, this.props.id, this.props.screenHeight / 50, null, 0));\n      currAngle = currAngle + interval;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.tempo !== this.props.tempo) {\n      console.log(\"UPDATED IN LOOP\");\n      console.log(\"Radius is: \" + this.props.radius);\n      console.log(\"Speed is: \" + this.props.speed);\n      console.log(\"ID is: \" + this.props.id); // this.props.dispatch(updateLoopSpeed())\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: this.props.radius,\n      fill: \"transparent\",\n      stroke: this.props.stroke,\n      strokeWidth: 1.5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    shared: state.shared,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/LoopKonva.js"],"names":["React","Circle","connect","addTone","throwStatement","updateLoopSpeed","LoopKonva","Component","constructor","props","numTones","findAngleCoord","cx","cy","angle","distance","x2","Math","cos","y2","sin","x","y","componentDidMount","mode","pow","id","interval","PI","currAngle","i","coords","center","radius","dispatch","screenHeight","componentDidUpdate","prevProps","tempo","console","log","speed","render","stroke","mapStateToProps","state","shared"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,eAAT,QAAgC,kBAAhC;;AAEA,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgB,CAAhB;AACD;;AAEDC,EAAAA,cAAc,CAACC,EAAD,EAAKC,EAAL,EAASC,KAAT,EAAgBC,QAAhB,EAA0B;AACtC,UAAMC,EAAE,GAAGJ,EAAE,GAAGK,IAAI,CAACC,GAAL,CAASJ,KAAT,IAAkBC,QAAlC;AACA,UAAMI,EAAE,GAAGN,EAAE,GAAGI,IAAI,CAACG,GAAL,CAASN,KAAT,IAAkBC,QAAlC;AACA,WAAO;AAAEM,MAAAA,CAAC,EAAEL,EAAL;AAASM,MAAAA,CAAC,EAAEH;AAAZ,KAAP;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKd,KAAL,CAAWe,IAAX,KAAoB,SAAxB,EAAkC;AAChC,WAAKd,QAAL,GAAgB,EAAhB;AACD,KAFD,MAEO,IAAI,KAAKD,KAAL,CAAWe,IAAX,KAAoB,QAAxB,EAAiC;AACtC,WAAKd,QAAL,GAAgBO,IAAI,CAACQ,GAAL,CAAS,CAAT,EAAY,IAAI,KAAKhB,KAAL,CAAWiB,EAA3B,CAAhB;AACD;;AACD,QAAIC,QAAQ,GAAI,IAAIV,IAAI,CAACW,EAAV,GAAgB,KAAKlB,QAApC;AACA,QAAImB,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKpB,QAAzB,EAAmCoB,CAAC,EAApC,EAAwC;AACtC,UAAIC,MAAM,GAAG,KAAKpB,cAAL,CACX,KAAKF,KAAL,CAAWuB,MAAX,CAAkBX,CADP,EAEX,KAAKZ,KAAL,CAAWuB,MAAX,CAAkBV,CAFP,EAGXO,SAHW,EAIX,KAAKpB,KAAL,CAAWwB,MAJA,CAAb;AAOA,WAAKxB,KAAL,CAAWyB,QAAX,CACI/B,OAAO,CACL,aADK,EAEL,MAFK,EAGL,GAHK,EAIL4B,MAAM,CAACV,CAAP,GAAW,KAAKZ,KAAL,CAAWuB,MAAX,CAAkBX,CAJxB,EAKLU,MAAM,CAACT,CAAP,GAAW,KAAKb,KAAL,CAAWuB,MAAX,CAAkBV,CALxB,EAML,KAAKb,KAAL,CAAWiB,EANN,EAOL,KAAKjB,KAAL,CAAW0B,YAAX,GAAwB,EAPnB,EAQL,IARK,EASL,CATK,CADX;AAaAN,MAAAA,SAAS,GAAGA,SAAS,GAAGF,QAAxB;AACD;AACF;;AAEDS,EAAAA,kBAAkB,CAACC,SAAD,EAAW;AAC3B,QAAIA,SAAS,CAACC,KAAV,KAAoB,KAAK7B,KAAL,CAAW6B,KAAnC,EAAyC;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgB,KAAK/B,KAAL,CAAWwB,MAAvC;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAe,KAAK/B,KAAL,CAAWgC,KAAtC;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAY,KAAK/B,KAAL,CAAWiB,EAAnC,EAJuC,CAKvC;AACD;AACF;;AAEDgB,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AACE,MAAA,CAAC,EAAE,KAAKjC,KAAL,CAAWuB,MAAX,CAAkBX,CADvB;AAEE,MAAA,CAAC,EAAE,KAAKZ,KAAL,CAAWuB,MAAX,CAAkBV,CAFvB;AAGE,MAAA,MAAM,EAAE,KAAKb,KAAL,CAAWwB,MAHrB;AAIE,MAAA,IAAI,EAAE,aAJR;AAKE,MAAA,MAAM,EAAE,KAAKxB,KAAL,CAAWkC,MALrB;AAME,MAAA,WAAW,EAAE,GANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AAnEqC;;AAsExC,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLb,IAAAA,MAAM,EAAEa,KAAK,CAACC,MAAN,CAAad,MADhB;AAELc,IAAAA,MAAM,EAAED,KAAK,CAACC,MAFT;AAGLtB,IAAAA,IAAI,EAAEqB,KAAK,CAACC,MAAN,CAAatB,IAHd;AAILW,IAAAA,YAAY,EAAEU,KAAK,CAACC,MAAN,CAAaX,YAJtB;AAKLG,IAAAA,KAAK,EAAEO,KAAK,CAACC,MAAN,CAAaR;AALf,GAAP;AAOD;;AAED,eAAepC,OAAO,CAAC0C,eAAD,CAAP,CAAyBtC,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\nimport { throwStatement } from \"@babel/types\";\nimport { updateLoopSpeed } from \"../actions/loops\";\n\nclass LoopKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.numTones = 0;\n  }\n\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  componentDidMount() {\n    if (this.props.mode === \"angular\"){\n      this.numTones = 16;\n    } else if (this.props.mode === \"linear\"){\n      this.numTones = Math.pow(2, 5 - this.props.id);\n    }\n    var interval = (2 * Math.PI) / this.numTones;\n    var currAngle = 0;\n    for (var i = 0; i < this.numTones; i++) {\n      var coords = this.findAngleCoord(\n        this.props.center.x,\n        this.props.center.y,\n        currAngle,\n        this.props.radius\n      );\n        \n      this.props.dispatch(\n          addTone(\n            \"transparent\",\n            \"#fff\",\n            1.5,\n            coords.x - this.props.center.x,\n            coords.y - this.props.center.y,\n            this.props.id,\n            this.props.screenHeight/50,\n            null,\n            0\n          )\n      );\n      currAngle = currAngle + interval;\n    }\n  }\n\n  componentDidUpdate(prevProps){\n    if (prevProps.tempo !== this.props.tempo){\n      console.log(\"UPDATED IN LOOP\")\n      console.log(\"Radius is: \" + this.props.radius)\n      console.log(\"Speed is: \" + this.props.speed)\n      console.log(\"ID is: \" + this.props.id)\n      // this.props.dispatch(updateLoopSpeed())\n    }\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.center.x}\n        y={this.props.center.y}\n        radius={this.props.radius}\n        fill={\"transparent\"}\n        stroke={this.props.stroke}\n        strokeWidth={1.5}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    shared: state.shared,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);\n"]},"metadata":{},"sourceType":"module"}