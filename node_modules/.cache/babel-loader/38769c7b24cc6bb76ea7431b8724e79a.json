{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/Cord.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    //playing around with creating a sound\n    //create a synth and connect it to the master output (your speakers)\n    // var distortion = new Tone.Distortion(1.5);\n    // var tremolo = new Tone.Tremolo().start();\n    // this.synth = new Tone.PolySynth().chain(distortion, tremolo, Tone.Master);\n    //some overall compression to keep the levels in check\n    // var masterCompressor = new Tone.Compressor({\n    //   threshold: -6,\n    //   ratio: 3,\n    //   attack: 0.5,\n    //   release: 0.1\n    // });\n    // //give a little boost to the lows\n    // var lowBump = new Tone.Filter(200, \"lowshelf\");\n    //route everything through the filter\n    //and compressor before going to the speakers\n    console.log(\"volume:  \" + this.props.volume); // Tone.Master.chain(lowBump, masterCompressor);\n\n    this.synth = new Tone.PolySynth(4, Tone.Synth).toMaster();\n    var max = this.props.height / 2 - 50;\n    var interval = max / 2;\n    this.pts = [];\n    var flux = 8;\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n\n    for (var i = 0; i < 3; i++) {\n      this.pts.push(prevX);\n      this.pts.push(prevY);\n      prevX = prevX + flux;\n      prevY = prevY - interval;\n      flux = -flux;\n    } //var tl = new TimelineLite();\n\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.playing) {\n      this.tween = new Konva.Tween({\n        node: this.line,\n        duration: 0.1,\n        easing: Konva.Easings.EaseOut,\n        points: this.pts,\n        //stroke: this.line.fill(),\n        onFinish: function () {\n          this.tween.reverse();\n        } // onReset: function() {\n        //   this.line.stroke(\"#692D55\");\n        // }\n\n      });\n    }\n\n    if (this.props.volume !== prevProps.volume) {\n      Tone.Master.volume.value = this.props.volume;\n    }\n\n    if (this.props.sounds && prevProps.sounds !== this.props.sounds) {\n      if (!this.props.muted) {\n        this.synth.triggerAttackRelease(this.props.sounds[this.props.index], \"8n\");\n      }\n\n      if (this.props.playing) {\n        // this.line.fill(this.props.color);\n        this.tween.play();\n      }\n    }\n  }\n\n  render() {\n    var cordLength = this.props.height / 2 - 50;\n    var max = this.props.height / 2 - 50;\n    var interval = max / 2;\n    var pts = [];\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevY = prevY - interval;\n    }\n\n    return React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Line, {\n      points: pts,\n      stroke: \"#692D55\",\n      strokeWidth: 2,\n      tension: 0.5,\n      ref: node => {\n        this.line = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y - cordLength,\n      radius: 4,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: 11,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    muted: state.shared.muted,\n    sounds: state.cord.sounds,\n    color: state.cord.color,\n    index: state.cord.index,\n    height: state.shared.screenHeight,\n    volume: state.shared.volume\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/Cord.js"],"names":["React","Line","Layer","Circle","connect","Konva","Tone","Cord","Component","componentDidMount","console","log","props","volume","synth","PolySynth","Synth","toMaster","max","height","interval","pts","flux","prevX","center","x","prevY","y","i","push","componentDidUpdate","prevProps","playing","tween","Tween","node","line","duration","easing","Easings","EaseOut","points","onFinish","reverse","Master","value","sounds","muted","triggerAttackRelease","index","play","render","cordLength","mapStateToProps","state","shared","cord","color","screenHeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    //playing around with creating a sound\n\n    //create a synth and connect it to the master output (your speakers)\n    // var distortion = new Tone.Distortion(1.5);\n    // var tremolo = new Tone.Tremolo().start();\n    // this.synth = new Tone.PolySynth().chain(distortion, tremolo, Tone.Master);\n\n    //some overall compression to keep the levels in check\n    // var masterCompressor = new Tone.Compressor({\n    //   threshold: -6,\n    //   ratio: 3,\n    //   attack: 0.5,\n    //   release: 0.1\n    // });\n    // //give a little boost to the lows\n    // var lowBump = new Tone.Filter(200, \"lowshelf\");\n    //route everything through the filter\n    //and compressor before going to the speakers\n    console.log(\"volume:  \" + this.props.volume);\n\n    // Tone.Master.chain(lowBump, masterCompressor);\n\n    this.synth = new Tone.PolySynth(4, Tone.Synth).toMaster();\n\n    var max = this.props.height / 2 - 50;\n    var interval = max / 2;\n    this.pts = [];\n    var flux = 8;\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n    for (var i = 0; i < 3; i++) {\n      this.pts.push(prevX);\n      this.pts.push(prevY);\n      prevX = prevX + flux;\n      prevY = prevY - interval;\n      flux = -flux;\n    }\n    //var tl = new TimelineLite();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.playing) {\n      this.tween = new Konva.Tween({\n        node: this.line,\n        duration: 0.1,\n        easing: Konva.Easings.EaseOut,\n        points: this.pts,\n        //stroke: this.line.fill(),\n        onFinish: function() {\n          this.tween.reverse();\n        }\n        // onReset: function() {\n        //   this.line.stroke(\"#692D55\");\n        // }\n      });\n    }\n\n    if (this.props.volume !== prevProps.volume) {\n      Tone.Master.volume.value = this.props.volume;\n    }\n    if (this.props.sounds && prevProps.sounds !== this.props.sounds) {\n      if (!this.props.muted) {\n        this.synth.triggerAttackRelease(\n          this.props.sounds[this.props.index],\n          \"8n\"\n        );\n      }\n\n      if (this.props.playing) {\n        // this.line.fill(this.props.color);\n\n        this.tween.play();\n      }\n    }\n  }\n\n  render() {\n    var cordLength = this.props.height / 2 - 50;\n    var max = this.props.height / 2 - 50;\n    var interval = max / 2;\n    var pts = [];\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevY = prevY - interval;\n    }\n    return (\n      <Layer>\n        <Line\n          points={pts}\n          stroke=\"#692D55\"\n          strokeWidth={2}\n          tension={0.5}\n          ref={node => {\n            this.line = node;\n          }}\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y - cordLength}\n          radius={4}\n          fill=\"#692D55\"\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y}\n          radius={11}\n          fill=\"#692D55\"\n        />\n      </Layer>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    muted: state.shared.muted,\n    sounds: state.cord.sounds,\n    color: state.cord.color,\n    index: state.cord.index,\n    height: state.shared.screenHeight,\n    volume: state.shared.volume\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);\n"]},"metadata":{},"sourceType":"module"}