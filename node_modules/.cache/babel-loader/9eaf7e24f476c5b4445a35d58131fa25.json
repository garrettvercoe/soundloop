{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.angularSpeed = 0;\n    this.trueTime = 0;\n    this.lastTrueTime = 0;\n    this.lastTime = 0; // this.getAngle = this.getAngle.bind(this);\n    // this.findClosestLoop = this.findClosestLoop.bind(this);\n    // this.findTrueOffset = this.findTrueOffset.bind(this);\n  } // getAngle() {\n  //   var radius = this.props.loops[this.props.attachedLoop].radius;\n  //   var x1 = this.props.x - this.props.offset.x;\n  //   // round to prevent errors in acos calculation where > 1 or < -1\n  //   // could also possibly round the final value before acos()\n  //   var y1 = Math.round(this.props.y + this.props.offset.y);\n  //   var x2 = this.props.x;\n  //   var y2 = Math.round(this.props.y + radius);\n  //   var rad = Math.acos(\n  //     (2 * (radius * radius) -\n  //       Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n  //       (2 * (radius * radius))\n  //   );\n  //   var deg = rad * (180 / Math.PI);\n  //   if (this.props.offset.x > 0) {\n  //     return 360 - deg;\n  //   } else return deg;\n  // }\n\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    // var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    // if (this.props.mode === \"angular\") {\n    //   // this.angularSpeed = this.props.tempo;\n    //   this.angularSpeed = this.calcTempo();\n    // } else if (this.props.mode === \"linear\") {\n    //   this.angularSpeed = Math.floor(\n    //     this.props.loops[this.props.attachedLoop].speed\n    //   );\n    // }\n    console.log(\"SPEED for \" + this.props.id + \" initially: \" + this.props.loops[this.props.attachedLoop].speed);\n    this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    console.log(\"GET SPEED: \" + this.angularSpeed);\n    this.angle = this.getAngle(); // console.log(\"ANGLE: \" + angle)\n\n    console.log(\"ANGLE for \" + this.props.id + \" initially: \" + this.angle);\n    this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n    this.timerLoop = 360 / this.angularSpeed * 1000; // console.log(\"INITIAL TIMER INIT for \" + this.props.id + \": \" + this.timerInit)\n    // console.log(\"INITIAL TIMER LOOP for \" + this.props.id + \": \"  + this.timerLoop)\n    // rotate circle initially to loop rotation\n    // this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n      // trying to figure out whether issue in timeDiff or angularSpeed\n      // frame.timeDiff = 32;\n      // frame.frameRate = 24;\n      var tDiff = frame.timeDiff;\n      var angleDiff = tDiff * this.angularSpeed / 1000; // console.log(\"TIMEDIFF LOOP \" + this.props.attachedLoop + \": \" + tDiff)\n      // console.log(\"ANGULAR SPEED \" + this.props.attachedLoop + \": \" + this.angularSpeed)\n      // console.log(\"ANGlEDIFF \" + this.props.attachedLoop + \": \" + angleDiff)\n\n      this.circle.rotate(angleDiff);\n      this.trueTime = frame.time - this.lastTime;\n\n      if (this.timerInit - 10 < this.trueTime && this.trueTime < this.timerInit + 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound, this.props.duration)); // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n      } else if (this.trueTime % this.timerLoop < this.timerInit + 20 && this.trueTime % this.timerLoop > this.timerInit - 20 && this.props.sound !== null) {\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      }\n    }, this.circle.getLayer()); // if (this.props.playing) {\n    //   this.anim.start();\n    // }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({\n        x: this.props.offset.x,\n        y: this.props.offset.y\n      });\n    } // listen for when speed of attached loop changes, not consistent when listening for tempo to change\n\n\n    if (prevProps.loops[this.props.attachedLoop].speed !== this.props.loops[this.props.attachedLoop].speed) {\n      // check to see if changed within same pause\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      }\n\n      this.angle = this.getAngle();\n      var newAngle = (this.angle + this.circle.rotation()) % 360; // console.log (\"TEST OF NEW ANG 5: \" + newAngle)\n\n      this.angle = newAngle;\n      console.log(\"ANGLE for \" + this.props.id + \" updated: \" + this.angle);\n      console.log(\"SPEED for \" + this.props.id + \" updated: \" + this.props.loops[this.props.attachedLoop].speed);\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      console.log(\"GET SPEED UPDATE: \" + this.angularSpeed);\n      this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n      this.timerLoop = 360 / this.angularSpeed * 1000;\n    }\n\n    if (prevProps.loops[this.props.attachedLoop].active !== this.props.loops[this.props.attachedLoop].active && !this.props.loops[this.props.attachedLoop].active) {\n      this.props.dispatch(updateTone(this.props.id, \"transparent\", null, 1.5));\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n\n        for (var i = 0; i < this.props.tones.length; i++) {\n          if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n            this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n          }\n        }\n      } else {\n        this.anim.isRunning() && this.anim.stop(); // on pause, update the rotation value of the loop in the store\n\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  } // findClosestLoop(distToCenter) {\n  //   // iterate through loops array and compare radii\n  //   var acceptableRange = 50;\n  //   var loopArray = this.props.loops;\n  //   var id = 0;\n  //   var curr = loopArray[id].radius;\n  //   var diff = Math.abs(distToCenter - curr);\n  //   for (var i = 0; i < loopArray.length; i++) {\n  //     if (loopArray[i].active) {\n  //       var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n  //       if (newdiff < diff) {\n  //         diff = newdiff;\n  //         curr = loopArray[i].radius;\n  //         id = i;\n  //       }\n  //     }\n  //   }\n  //   if (diff < acceptableRange) {\n  //     return { index: id, value: curr };\n  //   } else {\n  //     return null;\n  //   }\n  // }\n  // findClosestInterval(a, b, loop) {\n  //   // finds closest tone and returns the index so that color can be changed\n  //   var min = 100;\n  //   var ret = 0;\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     // need to compare pt + or - offset\n  //     // attached loop must be the same as the loopToSnap\n  //     if (this.props.tones[i].attachedLoop === loop) {\n  //       var x = this.cx - this.props.tones[i].offset.x;\n  //       var y = this.cy - this.props.tones[i].offset.y;\n  //       var diffX = x - a;\n  //       var diffY = y - b;\n  //       var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n  //       if (dist < min) {\n  //         min = dist;\n  //         ret = this.props.tones[i].id;\n  //       }\n  //     }\n  //   }\n  //   return ret;\n  // }\n  // find new offset values for snap, depending on rotation\n  // findTrueOffset(offX, offY, angle) {\n  //   var originalAngle = Math.atan2(offX, offY);\n  //   var angleRad = angle * (Math.PI / 180);\n  //   var newAngle = originalAngle - angleRad;\n  //   var dist = Math.sqrt(offX * offX + offY * offY);\n  //   const offX2 = Math.sin(newAngle) * dist;\n  //   const offY2 = Math.cos(newAngle) * dist;\n  //   return { x: offX2, y: offY2 };\n  // }\n  // findTrueCoordinates(x1, y1, angle, distance) {\n  //   // current angle\n  //   var originalAngle = Math.atan2(y1, x1);\n  //   var angleRad = angle * (Math.PI / 180);\n  //   var newAngle = originalAngle - angleRad;\n  //   const x2 = this.cx + Math.cos(newAngle) * distance;\n  //   const y2 = this.cy + Math.sin(newAngle) * distance;\n  //   return { x: x2, y: y2 };\n  // }\n  // snap(x1, y1) {\n  //   // calculate virtual location with rotation\n  //   // first calculate distance\n  //   var a = y1 - this.cy;\n  //   var b = x1 - this.cx;\n  //   var distToCenter = Math.sqrt(a * a + b * b);\n  //   var loopToSnap = this.findClosestLoop(distToCenter);\n  //   if (loopToSnap) {\n  //     console.log(\"LSNAP in TK: \" + loopToSnap.index);\n  //     var angle = this.props.loops[loopToSnap.index].rotation;\n  //     var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n  //     var intervalId = this.findClosestInterval(\n  //       trueCoords.x,\n  //       trueCoords.y,\n  //       loopToSnap.index\n  //     );\n  //     console.log(\n  //       \"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop\n  //     );\n  //     if (!this.props.playing) {\n  //       this.props.dispatch(\n  //         updateTone(\n  //           intervalId,\n  //           this.props.color,\n  //           this.props.sound,\n  //           this.props.radius,\n  //           this.props.duration\n  //         )\n  //       );\n  //     }\n  //   }\n  // }\n  // handleDragStart() {\n  //   if (this.props.playing === false) {\n  //     console.log(\"zIndex: \" + this.circle.zIndex());\n  //     // move current tone above all of the others\n  //     this.circle.zIndex(this.props.tones.length);\n  //     // for all tones, if sound null make them visible on drag\n  //     var radius = this.props.screenHeight / 350;\n  //     for (var i = 0; i < this.props.tones.length; i++) {\n  //       if (\n  //         this.props.tones[i].sound === null &&\n  //         this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //       ) {\n  //         this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n  //       }\n  //     }\n  //   }\n  // }\n  // delete\n  // handleDragEnd() {\n  //   var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n  //   var circX = this.circle.x();\n  //   var circY = this.circle.y();\n  //   var offsetX = this.circle.offsetX();\n  //   var offsetY = this.circle.offsetY();\n  //   var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation());\n  //   // new x and y are coord at original\n  //   var newX = circX - trueOff.x;\n  //   var newY = circY - trueOff.y;\n  //   this.snap(newX, newY);\n  //   // make the tones transparent on drag end\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     if (\n  //       this.props.tones[i].sound === null &&\n  //       this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //     ) {\n  //       this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n  //     }\n  //   }\n  //   // this.props.dispatch(deleteTone(this.props.id));\n  //   this.props.dispatch(\n  //     replaceTone(\n  //       this.props.id,\n  //       this.cx,\n  //       this.cy,\n  //       \"transparent\",\n  //       \"#fff\",\n  //       1.5,\n  //       this.props.offset.x,\n  //       this.props.offset.y,\n  //       this.props.attachedLoop,\n  //       this.props.screenHeight / 50,\n  //       null,\n  //       loopRotation\n  //     )\n  //   );\n  // }\n\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","connect","Konva","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","replaceTone","ToneKonva","Component","constructor","props","cx","center","x","cy","y","angularSpeed","trueTime","lastTrueTime","lastTime","componentDidMount","console","log","id","loops","attachedLoop","speed","angle","getAngle","timerInit","timerLoop","anim","Animation","frame","tDiff","timeDiff","angleDiff","circle","rotate","time","sound","dispatch","duration","getLayer","componentDidUpdate","prevProps","color","offset","newAngle","rotation","active","playing","start","i","tones","length","isRunning","stop","render","stroke","strokeWidth","radius","node","mapStateToProps","state","shared","rot","mode","screenHeight","tempo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,aAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,cAA/C;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,WAAjC,QAAoD,kBAApD;;AAEA,MAAMC,SAAN,SAAwBZ,KAAK,CAACa,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,EAAL,GAAU,KAAKD,KAAL,CAAWE,MAAX,CAAkBC,CAA5B;AACA,SAAKC,EAAL,GAAU,KAAKJ,KAAL,CAAWE,MAAX,CAAkBG,CAA5B;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,QAAL,GAAgB,CAAhB,CARiB,CAUjB;AAEA;AACA;AACD,GAfqC,CAiBtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;AAEAC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CACE,eACE,KAAKZ,KAAL,CAAWa,EADb,GAEE,cAFF,GAGE,KAAKb,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAWe,YAA5B,EAA0CC,KAJ9C;AAMA,SAAKV,YAAL,GAAoB,KAAKN,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAWe,YAA5B,EAA0CC,KAA9D;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgB,KAAKN,YAAjC;AAEA,SAAKW,KAAL,GAAa,KAAKC,QAAL,EAAb,CArBkB,CAsBlB;;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAe,KAAKZ,KAAL,CAAWa,EAA1B,GAA+B,cAA/B,GAAgD,KAAKI,KAAjE;AACA,SAAKE,SAAL,GAAkB,CAAC,MAAO,KAAKF,KAAL,GAAa,GAArB,IAA6B,KAAKX,YAAnC,GAAmD,IAApE;AACA,SAAKc,SAAL,GAAkB,MAAM,KAAKd,YAAZ,GAA4B,IAA7C,CAzBkB,CA0BlB;AACA;AAEA;AACA;;AAEA,SAAKe,IAAL,GAAY,IAAIhC,KAAK,CAACiC,SAAV,CAAoBC,KAAK,IAAI;AACvC;AACA;AACA;AACA,UAAIC,KAAK,GAAGD,KAAK,CAACE,QAAlB;AACA,UAAIC,SAAS,GAAIF,KAAK,GAAG,KAAKlB,YAAd,GAA8B,IAA9C,CALuC,CAMvC;AACA;AACA;;AAEA,WAAKqB,MAAL,CAAYC,MAAZ,CAAmBF,SAAnB;AACA,WAAKnB,QAAL,GAAgBgB,KAAK,CAACM,IAAN,GAAa,KAAKpB,QAAlC;;AAEA,UACE,KAAKU,SAAL,GAAiB,EAAjB,GAAsB,KAAKZ,QAA3B,IACA,KAAKA,QAAL,GAAgB,KAAKY,SAAL,GAAiB,EADjC,IAEA,KAAKnB,KAAL,CAAW8B,KAAX,KAAqB,IAHvB,EAIE;AACA,aAAK9B,KAAL,CAAW+B,QAAX,CAAoBxC,QAAQ,CAAC,KAAKS,KAAL,CAAW8B,KAAZ,EAAmB,KAAK9B,KAAL,CAAWgC,QAA9B,CAA5B,EADA,CAEA;AACA;AACD,OARD,MAQO,IACL,KAAKzB,QAAL,GAAgB,KAAKa,SAArB,GAAiC,KAAKD,SAAL,GAAiB,EAAlD,IACA,KAAKZ,QAAL,GAAgB,KAAKa,SAArB,GAAiC,KAAKD,SAAL,GAAiB,EADlD,IAEA,KAAKnB,KAAL,CAAW8B,KAAX,KAAqB,IAHhB,EAIL;AACA;AACA;AACA,aAAK9B,KAAL,CAAW+B,QAAX,CAAoBxC,QAAQ,CAAC,KAAKS,KAAL,CAAW8B,KAAZ,EAAmB,KAAK9B,KAAL,CAAWgC,QAA9B,CAA5B;AACD;AACF,KA9BW,EA8BT,KAAKL,MAAL,CAAYM,QAAZ,EA9BS,CAAZ,CAhCkB,CAgElB;AACA;AACA;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B;AACA,QAAIA,SAAS,CAACC,KAAV,KAAoB,KAAKpC,KAAL,CAAWoC,KAAnC,EAA0C;AACxC,WAAKT,MAAL,CAAYxB,CAAZ,CAAc,KAAKH,KAAL,CAAWG,CAAzB;AACA,WAAKwB,MAAL,CAAYtB,CAAZ,CAAc,KAAKL,KAAL,CAAWK,CAAzB;AACA,WAAKsB,MAAL,CAAYU,MAAZ,CAAmB;AAAElC,QAAAA,CAAC,EAAE,KAAKH,KAAL,CAAWqC,MAAX,CAAkBlC,CAAvB;AAA0BE,QAAAA,CAAC,EAAE,KAAKL,KAAL,CAAWqC,MAAX,CAAkBhC;AAA/C,OAAnB;AACD,KAN2B,CAQ5B;;;AACA,QACE8B,SAAS,CAACrB,KAAV,CAAgB,KAAKd,KAAL,CAAWe,YAA3B,EAAyCC,KAAzC,KACA,KAAKhB,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAWe,YAA5B,EAA0CC,KAF5C,EAGE;AACA;AACA,UAAI,KAAKR,YAAL,KAAsB,KAAKD,QAA/B,EAAyC;AACvC,aAAKE,QAAL,IAAiB,KAAKF,QAAtB;AACA,aAAKC,YAAL,GAAoB,KAAKD,QAAzB;AACD;;AACD,WAAKU,KAAL,GAAa,KAAKC,QAAL,EAAb;AAEA,UAAIoB,QAAQ,GAAG,CAAC,KAAKrB,KAAL,GAAa,KAAKU,MAAL,CAAYY,QAAZ,EAAd,IAAwC,GAAvD,CARA,CASA;;AAEA,WAAKtB,KAAL,GAAaqB,QAAb;AACA3B,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAe,KAAKZ,KAAL,CAAWa,EAA1B,GAA+B,YAA/B,GAA8C,KAAKI,KAA/D;AACAN,MAAAA,OAAO,CAACC,GAAR,CACE,eACE,KAAKZ,KAAL,CAAWa,EADb,GAEE,YAFF,GAGE,KAAKb,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAWe,YAA5B,EAA0CC,KAJ9C;AAMA,WAAKV,YAAL,GAAoB,KAAKN,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAWe,YAA5B,EAA0CC,KAA9D;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuB,KAAKN,YAAxC;AACA,WAAKa,SAAL,GAAkB,CAAC,MAAO,KAAKF,KAAL,GAAa,GAArB,IAA6B,KAAKX,YAAnC,GAAmD,IAApE;AAEA,WAAKc,SAAL,GAAkB,MAAM,KAAKd,YAAZ,GAA4B,IAA7C;AACD;;AAED,QACE6B,SAAS,CAACrB,KAAV,CAAgB,KAAKd,KAAL,CAAWe,YAA3B,EAAyCyB,MAAzC,KACE,KAAKxC,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAWe,YAA5B,EAA0CyB,MAD5C,IAEA,CAAC,KAAKxC,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAWe,YAA5B,EAA0CyB,MAH7C,EAIE;AACA,WAAKxC,KAAL,CAAW+B,QAAX,CAAoBrC,UAAU,CAAC,KAAKM,KAAL,CAAWa,EAAZ,EAAgB,aAAhB,EAA+B,IAA/B,EAAqC,GAArC,CAA9B;AACD;;AAED,QAAIsB,SAAS,CAACM,OAAV,KAAsB,KAAKzC,KAAL,CAAWyC,OAArC,EAA8C;AAC5C,UAAI,KAAKzC,KAAL,CAAWyC,OAAf,EAAwB;AACtB,aAAKpB,IAAL,CAAUqB,KAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3C,KAAL,CAAW4C,KAAX,CAAiBC,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;AAChD,cACE,KAAK3C,KAAL,CAAW4C,KAAX,CAAiBD,CAAjB,EAAoBb,KAApB,KAA8B,IAA9B,IACA,KAAK9B,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAW4C,KAAX,CAAiBD,CAAjB,EAAoB5B,YAArC,EAAmDyB,MAAnD,KAA8D,IAFhE,EAGE;AACA,iBAAKxC,KAAL,CAAW+B,QAAX,CAAoBrC,UAAU,CAACiD,CAAD,EAAI,aAAJ,EAAmB,IAAnB,EAAyB,GAAzB,CAA9B;AACD;AACF;AACF,OAVD,MAUO;AACL,aAAKtB,IAAL,CAAUyB,SAAV,MAAyB,KAAKzB,IAAL,CAAU0B,IAAV,EAAzB,CADK,CAEL;;AACA,aAAK/C,KAAL,CAAW+B,QAAX,CACEzC,UAAU,CAAC,KAAKU,KAAL,CAAWe,YAAZ,EAA0B,KAAKY,MAAL,CAAYY,QAAZ,EAA1B,CADZ;AAGD;AACF;AACF,GA7KqC,CA+KtaAAZ;;AACA,QAAI,KAAKpC,KAAL,CAAWc,KAAX,CAAiB,KAAKd,KAAL,CAAWe,YAA5B,EAA0CyB,MAA1C,KAAqD,IAAzD,EAA+D;AAC7DJ,MAAAA,KAAK,GAAG,KAAKpC,KAAL,CAAWoC,KAAnB;AACD;;AACD,WACE,oBAAC,MAAD;AACE,MAAA,CAAC,EAAE,KAAKpC,KAAL,CAAWG,CADhB;AAEE,MAAA,CAAC,EAAE,KAAKH,KAAL,CAAWK,CAFhB;AAGE,MAAA,IAAI,EAAE+B,KAHR;AAIE,MAAA,MAAM,EAAE,KAAKpC,KAAL,CAAWiD,MAJrB;AAKE,MAAA,WAAW,EAAE,KAAKjD,KAAL,CAAWkD,WAL1B;AAME,MAAA,MAAM,EAAE,KAAKlD,KAAL,CAAWmD,MANrB;AAOE,MAAA,MAAM,EAAE,KAAKnD,KAAL,CAAWqC,MAPrB;AAQE,MAAA,GAAG,EAAEe,IAAI,IAAI;AACX,aAAKzB,MAAL,GAAcyB,IAAd;AACD,OAVH,CAWE;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAeD;;AAtWqC;;AAyWxC,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B;AACA,SAAO;AACLb,IAAAA,OAAO,EAAEa,KAAK,CAACC,MAAN,CAAad,OADjB;AAEL3B,IAAAA,KAAK,EAAEwC,KAAK,CAACxC,KAFR;AAGL0C,IAAAA,GAAG,EAAEF,KAAK,CAACC,MAAN,CAAahB,QAHb;AAILK,IAAAA,KAAK,EAAEU,KAAK,CAACV,KAJR;AAKL1C,IAAAA,MAAM,EAAEoD,KAAK,CAACC,MAAN,CAAarD,MALhB;AAMLuD,IAAAA,IAAI,EAAEH,KAAK,CAACC,MAAN,CAAaE,IANd;AAOLC,IAAAA,YAAY,EAAEJ,KAAK,CAACC,MAAN,CAAaG,YAPtB;AAQLC,IAAAA,KAAK,EAAEL,KAAK,CAACC,MAAN,CAAaI;AARf,GAAP;AAUD;;AAED,eAAevE,OAAO,CAACiE,eAAD,CAAP,CAAyBxD,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.angularSpeed = 0;\n    this.trueTime = 0;\n    this.lastTrueTime = 0;\n    this.lastTime = 0;\n\n    // this.getAngle = this.getAngle.bind(this);\n\n    // this.findClosestLoop = this.findClosestLoop.bind(this);\n    // this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  // getAngle() {\n  //   var radius = this.props.loops[this.props.attachedLoop].radius;\n  //   var x1 = this.props.x - this.props.offset.x;\n  //   // round to prevent errors in acos calculation where > 1 or < -1\n  //   // could also possibly round the final value before acos()\n  //   var y1 = Math.round(this.props.y + this.props.offset.y);\n  //   var x2 = this.props.x;\n  //   var y2 = Math.round(this.props.y + radius);\n\n  //   var rad = Math.acos(\n  //     (2 * (radius * radius) -\n  //       Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n  //       (2 * (radius * radius))\n  //   );\n\n  //   var deg = rad * (180 / Math.PI);\n\n  //   if (this.props.offset.x > 0) {\n  //     return 360 - deg;\n  //   } else return deg;\n  // }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    // var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n\n    // if (this.props.mode === \"angular\") {\n    //   // this.angularSpeed = this.props.tempo;\n    //   this.angularSpeed = this.calcTempo();\n    // } else if (this.props.mode === \"linear\") {\n    //   this.angularSpeed = Math.floor(\n    //     this.props.loops[this.props.attachedLoop].speed\n    //   );\n    // }\n    console.log(\n      \"SPEED for \" +\n        this.props.id +\n        \" initially: \" +\n        this.props.loops[this.props.attachedLoop].speed\n    );\n    this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    console.log(\"GET SPEED: \" + this.angularSpeed);\n\n    this.angle = this.getAngle();\n    // console.log(\"ANGLE: \" + angle)\n    console.log(\"ANGLE for \" + this.props.id + \" initially: \" + this.angle);\n    this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n    this.timerLoop = (360 / this.angularSpeed) * 1000;\n    // console.log(\"INITIAL TIMER INIT for \" + this.props.id + \": \" + this.timerInit)\n    // console.log(\"INITIAL TIMER LOOP for \" + this.props.id + \": \"  + this.timerLoop)\n\n    // rotate circle initially to loop rotation\n    // this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n      // trying to figure out whether issue in timeDiff or angularSpeed\n      // frame.timeDiff = 32;\n      // frame.frameRate = 24;\n      var tDiff = frame.timeDiff;\n      var angleDiff = (tDiff * this.angularSpeed) / 1000;\n      // console.log(\"TIMEDIFF LOOP \" + this.props.attachedLoop + \": \" + tDiff)\n      // console.log(\"ANGULAR SPEED \" + this.props.attachedLoop + \": \" + this.angularSpeed)\n      // console.log(\"ANGlEDIFF \" + this.props.attachedLoop + \": \" + angleDiff)\n\n      this.circle.rotate(angleDiff);\n      this.trueTime = frame.time - this.lastTime;\n\n      if (\n        this.timerInit - 10 < this.trueTime &&\n        this.trueTime < this.timerInit + 10 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n      } else if (\n        this.trueTime % this.timerLoop < this.timerInit + 20 &&\n        this.trueTime % this.timerLoop > this.timerInit - 20 &&\n        this.props.sound !== null\n      ) {\n        // console.log(\"TIMER INIT MOUNT: \" + this.timerInit)\n        // console.log(\"TIMER LOOP MOUNT: \" + this.timerLoop)\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      }\n    }, this.circle.getLayer());\n\n    // if (this.props.playing) {\n    //   this.anim.start();\n    // }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({ x: this.props.offset.x, y: this.props.offset.y });\n    }\n\n    // listen for when speed of attached loop changes, not consistent when listening for tempo to change\n    if (\n      prevProps.loops[this.props.attachedLoop].speed !==\n      this.props.loops[this.props.attachedLoop].speed\n    ) {\n      // check to see if changed within same pause\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      }\n      this.angle = this.getAngle();\n\n      var newAngle = (this.angle + this.circle.rotation()) % 360;\n      // console.log (\"TEST OF NEW ANG 5: \" + newAngle)\n\n      this.angle = newAngle;\n      console.log(\"ANGLE for \" + this.props.id + \" updated: \" + this.angle);\n      console.log(\n        \"SPEED for \" +\n          this.props.id +\n          \" updated: \" +\n          this.props.loops[this.props.attachedLoop].speed\n      );\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      console.log(\"GET SPEED UPDATE: \" + this.angularSpeed);\n      this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n\n      this.timerLoop = (360 / this.angularSpeed) * 1000;\n    }\n\n    if (\n      prevProps.loops[this.props.attachedLoop].active !==\n        this.props.loops[this.props.attachedLoop].active &&\n      !this.props.loops[this.props.attachedLoop].active\n    ) {\n      this.props.dispatch(updateTone(this.props.id, \"transparent\", null, 1.5));\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        for (var i = 0; i < this.props.tones.length; i++) {\n          if (\n            this.props.tones[i].sound === null &&\n            this.props.loops[this.props.tones[i].attachedLoop].active === true\n          ) {\n            this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n          }\n        }\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n        // on pause, update the rotation value of the loop in the store\n        this.props.dispatch(\n          updateLoop(this.props.attachedLoop, this.circle.rotation())\n        );\n      }\n    }\n  }\n\n  // findClosestLoop(distToCenter) {\n  //   // iterate through loops array and compare radii\n  //   var acceptableRange = 50;\n  //   var loopArray = this.props.loops;\n  //   var id = 0;\n  //   var curr = loopArray[id].radius;\n  //   var diff = Math.abs(distToCenter - curr);\n\n  //   for (var i = 0; i < loopArray.length; i++) {\n  //     if (loopArray[i].active) {\n  //       var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n  //       if (newdiff < diff) {\n  //         diff = newdiff;\n  //         curr = loopArray[i].radius;\n  //         id = i;\n  //       }\n  //     }\n  //   }\n\n  //   if (diff < acceptableRange) {\n  //     return { index: id, value: curr };\n  //   } else {\n  //     return null;\n  //   }\n  // }\n\n  // findClosestInterval(a, b, loop) {\n  //   // finds closest tone and returns the index so that color can be changed\n  //   var min = 100;\n  //   var ret = 0;\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     // need to compare pt + or - offset\n  //     // attached loop must be the same as the loopToSnap\n  //     if (this.props.tones[i].attachedLoop === loop) {\n  //       var x = this.cx - this.props.tones[i].offset.x;\n  //       var y = this.cy - this.props.tones[i].offset.y;\n  //       var diffX = x - a;\n  //       var diffY = y - b;\n  //       var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n  //       if (dist < min) {\n  //         min = dist;\n  //         ret = this.props.tones[i].id;\n  //       }\n  //     }\n  //   }\n  //   return ret;\n  // }\n\n  // find new offset values for snap, depending on rotation\n  // findTrueOffset(offX, offY, angle) {\n  //   var originalAngle = Math.atan2(offX, offY);\n  //   var angleRad = angle * (Math.PI / 180);\n  //   var newAngle = originalAngle - angleRad;\n  //   var dist = Math.sqrt(offX * offX + offY * offY);\n  //   const offX2 = Math.sin(newAngle) * dist;\n  //   const offY2 = Math.cos(newAngle) * dist;\n  //   return { x: offX2, y: offY2 };\n  // }\n\n  // findTrueCoordinates(x1, y1, angle, distance) {\n  //   // current angle\n  //   var originalAngle = Math.atan2(y1, x1);\n  //   var angleRad = angle * (Math.PI / 180);\n  //   var newAngle = originalAngle - angleRad;\n  //   const x2 = this.cx + Math.cos(newAngle) * distance;\n  //   const y2 = this.cy + Math.sin(newAngle) * distance;\n  //   return { x: x2, y: y2 };\n  // }\n\n  // snap(x1, y1) {\n  //   // calculate virtual location with rotation\n  //   // first calculate distance\n  //   var a = y1 - this.cy;\n  //   var b = x1 - this.cx;\n  //   var distToCenter = Math.sqrt(a * a + b * b);\n  //   var loopToSnap = this.findClosestLoop(distToCenter);\n\n  //   if (loopToSnap) {\n  //     console.log(\"LSNAP in TK: \" + loopToSnap.index);\n  //     var angle = this.props.loops[loopToSnap.index].rotation;\n  //     var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n  //     var intervalId = this.findClosestInterval(\n  //       trueCoords.x,\n  //       trueCoords.y,\n  //       loopToSnap.index\n  //     );\n  //     console.log(\n  //       \"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop\n  //     );\n  //     if (!this.props.playing) {\n  //       this.props.dispatch(\n  //         updateTone(\n  //           intervalId,\n  //           this.props.color,\n  //           this.props.sound,\n  //           this.props.radius,\n  //           this.props.duration\n  //         )\n  //       );\n  //     }\n  //   }\n  // }\n\n  // handleDragStart() {\n  //   if (this.props.playing === false) {\n  //     console.log(\"zIndex: \" + this.circle.zIndex());\n  //     // move current tone above all of the others\n  //     this.circle.zIndex(this.props.tones.length);\n  //     // for all tones, if sound null make them visible on drag\n  //     var radius = this.props.screenHeight / 350;\n  //     for (var i = 0; i < this.props.tones.length; i++) {\n  //       if (\n  //         this.props.tones[i].sound === null &&\n  //         this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //       ) {\n  //         this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n  //       }\n  //     }\n  //   }\n  // }\n\n  // delete\n  // handleDragEnd() {\n  //   var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n  //   var circX = this.circle.x();\n  //   var circY = this.circle.y();\n  //   var offsetX = this.circle.offsetX();\n  //   var offsetY = this.circle.offsetY();\n  //   var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation());\n\n  //   // new x and y are coord at original\n  //   var newX = circX - trueOff.x;\n  //   var newY = circY - trueOff.y;\n\n  //   this.snap(newX, newY);\n  //   // make the tones transparent on drag end\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     if (\n  //       this.props.tones[i].sound === null &&\n  //       this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //     ) {\n  //       this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n  //     }\n  //   }\n  //   // this.props.dispatch(deleteTone(this.props.id));\n  //   this.props.dispatch(\n  //     replaceTone(\n  //       this.props.id,\n  //       this.cx,\n  //       this.cy,\n  //       \"transparent\",\n  //       \"#fff\",\n  //       1.5,\n  //       this.props.offset.x,\n  //       this.props.offset.y,\n  //       this.props.attachedLoop,\n  //       this.props.screenHeight / 50,\n  //       null,\n  //       loopRotation\n  //     )\n  //   );\n  // }\n\n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}