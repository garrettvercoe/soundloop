{"ast":null,"code":"import _slicedToArray from \"/Users/ericduong/Documents/development/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/ericduong/Documents/development/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/ericduong/Documents/development/soundloop/src/components/Loop.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Transformer, Circle } from \"react-konva\";\n\nconst LoopScale = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Circle, Object.assign({\n    onClick: onSelect,\n    ref: shapeRef\n  }, shapeProps, {\n    x: window.innerWidth / 2,\n    onDragEnd: e => {\n      onChange(_objectSpread({}, shapeProps, {\n        x: e.target.x(),\n        y: e.target.y()\n      }));\n    },\n    onTransformEnd: e => {\n      // transformer is changing scale\n      const node = shapeRef.current;\n      const scaleX = node.scaleX();\n      const scaleY = node.scaleY(); // we will reset it back\n\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange(_objectSpread({}, shapeProps, {\n        x: node.x(),\n        y: node.y(),\n        width: node.width() * scaleX,\n        height: node.height() * scaleY\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  })), isSelected && React.createElement(Transformer, {\n    ref: trRef,\n    enabledAnchors: [\"top-right\", \"bottom-left\"],\n    centeredScaling: true,\n    rotateEnabled: false,\n    borderStrokeWidth: 0,\n    anchorFill: \"black\",\n    anchorCornerRadius: 2,\n    anchorStrokeWidth: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n}; // need to change to singular\n\n\nconst initialCircles = [{\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  offsetX: 0,\n  offsetY: 0,\n  width: window.innerWidth * (2 / 3),\n  height: window.innerHeight * (2 / 3),\n  fill: \"transparent\",\n  id: \"loop\",\n  stroke: \"black\",\n  strokeWidth: 3\n}];\n\nconst Loop = () => {\n  const _React$useState = React.useState(initialCircles),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        circles = _React$useState2[0],\n        setCircles = _React$useState2[1];\n\n  const _React$useState3 = React.useState(null),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selectedId = _React$useState4[0],\n        selectShape = _React$useState4[1];\n\n  return React.createElement(Layer, {\n    onMouseDown: e => {\n      // deselect when clicked on empty area, currently doesn't work within layer of circle size\n      const clickedOnEmpty = e.target === e.target.getStage();\n\n      if (clickedOnEmpty) {\n        selectShape(null);\n      }\n    },\n    width: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, circles.map((circle, i) => {\n    return React.createElement(LoopScale, {\n      key: i,\n      shapeProps: circle,\n      isSelected: circle.id === selectedId,\n      onSelect: () => {\n        selectShape(circle.id);\n      },\n      onChange: newAttrs => {\n        const circs = circles.slice();\n        circs[i] = newAttrs;\n        setCircles(circs);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default class LoopExport extends React.Component {\n  render() {\n    return React.createElement(Loop, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    });\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/ericduong/Documents/development/soundloop/src/components/Loop.js"],"names":["React","render","Stage","Layer","Transformer","Circle","LoopScale","shapeProps","isSelected","onSelect","onChange","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","window","innerWidth","e","x","target","y","node","scaleX","scaleY","width","height","initialCircles","innerHeight","offsetX","offsetY","fill","id","stroke","strokeWidth","Loop","useState","circles","setCircles","selectedId","selectShape","clickedOnEmpty","getStage","map","circle","i","newAttrs","circs","slice","LoopExport","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Transformer, Circle } from \"react-konva\";\n\nconst LoopScale = ({ shapeProps, isSelected, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Circle\n        onClick={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        x={window.innerWidth/2}\n        onDragEnd={e => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n        onTransformEnd={e => {\n          // transformer is changing scale\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            width: node.width() * scaleX,\n            height: node.height() * scaleY\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          enabledAnchors={[\"top-right\", \"bottom-left\"]}\n          centeredScaling={true}\n          rotateEnabled={false}\n          borderStrokeWidth={0}\n          anchorFill={\"black\"}\n          anchorCornerRadius={2}\n          anchorStrokeWidth={0}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\n// need to change to singular\nconst initialCircles = [\n  {\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2,\n    offsetX: 0,\n    offsetY: 0,\n    width: window.innerWidth * (2/3),\n    height: window.innerHeight * (2/3),\n    fill: \"transparent\",\n    id: \"loop\",\n    stroke: \"black\",\n    strokeWidth: 3\n  }\n];\n\nconst Loop = () => {\n  const [circles, setCircles] = React.useState(initialCircles);\n  const [selectedId, selectShape] = React.useState(null);\n\n  return (\n      <Layer onMouseDown={e => {\n        // deselect when clicked on empty area, currently doesn't work within layer of circle size\n        const clickedOnEmpty = e.target === e.target.getStage();\n        if (clickedOnEmpty) {\n          selectShape(null);\n        }\n      }}\n        width={10}\n      >\n        {circles.map((circle, i) => {\n          return (\n            <LoopScale\n              key={i}\n              shapeProps={circle}\n              isSelected={circle.id === selectedId}\n              onSelect={() => {\n                selectShape(circle.id);\n              }}\n              onChange={newAttrs => {\n                const circs = circles.slice();\n                circs[i] = newAttrs;\n                setCircles(circs);\n              }}\n            />\n          );\n        })}\n      </Layer>\n  );\n};\n\nexport default class LoopExport extends React.Component{\n    render(){\n        return(<Loop />)\n    };\n};"]},"metadata":{},"sourceType":"module"}