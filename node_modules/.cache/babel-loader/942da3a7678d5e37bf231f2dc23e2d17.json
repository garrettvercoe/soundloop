{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  } // CHECK HERE FOR STRANGE SPEED STUFF\n\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed; //var angularSpeed = 75;\n\n    console.log(this.props);\n    var angle = this.getAngle(); // console.log(\"ANGLE: \" + angle)\n\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000;\n    var timerLoop = 360 / angularSpeed * 1000; // rotate circle initially to loop rotation\n\n    this.circle.rotate(this.props.rotation);\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n\n      if (timerInit - 10 < frame.time && frame.time < timerInit + 10 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound, this.props.color));\n      } else if (frame.time % timerLoop < timerInit + 20 && frame.time % timerLoop > timerInit - 20 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({\n        x: this.props.offset.x,\n        y: this.props.offset.y\n      });\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop(); // on pause, update the rotation value of the loop in the store\n\n        console.log(\"PAUSE\");\n        console.log(\"OFFSET FOR \" + this.props.id + \": \" + offsetX);\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.cx - this.props.tones[i].offset.x;\n      var y = this.cy - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n\n    return ret;\n  } // findFakeCoordinates(x1, y1, angle, distance) {\n  //   // current angle\n  //   var originalAngle = Math.atan2(y1, x1);\n  //   var angleRad = angle * (Math.PI/180);\n  //   var newAngle = originalAngle - angleRad;\n  //   const x2 = this.cx + Math.cos(newAngle) * distance;\n  //   const y2 = this.cy + Math.sin(newAngle) * distance;\n  //   return { x: x2, y: y2 };\n  // }\n\n\n  snap(x1, y1) {\n    console.log(\"X in snap: \" + x1);\n    console.log(\"Y in snap: \" + y1); // calculate virtual location with rotation\n    // first calculate distance\n\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation; // var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter)\n\n      var intervalId = this.findClosestInterval(x1, y1);\n\n      if (!this.props.playing) {\n        this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, 0));\n      }\n    }\n  }\n\n  handleDragStart() {\n    // for all tones, if sound null make them visible on drag\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY(); // console.log(\"TEST LOOP ROT: \" + loopRotation)\n\n    console.log(\"X drag end: \" + this.circle.x());\n    console.log(\"Y drag end: \" + this.circle.y());\n    console.log(\"ABS Pos: \" + JSON.stringify(this.circle.getAbsolutePosition()));\n    console.log(\"ROTATION: \" + this.circle.rotation());\n    console.log(\"drag end offsetX: \" + this.circle.offsetX());\n    console.log(\"drag end offsetY: \" + this.circle.offsetY());\n    console.log(\"offsetX props: \" + this.props.offset.x);\n    console.log(\"offsetY props: \" + this.props.offset.y); // konva objects have their own rotation that affects offset and their position\n\n    var a = this.circle.y() - this.cy;\n    var b = this.circle.x() - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var rotation = this.circle.rotation(); // new x and y are coord at original\n\n    var newX = circX - offsetX;\n    var newY = circY - offsetY;\n    console.log(\"new X: \" + newX);\n    console.log(\"new Y: \" + newY);\n    var testX = this.cx - offsetX;\n    var testY = this.cy - offsetY;\n    const x2 = newX + Math.cos(rotation) * distToCenter;\n    const y2 = newY + Math.sin(rotation) * distToCenter;\n    this.snap(newX, newY);\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    } // this.props.dispatch(deleteTone(this.props.id));\n\n\n    this.props.dispatch(replaceTone(this.props.id, this.cx, this.cy, \"transparent\", \"#fff\", 1.5, this.props.offset.x, this.props.offset.y, this.props.attachedLoop, 20, null, loopRotation));\n  }\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      draggable: true,\n      onDragStart: this.handleDragStart,\n      onDragEnd: this.handleDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","rotateTone","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","replaceTone","ToneKonva","Component","constructor","props","cx","center","x","cy","y","getAngle","bind","handleDragEnd","handleDragStart","snap","findClosestLoop","radius","loops","attachedLoop","x1","offset","y1","Math","round","x2","y2","rad","acos","abs","deg","PI","componentDidMount","angularSpeed","speed","console","log","angle","timerInit","timerLoop","circle","rotate","rotation","anim","Animation","frame","angleDiff","timeDiff","time","sound","dispatch","color","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","id","offsetX","distToCenter","acceptableRange","loopArray","curr","diff","i","length","active","newdiff","index","value","findClosestInterval","a","b","min","ret","tones","diffX","diffY","dist","sqrt","loopToSnap","intervalId","loopRotation","circX","circY","offsetY","JSON","stringify","getAbsolutePosition","newX","newY","testX","testY","cos","sin","render","stroke","strokeWidth","node","mapStateToProps","state","shared","rot"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone, rotateTone } from \"../actions/tones\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  // CHECK HERE FOR STRANGE SPEED STUFF\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n        (2 * (radius * radius))\n    );\n\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    //var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n    console.log(this.props);\n    var angle = this.getAngle();\n    // console.log(\"ANGLE: \" + angle)\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    var timerLoop = (360 / angularSpeed) * 1000;\n\n    // rotate circle initially to loop rotation\n    this.circle.rotate(this.props.rotation);\n\n    this.anim = new Konva.Animation(frame => {\n\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n\n      this.circle.rotate(angleDiff);\n      if (\n        timerInit - 10 < frame.time &&\n        frame.time < timerInit + 10 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound, this.props.color));\n      } else if (\n        frame.time % timerLoop < timerInit + 20 &&\n        frame.time % timerLoop > timerInit - 20 &&\n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound));\n      }\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    if (prevProps.color !== this.props.color){\n      this.circle.x(this.props.x)\n      this.circle.y(this.props.y)\n      this.circle.offset({x:this.props.offset.x, y:this.props.offset.y})\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        \n      } else {\n        this.anim.isRunning() && this.anim.stop();\n        // on pause, update the rotation value of the loop in the store\n        console.log(\"PAUSE\")\n        console.log(\"OFFSET FOR \" + this.props.id + \": \" + offsetX)\n        this.props.dispatch(\n          updateLoop(this.props.attachedLoop, this.circle.rotation())\n        );\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active){\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b){\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++){\n      // need to compare pt + or - offset\n      var x = this.cx - this.props.tones[i].offset.x;\n      var y = this.cy - this.props.tones[i].offset.y;\n      var diffX = x-a;\n      var diffY = y-b;\n      var dist = Math.sqrt((diffX*diffX)+(diffY*diffY));\n      if (dist < min){\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n      \n    }\n    return ret;\n  }\n\n  // findFakeCoordinates(x1, y1, angle, distance) {\n  //   // current angle\n  //   var originalAngle = Math.atan2(y1, x1);\n  //   var angleRad = angle * (Math.PI/180);\n  //   var newAngle = originalAngle - angleRad;\n  //   const x2 = this.cx + Math.cos(newAngle) * distance;\n  //   const y2 = this.cy + Math.sin(newAngle) * distance;\n  //   return { x: x2, y: y2 };\n  // }\n\n  snap(x1, y1) {\n    console.log(\"X in snap: \" + x1)\n    console.log(\"Y in snap: \" + y1)\n    \n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    if (loopToSnap){\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      // var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter)\n    \n      var intervalId = this.findClosestInterval(x1, y1)\n      if( !this.props.playing){\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          0\n        )\n      );\n        }\n    }\n  }\n\n  handleDragStart(){\n    // for all tones, if sound null make them visible on drag\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true){\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5))\n      }\n    }\n  }\n\n  handleDragEnd(){\n\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    // console.log(\"TEST LOOP ROT: \" + loopRotation)\n    console.log(\"X drag end: \" + this.circle.x())\n    console.log(\"Y drag end: \" + this.circle.y())\n    console.log(\"ABS Pos: \" + JSON.stringify(this.circle.getAbsolutePosition()))\n    console.log(\"ROTATION: \" + this.circle.rotation())\n    console.log(\"drag end offsetX: \" + this.circle.offsetX())\n    console.log(\"drag end offsetY: \" + this.circle.offsetY())\n    console.log(\"offsetX props: \" + this.props.offset.x)\n    console.log(\"offsetY props: \" + this.props.offset.y)\n\n    // konva objects have their own rotation that affects offset and their position\n    var a = this.circle.y() - this.cy;\n    var b = this.circle.x() - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n\n    var rotation = this.circle.rotation()\n    // new x and y are coord at original\n    var newX = circX-offsetX;\n    var newY = circY-offsetY;\n    console.log(\"new X: \" + newX);\n    console.log(\"new Y: \" + newY);\n    var testX = this.cx - offsetX\n    var testY = this.cy - offsetY\n\n    const x2 = newX + Math.cos(rotation) * distToCenter;\n    const y2 = newY + Math.sin(rotation) * distToCenter;\n    this.snap(newX, newY)\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true){\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5))\n      }\n    }\n    // this.props.dispatch(deleteTone(this.props.id));\n    this.props.dispatch(replaceTone(this.props.id, this.cx, this.cy, \"transparent\", \"#fff\", 1.5, this.props.offset.x, (this.props.offset.y), this.props.attachedLoop, 20, null, loopRotation))\n  }\n\n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragEnd={this.handleDragEnd}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}