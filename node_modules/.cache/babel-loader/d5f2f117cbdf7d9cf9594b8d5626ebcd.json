{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nimport { makeVisible } from \"../actions/cursor\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this); // this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // convert current cursor location to coordinates\n\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1); // original angle in radians\n\n    var angleRad = angle * (Math.PI / 180); // new angle\n\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TB: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y, loopToSnap.index);\n      this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, //  this.props.screenHeight / 50,\n      this.props.toneSizes[this.props.selectedSustain], this.props.selectedSustain));\n    }\n  }\n\n  handleStop() {}\n\n  handleClick() {\n    this.props.dispatch(makeVisible(this.props.color));\n    var radius = this.props.screenHeight / 350;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n      }\n    }\n\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound, this.props.selectedSustain));\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onClick: this.handleClick,\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note-select\",\n      style: {\n        color: this.props.textColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.props.note)));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n} //\n\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","updateTone","playTone","makeVisible","ToneButton","Component","constructor","props","selector","createRef","cx","center","x","cy","y","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","handleClick","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","active","newdiff","index","value","x1","y1","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","loop","min","ret","tones","attachedLoop","offset","diffX","diffY","dist","sqrt","findTrueCoordinates","originalAngle","angleRad","PI","newAngle","loopToSnap","console","log","rotation","trueCoords","intervalId","dispatch","color","sound","toneSizes","selectedSustain","screenHeight","playing","render","borderRadius","border","borderColor","backgroundColor","width","height","position","outline","pointerEvents","zIndex","textColor","note","mapStateToProps","state","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nimport { makeVisible } from \"../actions/cursor\";\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    // this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // convert current cursor location to coordinates\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1);\n    // original angle in radians\n    var angleRad = angle * (Math.PI / 180);\n    // new angle\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TB: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n\n      var intervalId = this.findClosestInterval(\n        trueCoords.x,\n        trueCoords.y,\n        loopToSnap.index\n      );\n\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          //  this.props.screenHeight / 50,\n          this.props.toneSizes[this.props.selectedSustain],\n          this.props.selectedSustain\n        )\n      );\n    }\n  }\n\n  handleStop() {}\n\n  handleClick() {\n    this.props.dispatch(makeVisible(this.props.color));\n\n    var radius = this.props.screenHeight / 350;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (\n        this.props.tones[i].sound === null &&\n        !this.props.playing &&\n        this.props.loops[this.props.tones[i].attachedLoop].active === true\n      ) {\n        this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n      }\n    }\n\n    if (!this.props.playing) {\n      this.props.dispatch(\n        playTone(this.props.sound, this.props.selectedSustain)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        {/* <Draggable\n          position={this.state.deltaPosition}\n          onStop={this.handleStop}\n          onStart={this.handleDrag}\n        > */}\n        <div\n          ref={this.selector}\n          className=\"hover-shadow\"\n          onClick={this.handleClick}\n          style={{\n            borderRadius: \"100%\",\n            backgroundColor: this.props.color,\n            width: \"2rem\",\n            zIndex: 1,\n            height: \"2rem\",\n\n            border: \"none\",\n            outline: \"none\"\n          }}\n        >\n          <div className=\"note-select\" style={{ color: this.props.textColor }}>\n            {this.props.note}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n}\n\n//\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}