{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/LoopKonva.js\";\nimport React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\nimport { throwStatement } from \"@babel/types\";\n\nclass LoopKonva extends React.Component {\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  } // componentDidUpdate(prevProps){\n  //   if (prevProps.mode !== this.props.mode){\n  //     if (prevProps.mode === \"angular\"){\n  //       console.log(\"ANG\")\n  //       this.numTones = this.numTones = Math.pow(2, 5 - this.props.id);\n  //     }\n  //     else if (prevProps.mode === \"linear\"){\n  //       console.log(\"LIN\")\n  //       this.numTones = 16;\n  //     }\n  //   }\n  // }\n\n\n  componentWillUpdate(prevProps) {\n    if (prevProps.mode !== this.props.mode) {\n      if (prevProps.mode === \"angular\") {\n        console.log(\"ANG\");\n        this.numTones = this.numTones = Math.pow(2, 5 - this.props.id);\n      } else if (prevProps.mode === \"linear\") {\n        console.log(\"LIN\");\n        this.numTones = 16;\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.numTones = 0;\n\n    if (this.props.mode === \"linear\") {\n      this.numTones = 16;\n    } else if (this.props.mode === \"angular\") {\n      this.numTones = Math.pow(2, 5 - this.props.id);\n    } else if (this.props.mode === \"init\") {\n      this.numTones = 16;\n    }\n\n    var interval = 2 * Math.PI / this.numTones;\n    var currAngle = 0;\n\n    for (var i = 0; i < this.numTones; i++) {\n      var coords = this.findAngleCoord(this.props.center.x, this.props.center.y, currAngle, this.props.radius);\n      this.props.dispatch(addTone(\"transparent\", \"#fff\", 1.5, coords.x - this.props.center.x, coords.y - this.props.center.y, this.props.id, this.props.screenHeight / 50, null, 0));\n      currAngle = currAngle + interval;\n    }\n  } // componentDidUpdate(prevProps){\n  //   if (prevProps.mode !== this.props.mode){\n  //     console.log(\"HERE NOW\")\n  //     if (this.props.mode === \"angular\"){\n  //       var numTones = 16;\n  //       var interval = (2 * Math.PI) / numTones;\n  //       var currAngle = 0;\n  //       for (var i = 0; i < numTones; i++) {\n  //         var coords = this.findAngleCoord(\n  //           this.props.center.x,\n  //           this.props.center.y,\n  //           currAngle,\n  //           this.props.radius\n  //         );\n  //         console.log(\"ANGULARRR\");\n  //         this.props.dispatch(\n  //           addTone(\n  //             \"transparent\",\n  //             \"#fff\",\n  //             1.5,\n  //             coords.x - this.props.center.x,\n  //             coords.y - this.props.center.y,\n  //             this.props.id,\n  //             this.props.screenHeight/50,\n  //             null,\n  //             0\n  //           )\n  //         );\n  //         currAngle = currAngle + interval;\n  //     }\n  //   } else {\n  //     var numTones = Math.pow(2, 5 - this.props.id);\n  //     var interval = (2 * Math.PI) / numTones;\n  //     var currAngle = 0;\n  //     for (var i = 0; i < numTones; i++) {\n  //       var coords = this.findAngleCoord(\n  //         this.props.center.x,\n  //         this.props.center.y,\n  //         currAngle,\n  //         this.props.radius\n  //       );\n  //       this.props.dispatch(\n  //         addTone(\n  //           \"transparent\",\n  //           \"#fff\",\n  //           1.5,\n  //           coords.x - this.props.center.x,\n  //           coords.y - this.props.center.y,\n  //           this.props.id,\n  //           this.props.screenHeight/50,\n  //           null,\n  //           0\n  //         )\n  //       );\n  //       currAngle = currAngle + interval;\n  //     }\n  //   }\n  //   }\n  // }\n\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: this.props.radius,\n      fill: \"transparent\",\n      stroke: this.props.stroke,\n      strokeWidth: 1.5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    shared: state.shared,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/LoopKonva.js"],"names":["React","Circle","connect","addTone","throwStatement","LoopKonva","Component","findAngleCoord","cx","cy","angle","distance","x2","Math","cos","y2","sin","x","y","componentWillUpdate","prevProps","mode","props","console","log","numTones","pow","id","componentDidMount","interval","PI","currAngle","i","coords","center","radius","dispatch","screenHeight","render","stroke","mapStateToProps","state","shared"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,cAAT,QAA+B,cAA/B;;AAEA,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AACtCC,EAAAA,cAAc,CAACC,EAAD,EAAKC,EAAL,EAASC,KAAT,EAAgBC,QAAhB,EAA0B;AACtC,UAAMC,EAAE,GAAGJ,EAAE,GAAGK,IAAI,CAACC,GAAL,CAASJ,KAAT,IAAkBC,QAAlC;AACA,UAAMI,EAAE,GAAGN,EAAE,GAAGI,IAAI,CAACG,GAAL,CAASN,KAAT,IAAkBC,QAAlC;AACA,WAAO;AAAEM,MAAAA,CAAC,EAAEL,EAAL;AAASM,MAAAA,CAAC,EAAEH;AAAZ,KAAP;AACD,GALqC,CAOxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEAI,EAAAA,mBAAmB,CAACC,SAAD,EAAW;AAC5B,QAAIA,SAAS,CAACC,IAAV,KAAmB,KAAKC,KAAL,CAAWD,IAAlC,EAAuC;AACrC,UAAID,SAAS,CAACC,IAAV,KAAmB,SAAvB,EAAiC;AAC/BE,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,aAAKC,QAAL,GAAgB,KAAKA,QAAL,GAAgBZ,IAAI,CAACa,GAAL,CAAS,CAAT,EAAY,IAAI,KAAKJ,KAAL,CAAWK,EAA3B,CAAhC;AACD,OAHD,MAIK,IAAIP,SAAS,CAACC,IAAV,KAAmB,QAAvB,EAAgC;AACnCE,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,aAAKC,QAAL,GAAgB,EAAhB;AACD;AACF;AACF;;AAECG,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,QAAL,GAAgB,CAAhB;;AACA,QAAI,KAAKH,KAAL,CAAWD,IAAX,KAAoB,QAAxB,EAAiC;AAC/B,WAAKI,QAAL,GAAgB,EAAhB;AACD,KAFD,MAEO,IAAI,KAAKH,KAAL,CAAWD,IAAX,KAAoB,SAAxB,EAAkC;AACvC,WAAKI,QAAL,GAAgBZ,IAAI,CAACa,GAAL,CAAS,CAAT,EAAY,IAAI,KAAKJ,KAAL,CAAWK,EAA3B,CAAhB;AACD,KAFM,MAGF,IAAI,KAAKL,KAAL,CAAWD,IAAX,KAAoB,MAAxB,EAA+B;AAClC,WAAKI,QAAL,GAAgB,EAAhB;AACD;;AACH,QAAII,QAAQ,GAAI,IAAIhB,IAAI,CAACiB,EAAV,GAAgB,KAAKL,QAApC;AACI,QAAIM,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,QAAzB,EAAmCO,CAAC,EAApC,EAAwC;AACtC,UAAIC,MAAM,GAAG,KAAK1B,cAAL,CACX,KAAKe,KAAL,CAAWY,MAAX,CAAkBjB,CADP,EAEX,KAAKK,KAAL,CAAWY,MAAX,CAAkBhB,CAFP,EAGXa,SAHW,EAIX,KAAKT,KAAL,CAAWa,MAJA,CAAb;AAOA,WAAKb,KAAL,CAAWc,QAAX,CACEjC,OAAO,CACL,aADK,EAEL,MAFK,EAGL,GAHK,EAIL8B,MAAM,CAAChB,CAAP,GAAW,KAAKK,KAAL,CAAWY,MAAX,CAAkBjB,CAJxB,EAKLgB,MAAM,CAACf,CAAP,GAAW,KAAKI,KAAL,CAAWY,MAAX,CAAkBhB,CALxB,EAML,KAAKI,KAAL,CAAWK,EANN,EAOL,KAAKL,KAAL,CAAWe,YAAX,GAAwB,EAPnB,EAQL,IARK,EASL,CATK,CADT;AAaAN,MAAAA,SAAS,GAAGA,SAAS,GAAGF,QAAxB;AACP;AACE,GArEqC,CAuExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEES,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AACE,MAAA,CAAC,EAAE,KAAKhB,KAAL,CAAWY,MAAX,CAAkBjB,CADvB;AAEE,MAAA,CAAC,EAAE,KAAKK,KAAL,CAAWY,MAAX,CAAkBhB,CAFvB;AAGE,MAAA,MAAM,EAAE,KAAKI,KAAL,CAAWa,MAHrB;AAIE,MAAA,IAAI,EAAE,aAJR;AAKE,MAAA,MAAM,EAAE,KAAKb,KAAL,CAAWiB,MALrB;AAME,MAAA,WAAW,EAAE,GANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AA/IqC;;AAkJxC,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLP,IAAAA,MAAM,EAAEO,KAAK,CAACC,MAAN,CAAaR,MADhB;AAELQ,IAAAA,MAAM,EAAED,KAAK,CAACC,MAFT;AAGLrB,IAAAA,IAAI,EAAEoB,KAAK,CAACC,MAAN,CAAarB,IAHd;AAILgB,IAAAA,YAAY,EAAEI,KAAK,CAACC,MAAN,CAAaL;AAJtB,GAAP;AAMD;;AAED,eAAenC,OAAO,CAACsC,eAAD,CAAP,CAAyBnC,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\nimport { throwStatement } from \"@babel/types\";\n\nclass LoopKonva extends React.Component {\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n// componentDidUpdate(prevProps){\n//   if (prevProps.mode !== this.props.mode){\n//     if (prevProps.mode === \"angular\"){\n//       console.log(\"ANG\")\n//       this.numTones = this.numTones = Math.pow(2, 5 - this.props.id);\n//     }\n//     else if (prevProps.mode === \"linear\"){\n//       console.log(\"LIN\")\n//       this.numTones = 16;\n//     }\n    \n//   }\n// }\n\ncomponentWillUpdate(prevProps){\n  if (prevProps.mode !== this.props.mode){\n    if (prevProps.mode === \"angular\"){\n      console.log(\"ANG\")\n      this.numTones = this.numTones = Math.pow(2, 5 - this.props.id);\n    }\n    else if (prevProps.mode === \"linear\"){\n      console.log(\"LIN\")\n      this.numTones = 16;\n    }   \n  }\n}\n\n  componentDidMount() {\n    this.numTones = 0;\n    if (this.props.mode === \"linear\"){\n      this.numTones = 16;\n    } else if (this.props.mode === \"angular\"){\n      this.numTones = Math.pow(2, 5 - this.props.id);\n    }\n    else if (this.props.mode === \"init\"){\n      this.numTones = 16;\n    }\n  var interval = (2 * Math.PI) / this.numTones;\n      var currAngle = 0;\n      for (var i = 0; i < this.numTones; i++) {\n        var coords = this.findAngleCoord(\n          this.props.center.x,\n          this.props.center.y,\n          currAngle,\n          this.props.radius\n        );\n        \n        this.props.dispatch(\n          addTone(\n            \"transparent\",\n            \"#fff\",\n            1.5,\n            coords.x - this.props.center.x,\n            coords.y - this.props.center.y,\n            this.props.id,\n            this.props.screenHeight/50,\n            null,\n            0\n          )\n        );\n        currAngle = currAngle + interval;\n}\n  }\n\n// componentDidUpdate(prevProps){\n//   if (prevProps.mode !== this.props.mode){\n//     console.log(\"HERE NOW\")\n//     if (this.props.mode === \"angular\"){\n//       var numTones = 16;\n//       var interval = (2 * Math.PI) / numTones;\n//       var currAngle = 0;\n//       for (var i = 0; i < numTones; i++) {\n//         var coords = this.findAngleCoord(\n//           this.props.center.x,\n//           this.props.center.y,\n//           currAngle,\n//           this.props.radius\n//         );\n//         console.log(\"ANGULARRR\");\n//         this.props.dispatch(\n//           addTone(\n//             \"transparent\",\n//             \"#fff\",\n//             1.5,\n//             coords.x - this.props.center.x,\n//             coords.y - this.props.center.y,\n//             this.props.id,\n//             this.props.screenHeight/50,\n//             null,\n//             0\n//           )\n//         );\n//         currAngle = currAngle + interval;\n//     }\n//   } else {\n//     var numTones = Math.pow(2, 5 - this.props.id);\n//     var interval = (2 * Math.PI) / numTones;\n//     var currAngle = 0;\n//     for (var i = 0; i < numTones; i++) {\n//       var coords = this.findAngleCoord(\n//         this.props.center.x,\n//         this.props.center.y,\n//         currAngle,\n//         this.props.radius\n//       );\n\n//       this.props.dispatch(\n//         addTone(\n//           \"transparent\",\n//           \"#fff\",\n//           1.5,\n//           coords.x - this.props.center.x,\n//           coords.y - this.props.center.y,\n//           this.props.id,\n//           this.props.screenHeight/50,\n//           null,\n//           0\n//         )\n//       );\n//       currAngle = currAngle + interval;\n//     }\n//   }\n//   }\n// }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.center.x}\n        y={this.props.center.y}\n        radius={this.props.radius}\n        fill={\"transparent\"}\n        stroke={this.props.stroke}\n        strokeWidth={1.5}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    shared: state.shared,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);\n"]},"metadata":{},"sourceType":"module"}