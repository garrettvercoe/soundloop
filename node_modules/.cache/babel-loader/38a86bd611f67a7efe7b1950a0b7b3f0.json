{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = this.props.y + radius;\n    var rad = Math.acos((2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)));\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed); //var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n\n    var angle = this.getAngle();\n    var timerInit = (360 - angle % 360) / angularSpeed * 1000;\n    this.circle.opacity((this.circle.rotation() + angle) % 360 / 1080 + 0.66);\n    var timerLoop = 360 / angularSpeed * 1000;\n    var played = false;\n    rot = this.circle.rotation();\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff); //variable opacity based on angular location\n\n      this.circle.opacity((this.circle.rotation() + angle) % 360 / 1080 + 0.66);\n\n      if (!played && timerInit - 10 < frame.time && frame.time < timerInit + 10 && this.props.sound !== null) {\n        //console.log(\"Sound before dis: \" + this.props.sound)\n        this.props.dispatch(playTone(this.props.sound));\n        played = true; //console.log(\"SOUND NOT PLAYED: \" + JSON.stringify(this.props))\n      } else if (played && frame.time % timerLoop < timerInit + 20 && frame.time % timerLoop > timerInit - 20 && this.props.sound !== null) {\n        this.props.dispatch(playTone(this.props.sound)); //console.log(\"SOUND PLAYED: \" + JSON.stringify(this.props))\n      } // else if (this.props.sound === null) {\n      //   this.circle.fill(\"transparent\");\n      // }\n\n    }, this.circle.getLayer());\n\n    if (this.props.playing) {\n      this.anim.start();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start(); // if (this.props.sound === null) {\n        //   this.circle.fill(\"transparent\");\n        // }\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: this.props.color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shard.rotation\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","addTone","playTone","throwStatement","thisExpression","ToneKonva","Component","constructor","props","state","isDragging","active","getAngle","bind","radius","loops","attachedLoop","x1","x","offset","y1","Math","round","y","x2","y2","rad","acos","abs","deg","PI","componentDidMount","angularSpeed","floor","speed","angle","timerInit","circle","opacity","rotation","timerLoop","played","rot","anim","Animation","frame","angleDiff","timeDiff","rotate","time","sound","dispatch","getLayer","playing","start","componentDidUpdate","prevProps","isRunning","stop","render","color","stroke","strokeWidth","node","setState","e","target","mapStateToProps","shared","shard"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { addTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      // x: window.innerWidth / 2,\n      // y: window.innerHeight / 2,\n      active: false\n    };\n    this.getAngle = this.getAngle.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = this.props.y + radius;\n    var rad = Math.acos(\n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / \n        (2 * (radius * radius))\n    );\n    var deg = rad * ((180 / Math.PI));\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } \n    else return deg; \n  }\n\n  componentDidMount() {\n    var angularSpeed = Math.floor(this.props.loops[this.props.attachedLoop].speed);\n    //var angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    //var angularSpeed = 75;\n    var angle = this.getAngle();\n    var timerInit = ((360 - (angle % 360)) / angularSpeed) * 1000;\n    this.circle.opacity(((this.circle.rotation() + angle) % 360) / 1080 + 0.66);\n    var timerLoop = (360 / angularSpeed) * 1000;\n    var played = false;\n    rot = this.circle.rotation()\n\n    this.anim = new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n      //variable opacity based on angular location\n      this.circle.opacity(\n        ((this.circle.rotation() + angle) % 360) / 1080 + 0.66\n      );\n      if (\n        !played &&\n        timerInit - 10 < frame.time &&\n        frame.time < timerInit + 10 && \n        this.props.sound !== null\n      ) {\n        //console.log(\"Sound before dis: \" + this.props.sound)\n        this.props.dispatch(playTone(this.props.sound));\n        played = true;\n        //console.log(\"SOUND NOT PLAYED: \" + JSON.stringify(this.props))\n      } else if (\n        played &&\n        frame.time % timerLoop < timerInit + 20 &&\n        frame.time % timerLoop > timerInit - 20 && \n        this.props.sound !== null\n      ) {\n        this.props.dispatch(playTone(this.props.sound));\n        //console.log(\"SOUND PLAYED: \" + JSON.stringify(this.props))\n      }\n      // else if (this.props.sound === null) {\n      //   this.circle.fill(\"transparent\");\n      // }\n    }, this.circle.getLayer());\n    if (this.props.playing) {\n      this.anim.start();\n      \n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n        // if (this.props.sound === null) {\n        //   this.circle.fill(\"transparent\");\n        // }\n      } else {\n        this.anim.isRunning() && this.anim.stop();\n        \n      }\n    }\n    \n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={this.props.color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shard.rotation\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);"]},"metadata":{},"sourceType":"module"}