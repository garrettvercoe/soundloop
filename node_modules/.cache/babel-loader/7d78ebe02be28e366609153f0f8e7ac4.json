{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Group } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.angularSpeed = 0;\n    this.trueTime = 0;\n    this.lastTrueTime = 0;\n    this.lastTime = 0;\n    this.getAngle = this.getAngle.bind(this); // this.findClosestLoop = this.findClosestLoop.bind(this);\n    // this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x; // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n    var cos = (2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)); // some cases where cos < -1 by small float amount, this corrects it\n\n    if (cos < -1) {\n      cos = -1;\n    }\n\n    var rad = Math.acos(cos);\n    console.log(\"acos(\" + cos + \")\");\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n    this.angle = this.getAngle();\n    console.log(\"KONVA ANGLE for \" + this.props.id + \": \" + this.angle);\n    this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n    this.timerLoop = 360 / this.angularSpeed * 1000; // rotate circle initially to loop rotation\n    // this.circle.rotate(this.props.rotation);\n    // this.anim = new Konva.Animation(frame => {\n    //   // frame.timeDiff = 30;\n    //   // frame.frameRate = 60;\n    //   var tDiff = frame.timeDiff;\n    //   var angleDiff = (tDiff * this.angularSpeed) / 1000;\n    //   // rotate the group\n    //   this.group.rotate(angleDiff);\n    //   console.log(\"frame.time for \" + this.props.id + \": \" + frame.time)\n    //   this.trueTime = frame.time - this.lastTime;\n    //   console.log(\"angleDiff for \" + this.props.id + \": \" + angleDiff)\n    //   console.log(\"angleSpeed for \" + this.props.id + \": \" + this.angularSpeed)\n    //   if (\n    //     this.timerInit - 10 < this.trueTime &&\n    //     this.trueTime < this.timerInit + 10 &&\n    //     this.props.sound !== null\n    //   ) {\n    //     this.props.dispatch(playTone(this.props.sound, this.props.duration));\n    //   } else if (\n    //     this.trueTime % this.timerLoop < this.timerInit + 20 &&\n    //     this.trueTime % this.timerLoop > this.timerInit - 20 &&\n    //     this.props.sound !== null\n    //   ) {\n    //     this.props.dispatch(playTone(this.props.sound, this.props.duration));\n    //   }\n    // }, this.group.getLayer());\n    // if (this.props.playing) {\n    //   this.anim.start();\n    // }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    // if (prevProps.color !== this.props.color) {\n    //   this.circle.x(this.props.x);\n    //   this.circle.y(this.props.y);\n    //   this.circle.offset({ x: this.props.offset.x, y: this.props.offset.y });\n    // }\n    if (prevProps.sound !== this.props.sound && this.props.sound !== null) {\n      this.innerCircle.fill(\"transparent\");\n    }\n\n    if (prevProps.sound !== this.props.sound && this.props.sound === null) {\n      this.innerCircle.fill(\"transparent\");\n    } // TEMPO CHANGE\n    // listen for when speed of attached loop changes, was not consistent when listening for tempo to change\n\n\n    if (prevProps.loops[this.props.attachedLoop].speed !== this.props.loops[this.props.attachedLoop].speed) {\n      // check to see if changed within same pause\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      }\n\n      this.angle = this.getAngle();\n      var newAngle = (this.angle + this.group.rotation()) % 360;\n      this.angle = newAngle;\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n      this.timerLoop = 360 / this.angularSpeed * 1000;\n    } // if (\n    //   prevProps.loops[this.props.attachedLoop].rotation !==\n    //   this.props.loops[this.props.attachedLoop].rotation\n    // ) {\n    //   console.log(\"rotation has changed\")\n    // }\n    // if (\n    //   prevProps.loops[this.props.attachedLoop].active !==\n    //     this.props.loops[this.props.attachedLoop].active &&\n    //   !this.props.loops[this.props.attachedLoop].active\n    // ) {\n    //   this.props.dispatch(updateTone(this.props.id, \"transparent\", null, 0));\n    // }\n\n\n    if (prevProps.loops[this.props.attachedLoop].active !== this.props.loops[this.props.attachedLoop].active) {\n      if (this.props.loops[this.props.attachedLoop].active) {\n        this.props.dispatch(updateTone(this.props.id, \"#692D55\", null, this.props.screenHeight / 350));\n      } else if (!this.props.loops[this.props.attachedLoop].active) {\n        this.props.dispatch(updateTone(this.props.id, \"transparent\", null, this.props.screenHeight / 350));\n      }\n    } // if (prevProps.playing !== this.props.playing) {\n    //   if (this.props.playing) {\n    //     this.anim.start();\n    //     if (\n    //       this.props.sound === null &&\n    //       this.props.loops[this.props.attachedLoop].active === true\n    //     ) {\n    //       this.props.dispatch(\n    //         updateTone(this.props.id, \"transparent\", null, 0)\n    //       );\n    //     }\n    //   } else {\n    //     this.anim.isRunning() && this.anim.stop();\n    //     if (\n    //       this.props.sound === null &&\n    //       this.props.loops[this.props.attachedLoop].active === true\n    //     ) {\n    //       this.props.dispatch(\n    //         updateTone(\n    //           this.props.id,\n    //           \"#692D55\",\n    //           null,\n    //           this.props.screenHeight / 350\n    //         )\n    //       );\n    //     }\n    //     // on pause, update the rotation value of the loop in the store\n    //     this.props.dispatch(\n    //       updateLoop(this.props.attachedLoop, this.group.rotation())\n    //     );\n    //     console.log(\"rotation by: \" + this.group.rotation())\n    //     console.log(\"Angle for \" + this.props.s)\n    //   }\n    // }\n\n  } // findClosestLoop(distToCenter) {\n  //   // iterate through loops array and compare radii\n  //   var acceptableRange = 50;\n  //   var loopArray = this.props.loops;\n  //   var id = 0;\n  //   var curr = loopArray[id].radius;\n  //   var diff = Math.abs(distToCenter - curr);\n  //   for (var i = 0; i < loopArray.length; i++) {\n  //     if (loopArray[i].active) {\n  //       var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n  //       if (newdiff < diff) {\n  //         diff = newdiff;\n  //         curr = loopArray[i].radius;\n  //         id = i;\n  //       }\n  //     }\n  //   }\n  //   if (diff < acceptableRange) {\n  //     return { index: id, value: curr };\n  //   } else {\n  //     return null;\n  //   }\n  // }\n  // findClosestInterval(a, b, loop) {\n  //   // finds closest tone and returns the index so that color can be changed\n  //   var min = 100;\n  //   var ret = 0;\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     // need to compare pt + or - offset\n  //     // attached loop must be the same as the loopToSnap\n  //     if (this.props.tones[i].attachedLoop === loop) {\n  //       var x = this.cx - this.props.tones[i].offset.x;\n  //       var y = this.cy - this.props.tones[i].offset.y;\n  //       var diffX = x - a;\n  //       var diffY = y - b;\n  //       var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n  //       if (dist < min) {\n  //         min = dist;\n  //         ret = this.props.tones[i].id;\n  //       }\n  //     }\n  //   }\n  //   return ret;\n  // }\n  // find new offset values for snap, depending on rotation\n  // findTrueOffset(offX, offY, angle) {\n  //   var originalAngle = Math.atan2(offX, offY);\n  //   var angleRad = angle * (Math.PI / 180);\n  //   var newAngle = originalAngle - angleRad;\n  //   var dist = Math.sqrt(offX * offX + offY * offY);\n  //   const offX2 = Math.sin(newAngle) * dist;\n  //   const offY2 = Math.cos(newAngle) * dist;\n  //   return { x: offX2, y: offY2 };\n  // }\n  // findTrueCoordinates(x1, y1, angle, distance) {\n  //   // current angle\n  //   var originalAngle = Math.atan2(y1, x1);\n  //   var angleRad = angle * (Math.PI / 180);\n  //   var newAngle = originalAngle - angleRad;\n  //   const x2 = this.cx + Math.cos(newAngle) * distance;\n  //   const y2 = this.cy + Math.sin(newAngle) * distance;\n  //   return { x: x2, y: y2 };\n  // }\n  // snap(x1, y1) {\n  //   // calculate virtual location with rotation\n  //   // first calculate distance\n  //   var a = y1 - this.cy;\n  //   var b = x1 - this.cx;\n  //   var distToCenter = Math.sqrt(a * a + b * b);\n  //   var loopToSnap = this.findClosestLoop(distToCenter);\n  //   if (loopToSnap) {\n  //     console.log(\"LSNAP in TK: \" + loopToSnap.index);\n  //     var angle = this.props.loops[loopToSnap.index].rotation;\n  //     var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n  //     var intervalId = this.findClosestInterval(\n  //       trueCoords.x,\n  //       trueCoords.y,\n  //       loopToSnap.index\n  //     );\n  //     console.log(\n  //       \"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop\n  //     );\n  //     if (!this.props.playing) {\n  //       this.props.dispatch(\n  //         updateTone(\n  //           intervalId,\n  //           this.props.color,\n  //           this.props.sound,\n  //           this.props.radius,\n  //           this.props.duration\n  //         )\n  //       );\n  //     }\n  //   }\n  // }\n  // handleDragStart() {\n  //   if (this.props.playing === false) {\n  //     console.log(\"zIndex: \" + this.circle.zIndex());\n  //     // move current tone above all of the others\n  //     this.circle.zIndex(this.props.tones.length);\n  //     // for all tones, if sound null make them visible on drag\n  //     var radius = this.props.screenHeight / 350;\n  //     for (var i = 0; i < this.props.tones.length; i++) {\n  //       if (\n  //         this.props.tones[i].sound === null &&\n  //         this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //       ) {\n  //         this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n  //       }\n  //     }\n  //   }\n  // }\n  // delete\n  // handleDragEnd() {\n  //   var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n  //   var circX = this.circle.x();\n  //   var circY = this.circle.y();\n  //   var offsetX = this.circle.offsetX();\n  //   var offsetY = this.circle.offsetY();\n  //   var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation());\n  //   // new x and y are coord at original\n  //   var newX = circX - trueOff.x;\n  //   var newY = circY - trueOff.y;\n  //   this.snap(newX, newY);\n  //   // make the tones transparent on drag end\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     if (\n  //       this.props.tones[i].sound === null &&\n  //       this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //     ) {\n  //       this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n  //     }\n  //   }\n  //   // this.props.dispatch(deleteTone(this.props.id));\n  //   this.props.dispatch(\n  //     replaceTone(\n  //       this.props.id,\n  //       this.cx,\n  //       this.cy,\n  //       \"transparent\",\n  //       \"#fff\",\n  //       1.5,\n  //       this.props.offset.x,\n  //       this.props.offset.y,\n  //       this.props.attachedLoop,\n  //       this.props.screenHeight / 50,\n  //       null,\n  //       loopRotation\n  //     )\n  //   );\n  // }\n\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Group // x={this.props.x}\n    // y={this.props.y}\n    // offset={this.props.offset}\n    , {\n      ref: node => {\n        this.group = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(Circle // x={this.props.x}\n    // y={this.props.y}\n    , {\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius // offset={this.props.offset}\n      ,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      fill: \"transparent\",\n      radius: this.props.screenHeight / 350,\n      ref: node => {\n        this.innerCircle = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Group","connect","Konva","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","replaceTone","ToneKonva","Component","constructor","props","cx","center","x","cy","y","angularSpeed","trueTime","lastTrueTime","lastTime","getAngle","bind","radius","loops","attachedLoop","x1","offset","y1","Math","round","x2","y2","cos","abs","rad","acos","console","log","deg","PI","componentDidMount","speed","angle","id","timerInit","timerLoop","componentDidUpdate","prevProps","sound","innerCircle","fill","newAngle","group","rotation","active","dispatch","screenHeight","render","color","node","stroke","strokeWidth","circle","mapStateToProps","state","playing","shared","tones","mode","tempo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Group } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.angularSpeed = 0;\n    this.trueTime = 0;\n    this.lastTrueTime = 0;\n    this.lastTime = 0;\n\n    this.getAngle = this.getAngle.bind(this);\n\n    // this.findClosestLoop = this.findClosestLoop.bind(this);\n    // this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    // round to prevent errors in acos calculation where > 1 or < -1\n    // could also possibly round the final value before acos()\n    var y1 = Math.round(this.props.y + this.props.offset.y);\n    var x2 = this.props.x;\n    var y2 = Math.round(this.props.y + radius);\n\n    var cos = \n      (2 * (radius * radius) -\n        Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n        (2 * (radius * radius))\n\n    // some cases where cos < -1 by small float amount, this corrects it\n    if (cos < -1){\n      cos = -1;\n    }\n\n    var rad = Math.acos(cos);\n    \n    console.log(\"acos(\" + cos + \")\")\n\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n\n    this.angle = this.getAngle();\n    console.log(\"KONVA ANGLE for \" + this.props.id + \": \" + this.angle)\n    this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n    this.timerLoop = (360 / this.angularSpeed) * 1000;\n\n    // rotate circle initially to loop rotation\n    // this.circle.rotate(this.props.rotation);\n\n    // this.anim = new Konva.Animation(frame => {\n    //   // frame.timeDiff = 30;\n    //   // frame.frameRate = 60;\n    //   var tDiff = frame.timeDiff;\n    //   var angleDiff = (tDiff * this.angularSpeed) / 1000;\n    //   // rotate the group\n    //   this.group.rotate(angleDiff);\n    //   console.log(\"frame.time for \" + this.props.id + \": \" + frame.time)\n    //   this.trueTime = frame.time - this.lastTime;\n    //   console.log(\"angleDiff for \" + this.props.id + \": \" + angleDiff)\n    //   console.log(\"angleSpeed for \" + this.props.id + \": \" + this.angularSpeed)\n\n    //   if (\n    //     this.timerInit - 10 < this.trueTime &&\n    //     this.trueTime < this.timerInit + 10 &&\n    //     this.props.sound !== null\n    //   ) {\n    //     this.props.dispatch(playTone(this.props.sound, this.props.duration));\n    //   } else if (\n    //     this.trueTime % this.timerLoop < this.timerInit + 20 &&\n    //     this.trueTime % this.timerLoop > this.timerInit - 20 &&\n    //     this.props.sound !== null\n    //   ) {\n    //     this.props.dispatch(playTone(this.props.sound, this.props.duration));\n    //   }\n    // }, this.group.getLayer());\n\n    // if (this.props.playing) {\n    //   this.anim.start();\n    // }\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete (when prev != current color), move circle back to original position and offset but keep rotation\n    // if (prevProps.color !== this.props.color) {\n    //   this.circle.x(this.props.x);\n    //   this.circle.y(this.props.y);\n    //   this.circle.offset({ x: this.props.offset.x, y: this.props.offset.y });\n    // }\n\n    if (prevProps.sound !== this.props.sound && this.props.sound !== null) {\n      this.innerCircle.fill(\"transparent\")\n    }\n\n    if (prevProps.sound !== this.props.sound && this.props.sound === null) {\n      this.innerCircle.fill(\"transparent\")\n    }\n\n    // TEMPO CHANGE\n    // listen for when speed of attached loop changes, was not consistent when listening for tempo to change\n    if (\n      prevProps.loops[this.props.attachedLoop].speed !==\n      this.props.loops[this.props.attachedLoop].speed\n    ) {\n      // check to see if changed within same pause\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      }\n      this.angle = this.getAngle();\n\n      var newAngle = (this.angle + this.group.rotation()) % 360;\n\n      this.angle = newAngle;\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n\n      this.timerLoop = (360 / this.angularSpeed) * 1000;\n    }\n\n    // if (\n    //   prevProps.loops[this.props.attachedLoop].rotation !==\n    //   this.props.loops[this.props.attachedLoop].rotation\n    // ) {\n    //   console.log(\"rotation has changed\")\n    \n    // }\n\n    // if (\n    //   prevProps.loops[this.props.attachedLoop].active !==\n    //     this.props.loops[this.props.attachedLoop].active &&\n    //   !this.props.loops[this.props.attachedLoop].active\n    // ) {\n    //   this.props.dispatch(updateTone(this.props.id, \"transparent\", null, 0));\n    // }\n\n    if (\n        prevProps.loops[this.props.attachedLoop].active !==\n          this.props.loops[this.props.attachedLoop].active\n      ) {\n        if (this.props.loops[this.props.attachedLoop].active){\n        this.props.dispatch(updateTone(this.props.id, \"#692D55\", null, this.props.screenHeight / 350));\n        }\n        else if (!this.props.loops[this.props.attachedLoop].active){\n          this.props.dispatch(updateTone(this.props.id, \"transparent\", null, this.props.screenHeight / 350));\n          }\n      }\n\n    // if (prevProps.playing !== this.props.playing) {\n    //   if (this.props.playing) {\n    //     this.anim.start();\n    //     if (\n    //       this.props.sound === null &&\n    //       this.props.loops[this.props.attachedLoop].active === true\n    //     ) {\n    //       this.props.dispatch(\n    //         updateTone(this.props.id, \"transparent\", null, 0)\n    //       );\n    //     }\n    //   } else {\n    //     this.anim.isRunning() && this.anim.stop();\n    //     if (\n    //       this.props.sound === null &&\n    //       this.props.loops[this.props.attachedLoop].active === true\n    //     ) {\n    //       this.props.dispatch(\n    //         updateTone(\n    //           this.props.id,\n    //           \"#692D55\",\n    //           null,\n    //           this.props.screenHeight / 350\n    //         )\n    //       );\n    //     }\n        \n    //     // on pause, update the rotation value of the loop in the store\n    //     this.props.dispatch(\n    //       updateLoop(this.props.attachedLoop, this.group.rotation())\n    //     );\n    //     console.log(\"rotation by: \" + this.group.rotation())\n    //     console.log(\"Angle for \" + this.props.s)\n    //   }\n    // }\n  }\n\n  // findClosestLoop(distToCenter) {\n  //   // iterate through loops array and compare radii\n  //   var acceptableRange = 50;\n  //   var loopArray = this.props.loops;\n  //   var id = 0;\n  //   var curr = loopArray[id].radius;\n  //   var diff = Math.abs(distToCenter - curr);\n\n  //   for (var i = 0; i < loopArray.length; i++) {\n  //     if (loopArray[i].active) {\n  //       var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n  //       if (newdiff < diff) {\n  //         diff = newdiff;\n  //         curr = loopArray[i].radius;\n  //         id = i;\n  //       }\n  //     }\n  //   }\n\n  //   if (diff < acceptableRange) {\n  //     return { index: id, value: curr };\n  //   } else {\n  //     return null;\n  //   }\n  // }\n\n  // findClosestInterval(a, b, loop) {\n  //   // finds closest tone and returns the index so that color can be changed\n  //   var min = 100;\n  //   var ret = 0;\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     // need to compare pt + or - offset\n  //     // attached loop must be the same as the loopToSnap\n  //     if (this.props.tones[i].attachedLoop === loop) {\n  //       var x = this.cx - this.props.tones[i].offset.x;\n  //       var y = this.cy - this.props.tones[i].offset.y;\n  //       var diffX = x - a;\n  //       var diffY = y - b;\n  //       var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n  //       if (dist < min) {\n  //         min = dist;\n  //         ret = this.props.tones[i].id;\n  //       }\n  //     }\n  //   }\n  //   return ret;\n  // }\n\n  // find new offset values for snap, depending on rotation\n  // findTrueOffset(offX, offY, angle) {\n  //   var originalAngle = Math.atan2(offX, offY);\n  //   var angleRad = angle * (Math.PI / 180);\n  //   var newAngle = originalAngle - angleRad;\n  //   var dist = Math.sqrt(offX * offX + offY * offY);\n  //   const offX2 = Math.sin(newAngle) * dist;\n  //   const offY2 = Math.cos(newAngle) * dist;\n  //   return { x: offX2, y: offY2 };\n  // }\n\n  // findTrueCoordinates(x1, y1, angle, distance) {\n  //   // current angle\n  //   var originalAngle = Math.atan2(y1, x1);\n  //   var angleRad = angle * (Math.PI / 180);\n  //   var newAngle = originalAngle - angleRad;\n  //   const x2 = this.cx + Math.cos(newAngle) * distance;\n  //   const y2 = this.cy + Math.sin(newAngle) * distance;\n  //   return { x: x2, y: y2 };\n  // }\n\n  // snap(x1, y1) {\n  //   // calculate virtual location with rotation\n  //   // first calculate distance\n  //   var a = y1 - this.cy;\n  //   var b = x1 - this.cx;\n  //   var distToCenter = Math.sqrt(a * a + b * b);\n  //   var loopToSnap = this.findClosestLoop(distToCenter);\n\n  //   if (loopToSnap) {\n  //     console.log(\"LSNAP in TK: \" + loopToSnap.index);\n  //     var angle = this.props.loops[loopToSnap.index].rotation;\n  //     var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n  //     var intervalId = this.findClosestInterval(\n  //       trueCoords.x,\n  //       trueCoords.y,\n  //       loopToSnap.index\n  //     );\n  //     console.log(\n  //       \"Actual loop it snaps to: \" + this.props.tones[intervalId].attachedLoop\n  //     );\n  //     if (!this.props.playing) {\n  //       this.props.dispatch(\n  //         updateTone(\n  //           intervalId,\n  //           this.props.color,\n  //           this.props.sound,\n  //           this.props.radius,\n  //           this.props.duration\n  //         )\n  //       );\n  //     }\n  //   }\n  // }\n\n  // handleDragStart() {\n  //   if (this.props.playing === false) {\n  //     console.log(\"zIndex: \" + this.circle.zIndex());\n  //     // move current tone above all of the others\n  //     this.circle.zIndex(this.props.tones.length);\n  //     // for all tones, if sound null make them visible on drag\n  //     var radius = this.props.screenHeight / 350;\n  //     for (var i = 0; i < this.props.tones.length; i++) {\n  //       if (\n  //         this.props.tones[i].sound === null &&\n  //         this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //       ) {\n  //         this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n  //       }\n  //     }\n  //   }\n  // }\n\n  // delete\n  // handleDragEnd() {\n  //   var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n  //   var circX = this.circle.x();\n  //   var circY = this.circle.y();\n  //   var offsetX = this.circle.offsetX();\n  //   var offsetY = this.circle.offsetY();\n  //   var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation());\n\n  //   // new x and y are coord at original\n  //   var newX = circX - trueOff.x;\n  //   var newY = circY - trueOff.y;\n\n  //   this.snap(newX, newY);\n  //   // make the tones transparent on drag end\n  //   for (var i = 0; i < this.props.tones.length; i++) {\n  //     if (\n  //       this.props.tones[i].sound === null &&\n  //       this.props.loops[this.props.tones[i].attachedLoop].active === true\n  //     ) {\n  //       this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n  //     }\n  //   }\n  //   // this.props.dispatch(deleteTone(this.props.id));\n  //   this.props.dispatch(\n  //     replaceTone(\n  //       this.props.id,\n  //       this.cx,\n  //       this.cy,\n  //       \"transparent\",\n  //       \"#fff\",\n  //       1.5,\n  //       this.props.offset.x,\n  //       this.props.offset.y,\n  //       this.props.attachedLoop,\n  //       this.props.screenHeight / 50,\n  //       null,\n  //       loopRotation\n  //     )\n  //   );\n  // }\n\n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active) {\n      color = this.props.color;\n    }\n    return (\n      <Group\n        // x={this.props.x}\n        // y={this.props.y}\n        // offset={this.props.offset}\n        ref={node => {\n          this.group = node;\n        }}\n      >\n        <Circle\n          // x={this.props.x}\n          // y={this.props.y}\n          fill={color}\n          stroke={this.props.stroke}\n          strokeWidth={this.props.strokeWidth}\n          radius={this.props.radius}\n          // offset={this.props.offset}\n          ref={node => {\n            this.circle = node;\n          }}\n          // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n        />\n        <Circle\n          fill={\"transparent\"}\n          radius={this.props.screenHeight / 350}\n          ref={node => {\n            this.innerCircle = node;\n          }}\n        />\n      </Group>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  //console.log(state); // state\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}