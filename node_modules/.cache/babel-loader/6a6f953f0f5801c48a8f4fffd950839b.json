{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\n\nfunction dist(x1, y1, cx, cy) {\n  var a = x1 - cx;\n  var b = y1 - cy;\n  return Math.sqrt(a * a + b * b);\n}\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n  }\n\n  shouldSnap(x1, y1, cx, cy) {\n    //this should be a list of raddii gotten from store\n    var radii = [300];\n    var distToOrigin = dist(x1, y1, cx, cy);\n    var curr = radii[0];\n    var diff = Math.abs(distToOrigin - curr);\n\n    for (var val = 0; val < arr.length; val++) {\n      var newdiff = Math.abs(num - arr[val]);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = arr[val];\n      }\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    const centerPoint = {\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2\n    };\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect()(ToneButton);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","dist","x1","y1","cx","cy","a","b","Math","sqrt","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","handleStop","bind","shouldSnap","radii","distToOrigin","curr","diff","abs","val","arr","length","newdiff","num","rect","current","getBoundingClientRect","left","top","centerPoint","window","innerWidth","innerHeight","setState","render","borderRadius","border","borderColor","color","backgroundColor","width","height","position","outline","pointerEvents","zIndex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\n\nfunction dist(x1, y1, cx, cy) {\n  var a = x1 - cx;\n  var b = y1 - cy;\n  return Math.sqrt(a * a + b * b);\n}\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n  }\n\n  shouldSnap(x1, y1, cx, cy) {\n    //this should be a list of raddii gotten from store\n    var radii = [300];\n    var distToOrigin = dist(x1, y1, cx, cy);\n\n    var curr = radii[0];\n    var diff = Math.abs(distToOrigin - curr);\n    for (var val = 0; val < arr.length; val++) {\n      var newdiff = Math.abs(num - arr[val]);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = arr[val];\n      }\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    const centerPoint = { x: window.innerWidth / 2, y: window.innerHeight / 2 };\n\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <Draggable position={this.state.deltaPosition} onStop={this.handleStop}>\n          <button\n            ref={this.selector}\n            className=\"hover-shadow\"\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n\n              height: \"2rem\",\n              border: \"none\",\n              outline: \"none\"\n            }}\n          />\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect()(ToneButton);\n"]},"metadata":{},"sourceType":"module"}