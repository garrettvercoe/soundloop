{"ast":null,"code":"import _objectSpread from \"/Users/ericduong/Documents/repos/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_TONE, RECEIVE_TONES, RESIZE_TONE, UPDATE_TONE, ROTATE_TONE, DELETE_TONE } from \"../actions/tones\";\nimport { strictEqual } from \"assert\";\nimport { stat } from \"fs\";\nimport { TRASH_ALL } from \"../actions/shared\";\nlet nextToneId = 0;\nexport default function tones(state = [], action) {\n  switch (action.type) {\n    case ADD_TONE:\n      return [...state, {\n        id: nextToneId++,\n        color: action.color,\n        stroke: action.stroke,\n        strokeWidth: action.strokeWidth,\n        attachedLoop: action.attachedLoop,\n        radius: action.radius,\n        sound: action.sound,\n        position: action.position,\n        offset: action.offset,\n        rotation: action.rotation\n      }];\n    // return new state with modified tone color, sound, and stroke with everything else same\n\n    case UPDATE_TONE:\n      //console.log(...state);\n      var id = action.id;\n      return [...state.slice(0, id), _objectSpread({}, state[id], {\n        color: action.color,\n        sound: action.sound,\n        strokeWidth: action.strokeWidth\n      }), ...state.slice(id + 1)];\n\n    case ROTATE_TONE:\n      var id = action.id;\n      return [...state.slice(0, id), _objectSpread({}, state[id], {\n        offset: action.rotation\n      }), ...state.slice(id + 1)];\n\n    case RESIZE_TONE:\n      return {\n        state\n      };\n\n    case DELETE_TONE:\n      console.log(\"action id\" + action);\n      console.log(\"LOGGING FILTER\" + [...state].filter(i => console.log(i.id !== action.id)));\n      let x = [...state.filter((i, index) => index !== action.id)];\n      return x;\n\n    case TRASH_ALL:\n      nextToneId = 0;\n      return [];\n\n    case RECEIVE_TONES:\n      return _objectSpread({}, state, action.tones);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/reducers/tones.js"],"names":["ADD_TONE","RECEIVE_TONES","RESIZE_TONE","UPDATE_TONE","ROTATE_TONE","DELETE_TONE","strictEqual","stat","TRASH_ALL","nextToneId","tones","state","action","type","id","color","stroke","strokeWidth","attachedLoop","radius","sound","position","offset","rotation","slice","console","log","filter","i","x","index"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,aAAnB,EAAkCC,WAAlC,EAA+CC,WAA/C,EAA4DC,WAA5D,EAAyEC,WAAzE,QAA4F,kBAA5F;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,IAAIC,UAAU,GAAG,CAAjB;AACA,eAAe,SAASC,KAAT,CAAeC,KAAK,GAAG,EAAvB,EAA2BC,MAA3B,EAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,QAAL;AACE,aAAO,CACL,GAAGW,KADE,EAEL;AACEG,QAAAA,EAAE,EAAEL,UAAU,EADhB;AAEEM,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAFhB;AAGEC,QAAAA,MAAM,EAAEJ,MAAM,CAACI,MAHjB;AAIEC,QAAAA,WAAW,EAAEL,MAAM,CAACK,WAJtB;AAKEC,QAAAA,YAAY,EAAEN,MAAM,CAACM,YALvB;AAMEC,QAAAA,MAAM,EAAEP,MAAM,CAACO,MANjB;AAOEC,QAAAA,KAAK,EAAER,MAAM,CAACQ,KAPhB;AAQEC,QAAAA,QAAQ,EAAET,MAAM,CAACS,QARnB;AASEC,QAAAA,MAAM,EAAEV,MAAM,CAACU,MATjB;AAUEC,QAAAA,QAAQ,EAAEX,MAAM,CAACW;AAVnB,OAFK,CAAP;AAgBA;;AACF,SAAKpB,WAAL;AACE;AACA,UAAIW,EAAE,GAAGF,MAAM,CAACE,EAAhB;AAEA,aAAO,CACL,GAAGH,KAAK,CAACa,KAAN,CAAY,CAAZ,EAAeV,EAAf,CADE,oBAGAH,KAAK,CAACG,EAAD,CAHL;AAIHC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAJX;AAKHK,QAAAA,KAAK,EAAER,MAAM,CAACQ,KALX;AAMHH,QAAAA,WAAW,EAAEL,MAAM,CAACK;AANjB,UAQL,GAAGN,KAAK,CAACa,KAAN,CAAYV,EAAE,GAAC,CAAf,CARE,CAAP;;AAWF,SAAKV,WAAL;AACI,UAAIU,EAAE,GAAGF,MAAM,CAACE,EAAhB;AAEA,aAAO,CACL,GAAGH,KAAK,CAACa,KAAN,CAAY,CAAZ,EAAeV,EAAf,CADE,oBAGAH,KAAK,CAACG,EAAD,CAHL;AAIHQ,QAAAA,MAAM,EAAEV,MAAM,CAACW;AAJZ,UAML,GAAGZ,KAAK,CAACa,KAAN,CAAYV,EAAE,GAAC,CAAf,CANE,CAAP;;AASJ,SAAKZ,WAAL;AACE,aAAO;AAAES,QAAAA;AAAF,OAAP;;AAEF,SAAKN,WAAL;AACEoB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcd,MAA1B;AACAa,MAAAA,OAAO,CAACC,GAAR,CACE,mBACE,CAAC,GAAGf,KAAJ,EAAWgB,MAAX,CAAkBC,CAAC,IAAIH,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACd,EAAF,KAASF,MAAM,CAACE,EAA5B,CAAvB,CAFJ;AAIA,UAAIe,CAAC,GAAG,CAAC,GAAGlB,KAAK,CAACgB,MAAN,CAAa,CAACC,CAAD,EAAIE,KAAJ,KAAcA,KAAK,KAAKlB,MAAM,CAACE,EAA5C,CAAJ,CAAR;AACA,aAAOe,CAAP;;AACF,SAAKrB,SAAL;AACEC,MAAAA,UAAU,GAAG,CAAb;AACA,aAAO,EAAP;;AAEF,SAAKR,aAAL;AACE,+BACKU,KADL,EAEKC,MAAM,CAACF,KAFZ;;AAIF;AACE,aAAOC,KAAP;AAnEJ;AAqED","sourcesContent":["import { ADD_TONE, RECEIVE_TONES, RESIZE_TONE, UPDATE_TONE, ROTATE_TONE, DELETE_TONE } from \"../actions/tones\";\nimport { strictEqual } from \"assert\";\nimport { stat } from \"fs\";\nimport { TRASH_ALL } from \"../actions/shared\";\n\nlet nextToneId = 0;\nexport default function tones(state = [], action) {\n  switch (action.type) {\n    case ADD_TONE:\n      return [\n        ...state,\n        {\n          id: nextToneId++,\n          color: action.color,\n          stroke: action.stroke,\n          strokeWidth: action.strokeWidth,\n          attachedLoop: action.attachedLoop,\n          radius: action.radius,\n          sound: action.sound,\n          position: action.position,\n          offset: action.offset,\n          rotation: action.rotation\n        }\n      ];\n\n      // return new state with modified tone color, sound, and stroke with everything else same\n    case UPDATE_TONE:\n      //console.log(...state);\n      var id = action.id;\n      \n      return [\n        ...state.slice(0, id), \n        {\n          ...state[id], \n          color: action.color,\n          sound: action.sound,\n          strokeWidth: action.strokeWidth\n        }, \n        ...state.slice(id+1)\n      ];\n\n    case ROTATE_TONE:\n        var id = action.id;\n      \n        return [\n          ...state.slice(0, id), \n          {\n            ...state[id], \n            offset: action.rotation\n          }, \n          ...state.slice(id+1)\n        ];\n\n    case RESIZE_TONE:\n      return { state };\n\n    case DELETE_TONE:\n      console.log(\"action id\" + action);\n      console.log(\n        \"LOGGING FILTER\" +\n          [...state].filter(i => console.log(i.id !== action.id))\n      );\n      let x = [...state.filter((i, index) => index !== action.id)];\n      return x;\n    case TRASH_ALL:\n      nextToneId = 0;\n      return [];\n\n    case RECEIVE_TONES:\n      return {\n        ...state,\n        ...action.tones\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}