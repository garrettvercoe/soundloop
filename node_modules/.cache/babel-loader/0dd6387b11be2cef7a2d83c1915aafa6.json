{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    var acceptableRange = 50;\n    var radii = [300];\n    var id = 0;\n    var curr = radii[id];\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < radii.length; i++) {\n      var newdiff = Math.abs(distToCenter - radii[i]);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = radii[i];\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(opposite, hypotenuse, cx, cy, distance) {\n    var angle = Math.asin(opposite / hypotenuse);\n    const x2 = cx + Math.cos(angle) * distance;\n    const y2 = cy - Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var a = y1 - cy;\n    var b = x1 - cx; //c\n\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var snapCoords = this.findSnapCoordinates(a, distToCenter, cx, cy, loopToSnap.value);\n      var newA = (cy - snapCoords.y) * -1;\n      var newB = cx - snapCoords.x;\n      this.props.dispatch(addTone(snapCoords.x, snapCoords.y, this.props.color, newA, newB, 0, 20, 300));\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    this.snap(x, y);\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect()(ToneButton);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","addTone","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","distToCenter","acceptableRange","radii","id","curr","diff","Math","abs","i","length","newdiff","index","value","opposite","hypotenuse","cx","cy","distance","angle","asin","x2","cos","y2","sin","x1","y1","window","innerWidth","innerHeight","a","b","sqrt","loopToSnap","snapCoords","newA","newB","dispatch","color","rect","current","getBoundingClientRect","left","top","setState","render","borderRadius","border","borderColor","backgroundColor","width","height","position","outline","pointerEvents","zIndex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    var acceptableRange = 50;\n    var radii = [300];\n    var id = 0;\n    var curr = radii[id];\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < radii.length; i++) {\n      var newdiff = Math.abs(distToCenter - radii[i]);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = radii[i];\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(opposite, hypotenuse, cx, cy, distance) {\n    var angle = Math.asin(opposite / hypotenuse);\n    const x2 = cx + Math.cos(angle) * distance;\n    const y2 = cy - Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n\n    var a = y1 - cy;\n    var b = x1 - cx;\n    //c\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    if (loopToSnap) {\n      var snapCoords = this.findSnapCoordinates(\n        a,\n        distToCenter,\n        cx,\n        cy,\n        loopToSnap.value\n      );\n\n      var newA = (cy - snapCoords.y) * -1;\n      var newB = cx - snapCoords.x;\n\n      this.props.dispatch(\n        addTone(\n          snapCoords.x,\n          snapCoords.y,\n          this.props.color,\n          newA,\n          newB,\n\n          0,\n          20,\n          300\n        )\n      );\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n\n    this.snap(x, y);\n\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <Draggable position={this.state.deltaPosition} onStop={this.handleStop}>\n          <button\n            ref={this.selector}\n            className=\"hover-shadow\"\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n              border: \"none\",\n              outline: \"none\"\n            }}\n          />\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect()(ToneButton);\n"]},"metadata":{},"sourceType":"module"}