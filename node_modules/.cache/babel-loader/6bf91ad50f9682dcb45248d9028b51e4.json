{"ast":null,"code":"import _slicedToArray from \"/Users/ericduong/Documents/development/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/ericduong/Documents/development/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/ericduong/Documents/development/soundloop/src/components/Loop.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Rect, Transformer, Circle } from \"react-konva\";\n\nconst LoopScale = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Circle, Object.assign({\n    onClick: onSelect,\n    ref: shapeRef\n  }, shapeProps, {\n    draggable: true,\n    onDragEnd: e => {\n      onChange(_objectSpread({}, shapeProps, {\n        x: e.target.x(),\n        y: e.target.y()\n      }));\n    },\n    onTransformEnd: e => {\n      // transformer is changing scale\n      const node = shapeRef.current;\n      const scaleX = node.scaleX();\n      const scaleY = node.scaleY(); // we will reset it back\n\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange(_objectSpread({}, shapeProps, {\n        x: node.x(),\n        y: node.y(),\n        width: node.width() * scaleX,\n        height: node.height() * scaleY\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  })), isSelected && React.createElement(Transformer, {\n    ref: trRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n};\n\nconst initialRectangles = [{\n  x: 10,\n  y: 10,\n  width: 100,\n  height: 100,\n  fill: \"red\",\n  id: \"rect1\"\n}, {\n  x: 150,\n  y: 150,\n  width: 100,\n  height: 100,\n  fill: \"green\",\n  id: \"rect2\",\n  stroke: \"red\",\n  strokeWidth: 3\n}];\nconst initialCircles = [{\n  x: 50,\n  y: 50,\n  width: 10,\n  height: 10,\n  fill: \"blue\",\n  id: \"loop\",\n  stroke: \"black\",\n  strokeWidth: 4\n}, {\n  x: 70,\n  y: 70,\n  width: 10,\n  height: 10,\n  fill: \"blue\",\n  id: \"loop2\",\n  stroke: \"black\",\n  strokeWidth: 4\n}];\nexport const Loop = () => {\n  const _React$useState = React.useState(initialRectangles),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        rectangles = _React$useState2[0],\n        setRectangles = _React$useState2[1];\n\n  const _React$useState3 = React.useState(initialCircles),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        circles = _React$useState4[0],\n        setCircles = _React$useState4[1];\n\n  const _React$useState5 = React.useState(null),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        selectedId = _React$useState6[0],\n        selectShape = _React$useState6[1];\n\n  return React.createElement(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    onMouseDown: e => {\n      // deselect when clicked on empty area\n      const clickedOnEmpty = e.target === e.target.getStage();\n\n      if (clickedOnEmpty) {\n        selectShape(null);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Layer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, circles.map((circle, i) => {\n    return React.createElement(LoopScale, {\n      key: i,\n      shapeProps: circle,\n      isSelected: circle.id === selectedId,\n      onSelect: () => {\n        selectShape(circle.id);\n      },\n      onChange: newAttrs => {\n        const circs = circles.slice();\n        circs[i] = newAttrs;\n        setCircles(circs);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    });\n  })));\n};\nmodule.exports = Loop;","map":{"version":3,"sources":["/Users/ericduong/Documents/development/soundloop/src/components/Loop.js"],"names":["React","render","Stage","Layer","Rect","Transformer","Circle","LoopScale","shapeProps","isSelected","onSelect","onChange","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","e","x","target","y","node","scaleX","scaleY","width","height","initialRectangles","fill","id","stroke","strokeWidth","initialCircles","Loop","useState","rectangles","setRectangles","circles","setCircles","selectedId","selectShape","window","innerWidth","innerHeight","clickedOnEmpty","getStage","map","circle","i","newAttrs","circs","slice","module","exports"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Rect, Transformer, Circle } from \"react-konva\";\n\nconst LoopScale = ({ shapeProps, isSelected, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Circle\n        onClick={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={e => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n        onTransformEnd={e => {\n          // transformer is changing scale\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            width: node.width() * scaleX,\n            height: node.height() * scaleY\n          });\n        }}\n      />\n      {isSelected && <Transformer ref={trRef} />}\n    </React.Fragment>\n  );\n};\n\n\nconst initialRectangles = [\n  {\n    x: 10,\n    y: 10,\n    width: 100,\n    height: 100,\n    fill: \"red\",\n    id: \"rect1\"\n  },\n  {\n    x: 150,\n    y: 150,\n    width: 100,\n    height: 100,\n    fill: \"green\",\n    id: \"rect2\",\n    stroke: \"red\",\n    strokeWidth: 3\n  }\n];\n\nconst initialCircles = [\n  {\n    x: 50,\n    y: 50,\n    width: 10,\n    height: 10,\n    fill: \"blue\",\n    id: \"loop\",\n    stroke: \"black\",\n    strokeWidth: 4\n  },\n  {\n    x: 70,\n    y: 70,\n    width: 10,\n    height: 10,\n    fill: \"blue\",\n    id: \"loop2\",\n    stroke: \"black\",\n    strokeWidth: 4\n  }\n];\n\nexport const Loop = () => {\n  const [rectangles, setRectangles] = React.useState(initialRectangles);\n  const [circles, setCircles] = React.useState(initialCircles);\n  const [selectedId, selectShape] = React.useState(null);\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onMouseDown={e => {\n        // deselect when clicked on empty area\n        const clickedOnEmpty = e.target === e.target.getStage();\n        if (clickedOnEmpty) {\n          selectShape(null);\n        }\n      }}\n    >\n      <Layer>\n        {circles.map((circle, i) => {\n          return (\n            <LoopScale\n              key={i}\n              shapeProps={circle}\n              isSelected={circle.id === selectedId}\n              onSelect={() => {\n                selectShape(circle.id);\n              }}\n              onChange={newAttrs => {\n                const circs = circles.slice();\n                circs[i] = newAttrs;\n                setCircles(circs);\n              }}\n            />\n          );\n        })}\n      </Layer>\n    </Stage>\n  );\n};\n\nmodule.exports = Loop;\n"]},"metadata":{},"sourceType":"module"}