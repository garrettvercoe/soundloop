{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\n\nclass ToneKonva extends React.Component {\n  componentDidMount() {// var amplitude = 1;\n    // var period = 500;\n    // var anim = new Konva.Animation(frame => {\n    //   this.circle.opacity((Math.sin(frame.time / period) + 1) / 2);\n    // }, this.circle.getLayer());\n    // anim.start();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.props.playing) {\n      anim.start();\n    } else {\n      anim.stop();\n    }\n  }\n\n  rotateAnim() {\n    var angularSpeed = 75;\n    return new Konva.Animation(frame => {\n      var angleDiff = frame.timeDiff * angularSpeed / 1000;\n      this.circle.rotate(angleDiff);\n    }, this.circle.getLayer());\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2,\n      active: false\n    };\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      draggable: true,\n      fill: this.props.color,\n      radius: 16,\n      offset: {\n        x: -305,\n        y: 0\n      },\n      ref: node => {\n        this.circle = node;\n      },\n      onDragStart: () => {\n        this.setState({\n          isDragging: true\n        });\n      },\n      onDragEnd: e => {\n        this.setState({\n          isDragging: false,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","FontAwesomeIcon","faPlusCircle","Portal","connect","Konva","ToneKonva","Component","componentDidMount","componentDidUpdate","prevProps","props","playing","anim","start","stop","rotateAnim","angularSpeed","Animation","frame","angleDiff","timeDiff","circle","rotate","getLayer","constructor","state","isDragging","x","window","innerWidth","y","innerHeight","active","render","color","node","setState","e","target","mapStateToProps","console","log","shared"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,aAA9B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBR,KAAK,CAACS,SAA9B,CAAwC;AACtCC,EAAAA,iBAAiB,GAAG,CAClB;AACA;AACA;AACA;AACA;AACA;AACD;;AACDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAIA,SAAS,CAACC,KAAV,CAAgBC,OAApB,EAA6B;AAC3BC,MAAAA,IAAI,CAACC,KAAL;AACD,KAFD,MAEO;AACLD,MAAAA,IAAI,CAACE,IAAL;AACD;AACF;;AAEDC,EAAAA,UAAU,GAAG;AACX,QAAIC,YAAY,GAAG,EAAnB;AACA,WAAO,IAAIZ,KAAK,CAACa,SAAV,CAAoBC,KAAK,IAAI;AAClC,UAAIC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBJ,YAAlB,GAAkC,IAAlD;AACA,WAAKK,MAAL,CAAYC,MAAZ,CAAmBH,SAAnB;AACD,KAHM,EAGJ,KAAKE,MAAL,CAAYE,QAAZ,EAHI,CAAP;AAID;;AACDC,EAAAA,WAAW,CAACd,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKe,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,KADD;AAEXC,MAAAA,CAAC,EAAEC,MAAM,CAACC,UAAP,GAAoB,CAFZ;AAGXC,MAAAA,CAAC,EAAEF,MAAM,CAACG,WAAP,GAAqB,CAHb;AAIXC,MAAAA,MAAM,EAAE;AAJG,KAAb;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AACE,MAAA,CAAC,EAAE,KAAKvB,KAAL,CAAWiB,CADhB;AAEE,MAAA,CAAC,EAAE,KAAKjB,KAAL,CAAWoB,CAFhB;AAGE,MAAA,SAAS,MAHX;AAIE,MAAA,IAAI,EAAE,KAAKpB,KAAL,CAAWwB,KAJnB;AAKE,MAAA,MAAM,EAAE,EALV;AAME,MAAA,MAAM,EAAE;AACNP,QAAAA,CAAC,EAAE,CAAC,GADE;AAENG,QAAAA,CAAC,EAAE;AAFG,OANV;AAUE,MAAA,GAAG,EAAEK,IAAI,IAAI;AACX,aAAKd,MAAL,GAAcc,IAAd;AACD,OAZH;AAaE,MAAA,WAAW,EAAE,MAAM;AACjB,aAAKC,QAAL,CAAc;AACZV,UAAAA,UAAU,EAAE;AADA,SAAd;AAGD,OAjBH;AAkBE,MAAA,SAAS,EAAEW,CAAC,IAAI;AACd,aAAKD,QAAL,CAAc;AACZV,UAAAA,UAAU,EAAE,KADA;AAEZC,UAAAA,CAAC,EAAEU,CAAC,CAACC,MAAF,CAASX,CAAT,EAFS;AAGZG,UAAAA,CAAC,EAAEO,CAAC,CAACC,MAAF,CAASR,CAAT;AAHS,SAAd;AAKD,OAxBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AA4BD;;AA/DqC;;AAkExC,SAASS,eAAT,CAAyBd,KAAzB,EAAgC;AAC9Be,EAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ,EAD8B,CACV;;AACpB,SAAO;AACLd,IAAAA,OAAO,EAAEc,KAAK,CAACiB,MAAN,CAAa/B;AADjB,GAAP;AAGD;;AAED,eAAeR,OAAO,CAACoC,eAAD,CAAP,CAAyBlC,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Portal from \"./Portal\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\n\nclass ToneKonva extends React.Component {\n  componentDidMount() {\n    // var amplitude = 1;\n    // var period = 500;\n    // var anim = new Konva.Animation(frame => {\n    //   this.circle.opacity((Math.sin(frame.time / period) + 1) / 2);\n    // }, this.circle.getLayer());\n    // anim.start();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.props.playing) {\n      anim.start();\n    } else {\n      anim.stop();\n    }\n  }\n\n  rotateAnim() {\n    var angularSpeed = 75;\n    return new Konva.Animation(frame => {\n      var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      this.circle.rotate(angleDiff);\n    }, this.circle.getLayer());\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDragging: false,\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2,\n      active: false\n    };\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        draggable\n        fill={this.props.color}\n        radius={16}\n        offset={{\n          x: -305,\n          y: 0\n        }}\n        ref={node => {\n          this.circle = node;\n        }}\n        onDragStart={() => {\n          this.setState({\n            isDragging: true\n          });\n        }}\n        onDragEnd={e => {\n          this.setState({\n            isDragging: false,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}