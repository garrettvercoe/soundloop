{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/LoopKonva.js\";\nimport React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nclass LoopKonva extends React.Component {\n  componentDidMount() {\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    var numTones = Math.pow(2, 4 - this.props.id);\n    var interval = 2 * Math.PI / numTones;\n    var currAngle = 0;\n\n    for (var i = 0; i < numTones; i++) {\n      var coords = this.findAngleCoord(this.cx, this.cy, currAngle, this.props.radius);\n      this.props.dispatch(addTone(\"transparent\", \"#fff\", 1.5, coords.x - this.cx, coords.y - this.cy, this.props.id, 20, null, 0)); //this.props.dispatch(addTone(cx, cy, \"#fff9f3\", \"#ed1e79\", 1.5, coords.x-cx, (coords.y-cy), this.props.id, 20, null));\n\n      currAngle = currAngle + interval;\n    }\n  }\n\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  render() {\n    return React.createElement(Circle, {\n      x: this.cx,\n      y: this.cy,\n      radius: this.props.radius,\n      fill: \"transparent\",\n      stroke: this.props.stroke,\n      strokeWidth: 1.5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/LoopKonva.js"],"names":["React","Circle","connect","addTone","LoopKonva","Component","componentDidMount","cx","props","center","x","cy","y","numTones","Math","pow","id","interval","PI","currAngle","i","coords","findAngleCoord","radius","dispatch","angle","distance","x2","cos","y2","sin","render","stroke","mapStateToProps","state","shared"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AACtCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,EAAL,GAAU,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,CAA5B;AACA,SAAKC,EAAL,GAAU,KAAKH,KAAL,CAAWC,MAAX,CAAkBG,CAA5B;AAEA,QAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,IAAI,KAAKP,KAAL,CAAWQ,EAA3B,CAAf;AACA,QAAIC,QAAQ,GAAI,IAAIH,IAAI,CAACI,EAAV,GAAgBL,QAA/B;AACA,QAAIM,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAApB,EAA8BO,CAAC,EAA/B,EAAmC;AACjC,UAAIC,MAAM,GAAG,KAAKC,cAAL,CACX,KAAKf,EADM,EAEX,KAAKI,EAFM,EAGXQ,SAHW,EAIX,KAAKX,KAAL,CAAWe,MAJA,CAAb;AAMA,WAAKf,KAAL,CAAWgB,QAAX,CACErB,OAAO,CACL,aADK,EAEL,MAFK,EAGL,GAHK,EAILkB,MAAM,CAACX,CAAP,GAAW,KAAKH,EAJX,EAKLc,MAAM,CAACT,CAAP,GAAW,KAAKD,EALX,EAML,KAAKH,KAAL,CAAWQ,EANN,EAOL,EAPK,EAQL,IARK,EASL,CATK,CADT,EAPiC,CAoBjC;;AACAG,MAAAA,SAAS,GAAGA,SAAS,GAAGF,QAAxB;AACD;AACF;;AAEDK,EAAAA,cAAc,CAACf,EAAD,EAAKI,EAAL,EAASc,KAAT,EAAgBC,QAAhB,EAA0B;AACtC,UAAMC,EAAE,GAAGpB,EAAE,GAAGO,IAAI,CAACc,GAAL,CAASH,KAAT,IAAkBC,QAAlC;AACA,UAAMG,EAAE,GAAGlB,EAAE,GAAGG,IAAI,CAACgB,GAAL,CAASL,KAAT,IAAkBC,QAAlC;AACA,WAAO;AAAEhB,MAAAA,CAAC,EAAEiB,EAAL;AAASf,MAAAA,CAAC,EAAEiB;AAAZ,KAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AACE,MAAA,CAAC,EAAE,KAAKxB,EADV;AAEE,MAAA,CAAC,EAAE,KAAKI,EAFV;AAGE,MAAA,MAAM,EAAE,KAAKH,KAAL,CAAWe,MAHrB;AAIE,MAAA,IAAI,EAAE,aAJR;AAKE,MAAA,MAAM,EAAE,KAAKf,KAAL,CAAWwB,MALrB;AAME,MAAA,WAAW,EAAE,GANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AAlDqC;;AAqDxC,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLzB,IAAAA,MAAM,EAAEyB,KAAK,CAACC,MAAN,CAAa1B;AADhB,GAAP;AAGD;;AAED,eAAeP,OAAO,CAAC+B,eAAD,CAAP,CAAyB7B,SAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport { addTone } from \"../actions/tones\";\n\nclass LoopKonva extends React.Component {\n  componentDidMount() {\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n\n    var numTones = Math.pow(2, 4 - this.props.id);\n    var interval = (2 * Math.PI) / numTones;\n    var currAngle = 0;\n    for (var i = 0; i < numTones; i++) {\n      var coords = this.findAngleCoord(\n        this.cx,\n        this.cy,\n        currAngle,\n        this.props.radius\n      );\n      this.props.dispatch(\n        addTone(\n          \"transparent\",\n          \"#fff\",\n          1.5,\n          coords.x - this.cx,\n          coords.y - this.cy,\n          this.props.id,\n          20,\n          null,\n          0\n        )\n      );\n      //this.props.dispatch(addTone(cx, cy, \"#fff9f3\", \"#ed1e79\", 1.5, coords.x-cx, (coords.y-cy), this.props.id, 20, null));\n      currAngle = currAngle + interval;\n    }\n  }\n\n  findAngleCoord(cx, cy, angle, distance) {\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  render() {\n    return (\n      <Circle\n        x={this.cx}\n        y={this.cy}\n        radius={this.props.radius}\n        fill={\"transparent\"}\n        stroke={this.props.stroke}\n        strokeWidth={1.5}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center\n  };\n}\n\nexport default connect(mapStateToProps)(LoopKonva);\n"]},"metadata":{},"sourceType":"module"}