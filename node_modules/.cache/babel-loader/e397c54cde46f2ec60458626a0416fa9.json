{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _assert() {\n  const data = _interopRequireDefault(require('assert'));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('console');\n\n  _console = function _console() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _util() {\n  const data = require('util');\n\n  _util = function _util() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sourceMap() {\n  const data = require('@jest/source-map');\n\n  _sourceMap = function _sourceMap() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass BufferedConsole extends _console().Console {\n  constructor(getSourceMaps) {\n    const buffer = [];\n    super({\n      write: message => {\n        BufferedConsole.write(buffer, 'log', message, null, getSourceMaps());\n        return true;\n      }\n    });\n\n    _defineProperty(this, '_buffer', void 0);\n\n    _defineProperty(this, '_counters', void 0);\n\n    _defineProperty(this, '_timers', void 0);\n\n    _defineProperty(this, '_groupDepth', void 0);\n\n    _defineProperty(this, '_getSourceMaps', void 0);\n\n    this._getSourceMaps = getSourceMaps;\n    this._buffer = buffer;\n    this._counters = {};\n    this._timers = {};\n    this._groupDepth = 0;\n  }\n\n  static write(buffer, type, message, level, sourceMaps) {\n    const callsite = (0, _sourceMap().getCallsite)(level != null ? level : 2, sourceMaps);\n    const origin = callsite.getFileName() + ':' + callsite.getLineNumber();\n    buffer.push({\n      message,\n      origin,\n      type\n    });\n    return buffer;\n  }\n\n  _log(type, message) {\n    BufferedConsole.write(this._buffer, type, '  '.repeat(this._groupDepth) + message, 3, this._getSourceMaps());\n  }\n\n  assert(value, message) {\n    try {\n      (0, _assert().default)(value, message);\n    } catch (error) {\n      this._log('assert', error.toString());\n    }\n  }\n\n  count(label = 'default') {\n    if (!this._counters[label]) {\n      this._counters[label] = 0;\n    }\n\n    this._log('count', (0, _util().format)(\"\".concat(label, \": \").concat(++this._counters[label])));\n  }\n\n  countReset(label = 'default') {\n    this._counters[label] = 0;\n  }\n\n  debug(firstArg, ...rest) {\n    this._log('debug', (0, _util().format)(firstArg, ...rest));\n  }\n\n  dir(firstArg, ...rest) {\n    this._log('dir', (0, _util().format)(firstArg, ...rest));\n  }\n\n  dirxml(firstArg, ...rest) {\n    this._log('dirxml', (0, _util().format)(firstArg, ...rest));\n  }\n\n  error(firstArg, ...rest) {\n    this._log('error', (0, _util().format)(firstArg, ...rest));\n  }\n\n  group(title, ...rest) {\n    this._groupDepth++;\n\n    if (title || rest.length > 0) {\n      this._log('group', _chalk().default.bold((0, _util().format)(title, ...rest)));\n    }\n  }\n\n  groupCollapsed(title, ...rest) {\n    this._groupDepth++;\n\n    if (title || rest.length > 0) {\n      this._log('groupCollapsed', _chalk().default.bold((0, _util().format)(title, ...rest)));\n    }\n  }\n\n  groupEnd() {\n    if (this._groupDepth > 0) {\n      this._groupDepth--;\n    }\n  }\n\n  info(firstArg, ...rest) {\n    this._log('info', (0, _util().format)(firstArg, ...rest));\n  }\n\n  log(firstArg, ...rest) {\n    this._log('log', (0, _util().format)(firstArg, ...rest));\n  }\n\n  time(label = 'default') {\n    if (this._timers[label]) {\n      return;\n    }\n\n    this._timers[label] = new Date();\n  }\n\n  timeEnd(label = 'default') {\n    const startTime = this._timers[label];\n\n    if (startTime) {\n      const endTime = new Date();\n      const time = endTime.getTime() - startTime.getTime();\n\n      this._log('time', (0, _util().format)(\"\".concat(label, \": \").concat(time, \"ms\")));\n\n      delete this._timers[label];\n    }\n  }\n\n  warn(firstArg, ...rest) {\n    this._log('warn', (0, _util().format)(firstArg, ...rest));\n  }\n\n  getBuffer() {\n    return this._buffer.length ? this._buffer : undefined;\n  }\n\n}\n\nexports.default = BufferedConsole;","map":null,"metadata":{},"sourceType":"script"}