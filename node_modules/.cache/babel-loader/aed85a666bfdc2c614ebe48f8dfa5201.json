{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { addTone, updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\n\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      snapped: false\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      var x = this.props.tones[i].position.x - this.props.tones[i].offset.x;\n      var y = this.props.tones[i].position.y - this.props.tones[i].offset.y;\n      var diffX = x - a;\n      var diffY = y - b;\n      var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n      if (dist < min) {\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n    }\n\n    return ret;\n  }\n\n  findFakeCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    console.log(\"OG ANGLE: \" + originalAngle);\n    console.log(\"LOOP ANGLE: \" + angleRad);\n    console.log(\"NEW ANGLE: \" + newAngle);\n    const x2 = cx + Math.cos(newAngle) * distance;\n    const y2 = cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    console.log(\"x1: \" + x1);\n    console.log(\"y1: \" + y1);\n    console.log(\"cy: \" + cy); // calculate virtual location with rotation\n    // first calculate distance\n\n    var a = y1 - cy;\n    var b = x1 - cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y);\n      console.log(\"CLOSEST TONE: \" + intervalId);\n\n      if (!this.props.playing) {\n        this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, 0));\n      }\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n    this.snap(x, y);\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n  }\n\n  handleClick() {\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound));\n    }\n  }\n\n  handleDrag() {\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5));\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      onStart: this.handleDrag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onClick: this.handleClick,\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, this.props.children))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/soundloop/src/components/ToneButton.js"],"names":["React","Draggable","connect","addTone","updateTone","playTone","ToneButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","snapped","handleStop","bind","snap","findSnapCoordinates","findClosestLoop","handleClick","handleDrag","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","newdiff","index","value","x1","y1","cx","cy","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","min","ret","tones","position","offset","diffX","diffY","dist","sqrt","findFakeCoordinates","originalAngle","window","innerWidth","innerHeight","angleRad","PI","newAngle","console","log","loopToSnap","rotation","fakeCoords","intervalId","playing","dispatch","color","sound","rect","current","getBoundingClientRect","left","top","setState","attachedLoop","active","render","borderRadius","border","borderColor","backgroundColor","width","height","outline","pointerEvents","zIndex","children","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\n\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { addTone, updateTone } from \"../actions/tones\";\nimport { playTone } from \"../actions/cord\";\nclass ToneButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      snapped: false\n    };\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n      if (newdiff < diff) {\n        diff = newdiff;\n        curr = loopArray[i].radius;\n        id = i;\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b){\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++){\n      // need to compare pt + or - offset\n      var x = this.props.tones[i].position.x - this.props.tones[i].offset.x;\n      var y = this.props.tones[i].position.y - this.props.tones[i].offset.y;\n      var diffX = x-a;\n      var diffY = y-b;\n      var dist = Math.sqrt((diffX*diffX)+(diffY*diffY));\n      if (dist < min){\n        min = dist;\n        ret = this.props.tones[i].id;\n      }\n      \n    }\n    return ret;\n  }\n\n  findFakeCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    var angleRad = angle * (Math.PI/180);\n    var newAngle = originalAngle - angleRad;\n    console.log(\"OG ANGLE: \" + originalAngle)\n    console.log(\"LOOP ANGLE: \" + angleRad)\n    console.log(\"NEW ANGLE: \" + newAngle)\n    const x2 = cx + Math.cos(newAngle) * distance;\n    const y2 = cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    const cx = window.innerWidth / 2;\n    const cy = window.innerHeight / 2;\n    console.log(\"x1: \" + x1)\n    console.log(\"y1: \" + y1)\n    console.log(\"cy: \" + cy)\n    \n    \n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - cy;\n    var b = x1 - cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n    if (loopToSnap){\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var fakeCoords = this.findFakeCoordinates(b, a, angle, distToCenter)\n    \n      var intervalId = this.findClosestInterval(fakeCoords.x, fakeCoords.y)\n      console.log(\"CLOSEST TONE: \" + intervalId)\n      if( !this.props.playing){\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          0\n        )\n      );\n        }\n    }\n  }\n\n  handleStop() {\n    this.rect = this.selector.current.getBoundingClientRect();\n    const x = this.rect.left;\n    const y = this.rect.top;\n\n    this.snap(x, y);\n\n    this.setState({\n      deltaPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true){\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5))\n      }\n    }\n  }\n\n  handleClick() {\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound));\n    }\n  }\n\n  handleDrag(){\n    for (var i = 0; i < this.props.tones.length; i++){\n      if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true){\n        this.props.dispatch(updateTone(i, \"#fff\", null, 1.5))\n      }\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <Draggable position={this.state.deltaPosition} onStop={this.handleStop} onStart={this.handleDrag}>\n          <div\n            ref={this.selector}\n            className=\"hover-shadow\"\n            onClick={this.handleClick}\n            \n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n\n              border: \"none\",\n              outline: \"none\"\n            }}\n          >\n            <div className=\"note-select\">{this.props.children}</div>\n          </div>\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state); // state\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToneButton);\n"]},"metadata":{},"sourceType":"module"}