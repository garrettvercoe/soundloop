{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop/src/components/MouseTracker.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeInvisible, cursorMoveSelected, cursorMoveUnselected } from \"../actions/cursor\";\nimport { updateTone } from \"../actions/tones\";\nimport { red, pink, purple, indigo, blue, cyan, teal, green, yellow, amber, orange, deepOrange } from \"@material-ui/core/colors/\";\nconst colorHues = [red, pink, purple, indigo, blue, cyan, teal, green, yellow, amber, orange, deepOrange];\n\nclass Cursor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"#000\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.showRightCursor = this.showRightCursor.bind(this);\n    this.findPointerEvent = this.findPointerEvent.bind(this);\n    this.pickUp = this.pickUp.bind(this);\n    this.putDown = this.putDown.bind(this);\n    this.erase = this.erase.bind(this);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  componentDidMount() {\n    this.colorHue = this.props.sounds.indexOf(this.props.sound);\n    this.setState({\n      color: colorHues[this.colorHue][this.props.octave * 100]\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.sound !== this.props.sound) {\n      this.colorHue = this.props.sounds.indexOf(this.props.sound);\n      this.setState({\n        color: colorHues[this.colorHue][this.props.octave * 100]\n      });\n    }\n\n    if (prevProps.octave !== this.props.octave) {\n      this.colorHue = this.props.sounds.indexOf(this.props.sound);\n      this.setState({\n        color: colorHues[this.colorHue][this.props.octave * 100]\n      });\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // convert current cursor location to coordinates\n\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1); // original angle in radians\n\n    var angleRad = angle * (Math.PI / 180); // new angle\n\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y, loopToSnap.index);\n      return intervalId;\n    }\n\n    return false;\n  }\n\n  pickUp(at) {\n    //pass in data first to cursor\n    if (this.props.tones[at].sound !== null) {\n      var sound = this.props.tones[at].sound.replace(/[0-9]/g, \"\");\n      this.props.dispatch(updateTone(at, \"#692d54\", null, this.props.screenHeight / 350));\n      this.props.dispatch(cursorMoveSelected(sound));\n    }\n  }\n\n  putDown(at) {\n    this.props.dispatch(updateTone(at, this.color, this.props.sound + this.props.octave, //  this.props.screenHeight / 50,\n    this.props.toneSizes[this.props.selectedSustain], this.props.selectedSustain));\n\n    if (this.props.mode === \"MOVE_SELECTED\") {\n      this.props.dispatch(cursorMoveUnselected());\n    }\n  }\n\n  erase(at) {\n    this.props.dispatch(updateTone(at, \"#692d54\", null, this.props.screenHeight / 350));\n  }\n\n  showRightCursor() {\n    switch (this.props.mode) {\n      case \"ADD\":\n        return \"pointer\";\n\n      case \"ERASE\":\n        return \"crosshair\";\n\n      case \"MOVE_UNSELECTED\":\n        return \"grab\";\n\n      case \"MOVE_SELECTED\":\n        return \"grabbed\";\n\n      default:\n        return \"auto\";\n    }\n  }\n\n  findPointerEvent() {\n    switch (this.props.mode) {\n      case \"ERASE\":\n        return \"auto\";\n\n      case \"ADD\":\n        return \"auto\";\n\n      case \"MOVE_UNSELECTED\":\n        return \"auto\";\n\n      case \"MOVE_SELECTED\":\n        return \"auto\";\n\n      default:\n        return \"none\";\n    }\n  }\n\n  handleClick() {\n    if (this.props.playing === false) {\n      const x = this.props.cursorPos.x;\n      const y = this.props.cursorPos.y;\n      var toneId = this.snap(x, y);\n\n      if (toneId !== false) {\n        if (this.props.mode === \"ADD\") {\n          this.putDown(toneId);\n        } else if (this.props.mode === \"MOVE_UNSELECTED\") {\n          this.pickUp(toneId);\n        } else if (this.props.mode === \"MOVE_SELECTED\") {\n          this.putDown(toneId);\n        } else if (this.props.mode === \"ERASE\") {\n          this.erase(toneId);\n        }\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => this.handleClick(),\n      style: {\n        position: \"absolute\",\n        left: this.props.cursorPos.x - this.props.toneSizes[this.props.selectedSustain],\n        top: this.props.cursorPos.y - this.props.toneSizes[this.props.selectedSustain],\n        width: 2 * this.props.toneSizes[this.props.selectedSustain],\n        height: 2 * this.props.toneSizes[this.props.selectedSustain],\n        borderRadius: \"50%\",\n        pointerEvents: this.findPointerEvent(),\n        cursor: this.showRightCursor(),\n        background: this.props.mode === \"ADD\" || this.props.mode === \"MOVE_SELECTED\" ? this.color : \"transparent\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    mode: state.cursor.mode,\n    loops: state.loops,\n    tones: state.tones,\n    sound: state.cursor.sound,\n    sounds: state.shared.sounds,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    octave: state.shared.octave,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n}\n\nexport default connect(mapStateToProps)(Cursor);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop/src/components/MouseTracker.js"],"names":["React","connect","makeInvisible","cursorMoveSelected","cursorMoveUnselected","updateTone","red","pink","purple","indigo","blue","cyan","teal","green","yellow","amber","orange","deepOrange","colorHues","Cursor","Component","constructor","props","state","color","handleClick","bind","showRightCursor","findPointerEvent","pickUp","putDown","erase","cx","center","x","cy","y","snap","findSnapCoordinates","findClosestLoop","componentDidMount","colorHue","sounds","indexOf","sound","setState","octave","componentDidUpdate","prevProps","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","active","newdiff","index","value","x1","y1","distance","angle","atan2","x2","cos","y2","sin","findClosestInterval","a","b","loop","min","ret","tones","attachedLoop","offset","diffX","diffY","dist","sqrt","findTrueCoordinates","originalAngle","angleRad","PI","newAngle","loopToSnap","rotation","trueCoords","intervalId","at","replace","dispatch","screenHeight","toneSizes","selectedSustain","mode","playing","cursorPos","toneId","render","position","left","top","width","height","borderRadius","pointerEvents","cursor","background","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  makeInvisible,\n  cursorMoveSelected,\n  cursorMoveUnselected\n} from \"../actions/cursor\";\nimport { updateTone } from \"../actions/tones\";\nimport {\n  red,\n  pink,\n  purple,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  yellow,\n  amber,\n  orange,\n  deepOrange\n} from \"@material-ui/core/colors/\";\n\nconst colorHues = [\n  red,\n  pink,\n  purple,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  yellow,\n  amber,\n  orange,\n  deepOrange\n];\n\nclass Cursor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"#000\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.showRightCursor = this.showRightCursor.bind(this);\n    this.findPointerEvent = this.findPointerEvent.bind(this);\n    this.pickUp = this.pickUp.bind(this);\n    this.putDown = this.putDown.bind(this);\n    this.erase = this.erase.bind(this);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n\n    this.snap = this.snap.bind(this);\n    this.findSnapCoordinates = this.findSnapCoordinates.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n  }\n\n  componentDidMount() {\n    this.colorHue = this.props.sounds.indexOf(this.props.sound);\n    this.setState({ color: colorHues[this.colorHue][this.props.octave * 100] });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.sound !== this.props.sound) {\n      this.colorHue = this.props.sounds.indexOf(this.props.sound);\n      this.setState({\n        color: colorHues[this.colorHue][this.props.octave * 100]\n      });\n    }\n    if (prevProps.octave !== this.props.octave) {\n      this.colorHue = this.props.sounds.indexOf(this.props.sound);\n      this.setState({\n        color: colorHues[this.colorHue][this.props.octave * 100]\n      });\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findSnapCoordinates(x1, y1, cx, cy, distance) {\n    var angle = Math.atan2(y1, x1);\n    const x2 = cx - Math.cos(angle) * distance;\n    const y2 = cy + Math.sin(angle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // convert current cursor location to coordinates\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1);\n    // original angle in radians\n    var angleRad = angle * (Math.PI / 180);\n    // new angle\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(\n        trueCoords.x,\n        trueCoords.y,\n        loopToSnap.index\n      );\n\n      return intervalId;\n    }\n    return false;\n  }\n\n  pickUp(at) {\n    //pass in data first to cursor\n    if (this.props.tones[at].sound !== null) {\n      var sound = this.props.tones[at].sound.replace(/[0-9]/g, \"\");\n\n      this.props.dispatch(\n        updateTone(at, \"#692d54\", null, this.props.screenHeight / 350)\n      );\n      this.props.dispatch(cursorMoveSelected(sound));\n    }\n  }\n  putDown(at) {\n    this.props.dispatch(\n      updateTone(\n        at,\n        this.color,\n        this.props.sound + this.props.octave,\n        //  this.props.screenHeight / 50,\n        this.props.toneSizes[this.props.selectedSustain],\n        this.props.selectedSustain\n      )\n    );\n    if (this.props.mode === \"MOVE_SELECTED\") {\n      this.props.dispatch(cursorMoveUnselected());\n    }\n  }\n  erase(at) {\n    this.props.dispatch(\n      updateTone(at, \"#692d54\", null, this.props.screenHeight / 350)\n    );\n  }\n\n  showRightCursor() {\n    switch (this.props.mode) {\n      case \"ADD\":\n        return \"pointer\";\n      case \"ERASE\":\n        return \"crosshair\";\n      case \"MOVE_UNSELECTED\":\n        return \"grab\";\n      case \"MOVE_SELECTED\":\n        return \"grabbed\";\n      default:\n        return \"auto\";\n    }\n  }\n\n  findPointerEvent() {\n    switch (this.props.mode) {\n      case \"ERASE\":\n        return \"auto\";\n      case \"ADD\":\n        return \"auto\";\n      case \"MOVE_UNSELECTED\":\n        return \"auto\";\n      case \"MOVE_SELECTED\":\n        return \"auto\";\n\n      default:\n        return \"none\";\n    }\n  }\n  handleClick() {\n    if (this.props.playing === false) {\n      const x = this.props.cursorPos.x;\n      const y = this.props.cursorPos.y;\n\n      var toneId = this.snap(x, y);\n      if (toneId !== false) {\n        if (this.props.mode === \"ADD\") {\n          this.putDown(toneId);\n        } else if (this.props.mode === \"MOVE_UNSELECTED\") {\n          this.pickUp(toneId);\n        } else if (this.props.mode === \"MOVE_SELECTED\") {\n          this.putDown(toneId);\n        } else if (this.props.mode === \"ERASE\") {\n          this.erase(toneId);\n        }\n      }\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          onClick={() => this.handleClick()}\n          style={{\n            position: \"absolute\",\n            left:\n              this.props.cursorPos.x -\n              this.props.toneSizes[this.props.selectedSustain],\n            top:\n              this.props.cursorPos.y -\n              this.props.toneSizes[this.props.selectedSustain],\n            width: 2 * this.props.toneSizes[this.props.selectedSustain],\n            height: 2 * this.props.toneSizes[this.props.selectedSustain],\n\n            borderRadius: \"50%\",\n            pointerEvents: this.findPointerEvent(),\n            cursor: this.showRightCursor(),\n            background:\n              this.props.mode === \"ADD\" || this.props.mode === \"MOVE_SELECTED\"\n                ? this.color\n                : \"transparent\"\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    mode: state.cursor.mode,\n    loops: state.loops,\n    tones: state.tones,\n    sound: state.cursor.sound,\n    sounds: state.shared.sounds,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    octave: state.shared.octave,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n}\n\nexport default connect(mapStateToProps)(Cursor);\n"]},"metadata":{},"sourceType":"module"}